
d:/JSN/Desktop/repos/c53-iot/fyp-argon-ble/target/3.3.0/argon/fyp-argon-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83c0  000b83c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b83e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e498  000b83e8  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ec  2003e504  2003e504  0002e504  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8454  000b8454  00028454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b847c  000b847c  0002847c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e68c1  00000000  00000000  00028480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000d39c  00000000  00000000  0010ed41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003170f  00000000  00000000  0011c0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002690  00000000  00000000  0014d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009728  00000000  00000000  0014fe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000304ce  00000000  00000000  001595a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d3b5  00000000  00000000  00189a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00129fb8  00000000  00000000  001b6e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006df0  00000000  00000000  002e0de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fda5 	bl	b7b7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fdc7 	bl	b7bcc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e498 	.word	0x2003e498
   b4048:	000b83e8 	.word	0x000b83e8
   b404c:	2003e504 	.word	0x2003e504
   b4050:	2003e504 	.word	0x2003e504
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f9b3 	bl	b73c8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8394 	.word	0x000b8394
   b407c:	000b83b8 	.word	0x000b83b8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b864 	b.w	b414c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f87d 	bl	b4184 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b953 	b.w	b7338 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bba3 	b.w	b47dc <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bba1 	b.w	b47dc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bba7 	b.w	b47ec <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f003 f8d1 	bl	b7262 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    }
  }
  Serial.println();
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b40cc:	b570      	push	{r4, r5, r6, lr}
   b40ce:	b088      	sub	sp, #32
   b40d0:	460d      	mov	r5, r1
   b40d2:	9201      	str	r2, [sp, #4]
   b40d4:	4604      	mov	r4, r0
  Serial.printf("receive data from %s: ", (const char*)peer.address().toString());
   b40d6:	f003 fa7b 	bl	b75d0 <_Z16_fetch_usbserialv>
   b40da:	9901      	ldr	r1, [sp, #4]
   b40dc:	4606      	mov	r6, r0
   b40de:	a802      	add	r0, sp, #8
   b40e0:	f001 f9b8 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b40e4:	2200      	movs	r2, #0
   b40e6:	a902      	add	r1, sp, #8
   b40e8:	a804      	add	r0, sp, #16
   b40ea:	f000 fed7 	bl	b4e9c <_ZNK8particle10BleAddress8toStringEb>
   b40ee:	9a04      	ldr	r2, [sp, #16]
   b40f0:	490d      	ldr	r1, [pc, #52]	; (b4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c>)
   b40f2:	4630      	mov	r0, r6
   b40f4:	f7ff ffdb 	bl	b40ae <_ZN5Print6printfEPKcz>
   b40f8:	a804      	add	r0, sp, #16
   b40fa:	f000 fbf7 	bl	b48ec <_ZN6StringD1Ev>
  for (size_t ii = 0; ii < len; ii++) {
   b40fe:	4425      	add	r5, r4
   b4100:	42ac      	cmp	r4, r5
   b4102:	d007      	beq.n	b4114 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
    Serial.write(data[ii]);
   b4104:	f003 fa64 	bl	b75d0 <_Z16_fetch_usbserialv>
   b4108:	6803      	ldr	r3, [r0, #0]
   b410a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b410e:	689b      	ldr	r3, [r3, #8]
   b4110:	4798      	blx	r3
  for (size_t ii = 0; ii < len; ii++) {
   b4112:	e7f5      	b.n	b4100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
  }
  Serial.println();
   b4114:	f003 fa5c 	bl	b75d0 <_Z16_fetch_usbserialv>
   b4118:	f003 f879 	bl	b720e <_ZN5Print7printlnEv>
  canDisconnect = true;
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>)
   b411e:	2201      	movs	r2, #1
   b4120:	701a      	strb	r2, [r3, #0]
}
   b4122:	b008      	add	sp, #32
   b4124:	bd70      	pop	{r4, r5, r6, pc}
   b4126:	bf00      	nop
   b4128:	000b7d64 	.word	0x000b7d64
   b412c:	2003e550 	.word	0x2003e550

000b4130 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4130:	b40e      	push	{r1, r2, r3}
   b4132:	b503      	push	{r0, r1, lr}
   b4134:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4136:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4138:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b413c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b413e:	f003 f890 	bl	b7262 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4142:	b002      	add	sp, #8
   b4144:	f85d eb04 	ldr.w	lr, [sp], #4
   b4148:	b003      	add	sp, #12
   b414a:	4770      	bx	lr

000b414c <setup>:
void setup() {
   b414c:	b508      	push	{r3, lr}
  BLE.on();
   b414e:	f001 f9eb 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4152:	f001 fa33 	bl	b55bc <_ZNK8particle14BleLocalDevice2onEv>
  BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
   b4156:	f001 f9e7 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b415a:	f04f 0100 	mov.w	r1, #0
   b415e:	f001 fa77 	bl	b5650 <_ZNK8particle14BleLocalDevice10setScanPhyENS_9EnumFlagsINS_6BlePhyEvEE>
  peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   b4162:	4a06      	ldr	r2, [pc, #24]	; (b417c <setup+0x30>)
   b4164:	4906      	ldr	r1, [pc, #24]	; (b4180 <setup+0x34>)
   b4166:	4610      	mov	r0, r2
   b4168:	f002 faa0 	bl	b66ac <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  BLE.selectAntenna(BleAntennaType::EXTERNAL);
   b416c:	f001 f9dc 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
}
   b4170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLE.selectAntenna(BleAntennaType::EXTERNAL);
   b4174:	2102      	movs	r1, #2
   b4176:	f001 ba28 	b.w	b55ca <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
   b417a:	bf00      	nop
   b417c:	2003e564 	.word	0x2003e564
   b4180:	000b40cd 	.word	0x000b40cd

000b4184 <loop>:
void loop() {
   b4184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (millis() - msLast < MS_PERIOD) return;
   b4188:	4c7b      	ldr	r4, [pc, #492]	; (b4378 <loop+0x1f4>)
void loop() {
   b418a:	b0a1      	sub	sp, #132	; 0x84

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b418c:	f000 f97a 	bl	b4484 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLast < MS_PERIOD) return;
   b4190:	6823      	ldr	r3, [r4, #0]
   b4192:	1ac0      	subs	r0, r0, r3
   b4194:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b4198:	f0c0 80eb 	bcc.w	b4372 <loop+0x1ee>
   b419c:	f000 f972 	bl	b4484 <HAL_Timer_Get_Milli_Seconds>
  msLast = millis();
   b41a0:	6020      	str	r0, [r4, #0]
  size_t count = BLE.scanWithFilter(BleScanFilter().serviceUUID(serviceUuid), scanResults, SCAN_RESULT_COUNT);
   b41a2:	f001 f9c1 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a6:	4f75      	ldr	r7, [pc, #468]	; (b437c <loop+0x1f8>)
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b41a8:	2400      	movs	r4, #0

/* AND-filter */
class BleScanFilter {
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
   b41aa:	f647 737f 	movw	r3, #32639	; 0x7f7f
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b41ae:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
   b41b2:	4606      	mov	r6, r0
inline spark::Vector<T, AllocatorT>::Vector() :
   b41b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b41b6:	ad02      	add	r5, sp, #8
   b41b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b41ba:	f8d7 c000 	ldr.w	ip, [r7]
   b41be:	f8c5 c000 	str.w	ip, [r5]
   b41c2:	af02      	add	r7, sp, #8
   b41c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b41c6:	ad07      	add	r5, sp, #28
        capacity_(0) {
   b41c8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
   b41cc:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
   b41d0:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
   b41d4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b41d8:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
   b41dc:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
   b41e0:	941f      	str	r4, [sp, #124]	; 0x7c
        return deviceNames_;
    }

    // Service UUID
    template<typename T>
    BleScanFilter& serviceUUID(T uuid) {
   b41e2:	af07      	add	r7, sp, #28
   b41e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b41e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b41e8:	f8c5 c000 	str.w	ip, [r5]
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b41ec:	ad0c      	add	r5, sp, #48	; 0x30
   b41ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    return ::realloc(ptr, size);
   b41f0:	4620      	mov	r0, r4
   b41f2:	f8c5 c000 	str.w	ip, [r5]
   b41f6:	2114      	movs	r1, #20
   b41f8:	f000 fb00 	bl	b47fc <realloc>
            if (!d) {
   b41fc:	4604      	mov	r4, r0
   b41fe:	b188      	cbz	r0, b4224 <loop+0xa0>
        capacity_ = n;
   b4200:	2301      	movs	r3, #1
   b4202:	9316      	str	r3, [sp, #88]	; 0x58
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4204:	9b15      	ldr	r3, [sp, #84]	; 0x54
        data_ = d;
   b4206:	9014      	str	r0, [sp, #80]	; 0x50
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4208:	2214      	movs	r2, #20
   b420a:	4601      	mov	r1, r0
   b420c:	435a      	muls	r2, r3
   b420e:	3014      	adds	r0, #20
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   b4210:	ad0c      	add	r5, sp, #48	; 0x30
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4212:	f003 fcc1 	bl	b7b98 <memmove>
    new(p) T(std::move(value));
   b4216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b421a:	682b      	ldr	r3, [r5, #0]
   b421c:	6023      	str	r3, [r4, #0]
    ++size_;
   b421e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b4220:	3301      	adds	r3, #1
   b4222:	9315      	str	r3, [sp, #84]	; 0x54
   b4224:	230a      	movs	r3, #10
   b4226:	4a56      	ldr	r2, [pc, #344]	; (b4380 <loop+0x1fc>)
   b4228:	a911      	add	r1, sp, #68	; 0x44
   b422a:	4630      	mov	r0, r6
   b422c:	f002 f834 	bl	b6298 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj>
   b4230:	4606      	mov	r6, r0
    ::free(ptr);
   b4232:	981a      	ldr	r0, [sp, #104]	; 0x68
   b4234:	f000 fada 	bl	b47ec <free>
   b4238:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b423a:	f000 fad7 	bl	b47ec <free>
   b423e:	9814      	ldr	r0, [sp, #80]	; 0x50
   b4240:	f000 fad4 	bl	b47ec <free>
    destruct(data_, data_ + size_);
   b4244:	e9dd 4311 	ldrd	r4, r3, [sp, #68]	; 0x44
   b4248:	eb04 1503 	add.w	r5, r4, r3, lsl #4
        for (; p != end; ++p) {
   b424c:	42a5      	cmp	r5, r4
   b424e:	d004      	beq.n	b425a <loop+0xd6>
            p->~T();
   b4250:	4620      	mov	r0, r4
   b4252:	f000 fb4b 	bl	b48ec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4256:	3410      	adds	r4, #16
   b4258:	e7f8      	b.n	b424c <loop+0xc8>
    ::free(ptr);
   b425a:	9811      	ldr	r0, [sp, #68]	; 0x44
        return advertisingData_;
   b425c:	f8df 8120 	ldr.w	r8, [pc, #288]	; b4380 <loop+0x1fc>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4260:	4d48      	ldr	r5, [pc, #288]	; (b4384 <loop+0x200>)
   b4262:	f000 fac3 	bl	b47ec <free>
  Serial.printlnf("Found %d device(s) exposing service %s", count, (const char*)serviceUuid.toString());
   b4266:	f003 f9b3 	bl	b75d0 <_Z16_fetch_usbserialv>
   b426a:	4944      	ldr	r1, [pc, #272]	; (b437c <loop+0x1f8>)
   b426c:	4604      	mov	r4, r0
   b426e:	2200      	movs	r2, #0
   b4270:	a811      	add	r0, sp, #68	; 0x44
   b4272:	f000 ff7a 	bl	b516a <_ZNK8particle7BleUuid8toStringEb>
   b4276:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4278:	4943      	ldr	r1, [pc, #268]	; (b4388 <loop+0x204>)
   b427a:	4632      	mov	r2, r6
   b427c:	4620      	mov	r0, r4
   b427e:	f7ff ff57 	bl	b4130 <_ZN5Print8printlnfEPKcz>
   b4282:	a811      	add	r0, sp, #68	; 0x44
   b4284:	f000 fb32 	bl	b48ec <_ZN6StringD1Ev>
   b4288:	2700      	movs	r7, #0
  for (uint8_t ii = 0; ii < count; ii++) {
   b428a:	b2fc      	uxtb	r4, r7
   b428c:	42a6      	cmp	r6, r4
   b428e:	d969      	bls.n	b4364 <loop+0x1e0>
   b4290:	2324      	movs	r3, #36	; 0x24
   b4292:	435c      	muls	r4, r3
   b4294:	f104 0008 	add.w	r0, r4, #8
    scanResults[ii].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, (uint8_t*)&cd, sizeof(cd));
   b4298:	2304      	movs	r3, #4
   b429a:	aa0c      	add	r2, sp, #48	; 0x30
   b429c:	21ff      	movs	r1, #255	; 0xff
   b429e:	4440      	add	r0, r8
   b42a0:	f000 ff73 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    Serial.printlnf("Device %s advertises %04X: %u", (const char*)scanResults[ii].address().toString(), cd.companyID, cd.data);
   b42a4:	f003 f994 	bl	b75d0 <_Z16_fetch_usbserialv>
        return address_;
   b42a8:	4444      	add	r4, r8
   b42aa:	4681      	mov	r9, r0
   b42ac:	2200      	movs	r2, #0
   b42ae:	4621      	mov	r1, r4
   b42b0:	a811      	add	r0, sp, #68	; 0x44
   b42b2:	f000 fdf3 	bl	b4e9c <_ZNK8particle10BleAddress8toStringEb>
   b42b6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
   b42ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b42bc:	4933      	ldr	r1, [pc, #204]	; (b438c <loop+0x208>)
   b42be:	9300      	str	r3, [sp, #0]
   b42c0:	4648      	mov	r0, r9
   b42c2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   b42c6:	f7ff ff33 	bl	b4130 <_ZN5Print8printlnfEPKcz>
   b42ca:	a811      	add	r0, sp, #68	; 0x44
   b42cc:	f000 fb0e 	bl	b48ec <_ZN6StringD1Ev>
    peer = BLE.connect(scanResults[ii].address());
   b42d0:	f001 f92a 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42d4:	2301      	movs	r3, #1
   b42d6:	4601      	mov	r1, r0
   b42d8:	4622      	mov	r2, r4
   b42da:	a811      	add	r0, sp, #68	; 0x44
   b42dc:	f002 fd28 	bl	b6d30 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b42e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b42e2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   b42e6:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b42e8:	686b      	ldr	r3, [r5, #4]
   b42ea:	4599      	cmp	r9, r3
   b42ec:	d01b      	beq.n	b4326 <loop+0x1a2>
	    if (__tmp != 0)
   b42ee:	f1b9 0f00 	cmp.w	r9, #0
   b42f2:	d004      	beq.n	b42fe <loop+0x17a>
    { ++_M_use_count; }
   b42f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   b42f8:	3301      	adds	r3, #1
   b42fa:	f8c9 3004 	str.w	r3, [r9, #4]
	    if (_M_pi != 0)
   b42fe:	686c      	ldr	r4, [r5, #4]
   b4300:	b17c      	cbz	r4, b4322 <loop+0x19e>
      if (--_M_use_count == 0)
   b4302:	6863      	ldr	r3, [r4, #4]
   b4304:	3b01      	subs	r3, #1
   b4306:	6063      	str	r3, [r4, #4]
   b4308:	b95b      	cbnz	r3, b4322 <loop+0x19e>
          _M_dispose();
   b430a:	6823      	ldr	r3, [r4, #0]
   b430c:	4620      	mov	r0, r4
   b430e:	689b      	ldr	r3, [r3, #8]
   b4310:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4312:	68a3      	ldr	r3, [r4, #8]
   b4314:	3b01      	subs	r3, #1
   b4316:	60a3      	str	r3, [r4, #8]
   b4318:	b91b      	cbnz	r3, b4322 <loop+0x19e>
            _M_destroy();
   b431a:	6823      	ldr	r3, [r4, #0]
   b431c:	4620      	mov	r0, r4
   b431e:	68db      	ldr	r3, [r3, #12]
   b4320:	4798      	blx	r3
	    _M_pi = __tmp;
   b4322:	f8c5 9004 	str.w	r9, [r5, #4]
   b4326:	a811      	add	r0, sp, #68	; 0x44
   b4328:	f001 fa4b 	bl	b57c2 <_ZN8particle13BlePeerDeviceD1Ev>
    if (peer.connected()) {
   b432c:	4628      	mov	r0, r5
   b432e:	f001 f86d 	bl	b540c <_ZNK8particle13BlePeerDevice9connectedEv>
   b4332:	b1a8      	cbz	r0, b4360 <loop+0x1dc>
      peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b4334:	4a16      	ldr	r2, [pc, #88]	; (b4390 <loop+0x20c>)
   b4336:	4917      	ldr	r1, [pc, #92]	; (b4394 <loop+0x210>)
      while(!canDisconnect) Particle.process();
   b4338:	4c17      	ldr	r4, [pc, #92]	; (b4398 <loop+0x214>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b433a:	f8df 9060 	ldr.w	r9, [pc, #96]	; b439c <loop+0x218>
      peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b433e:	4628      	mov	r0, r5
   b4340:	f002 f98a 	bl	b6658 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
      while(!canDisconnect) Particle.process();
   b4344:	7823      	ldrb	r3, [r4, #0]
   b4346:	b933      	cbnz	r3, b4356 <loop+0x1d2>
		return HAL_Timer_Get_Milli_Seconds();
   b4348:	f000 f89c 	bl	b4484 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b434c:	f8c9 0000 	str.w	r0, [r9]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b4350:	f000 fa34 	bl	b47bc <spark_process>
    }
   b4354:	e7f6      	b.n	b4344 <loop+0x1c0>
      peer.disconnect();
   b4356:	4628      	mov	r0, r5
   b4358:	f001 fee2 	bl	b6120 <_ZNK8particle13BlePeerDevice10disconnectEv>
      canDisconnect = false;;
   b435c:	2300      	movs	r3, #0
   b435e:	7023      	strb	r3, [r4, #0]
  for (uint8_t ii = 0; ii < count; ii++) {
   b4360:	3701      	adds	r7, #1
   b4362:	e792      	b.n	b428a <loop+0x106>
  Serial.println();
   b4364:	f003 f934 	bl	b75d0 <_Z16_fetch_usbserialv>
}
   b4368:	b021      	add	sp, #132	; 0x84
   b436a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.println();
   b436e:	f002 bf4e 	b.w	b720e <_ZN5Print7printlnEv>
}
   b4372:	b021      	add	sp, #132	; 0x84
   b4374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4378:	2003e54c 	.word	0x2003e54c
   b437c:	2003e510 	.word	0x2003e510
   b4380:	2003e56c 	.word	0x2003e56c
   b4384:	2003e554 	.word	0x2003e554
   b4388:	000b7d7b 	.word	0x000b7d7b
   b438c:	000b7da2 	.word	0x000b7da2
   b4390:	2003e538 	.word	0x2003e538
   b4394:	2003e564 	.word	0x2003e564
   b4398:	2003e550 	.word	0x2003e550
   b439c:	2003e758 	.word	0x2003e758

000b43a0 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b43a0:	4b1c      	ldr	r3, [pc, #112]	; (b4414 <_GLOBAL__sub_I_SystemMode+0x74>)
    SleepResult() {}
   b43a2:	4a1d      	ldr	r2, [pc, #116]	; (b4418 <_GLOBAL__sub_I_SystemMode+0x78>)
}
   b43a4:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b43a6:	2400      	movs	r4, #0
   b43a8:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b43ac:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b43ae:	2003      	movs	r0, #3
   b43b0:	f000 f980 	bl	b46b4 <set_system_mode>
SYSTEM_THREAD(ENABLED)
   b43b4:	4621      	mov	r1, r4
   b43b6:	2001      	movs	r0, #1
   b43b8:	f000 f984 	bl	b46c4 <system_thread_set_state>
const BleUuid serviceUuid("6057ffae-9efd-11ec-b909-0242ac120002");
   b43bc:	4917      	ldr	r1, [pc, #92]	; (b441c <_GLOBAL__sub_I_SystemMode+0x7c>)
   b43be:	4818      	ldr	r0, [pc, #96]	; (b4420 <_GLOBAL__sub_I_SystemMode+0x80>)
   b43c0:	4c18      	ldr	r4, [pc, #96]	; (b4424 <_GLOBAL__sub_I_SystemMode+0x84>)
   b43c2:	f000 fe55 	bl	b5070 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6058033c-9efd-11ec-b909-0242ac120002");
   b43c6:	4918      	ldr	r1, [pc, #96]	; (b4428 <_GLOBAL__sub_I_SystemMode+0x88>)
   b43c8:	4818      	ldr	r0, [pc, #96]	; (b442c <_GLOBAL__sub_I_SystemMode+0x8c>)
   b43ca:	f000 fe51 	bl	b5070 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6058054e-9efd-11ec-b909-0242ac120002");
   b43ce:	4918      	ldr	r1, [pc, #96]	; (b4430 <_GLOBAL__sub_I_SystemMode+0x90>)
   b43d0:	4818      	ldr	r0, [pc, #96]	; (b4434 <_GLOBAL__sub_I_SystemMode+0x94>)
   b43d2:	f000 fe4d 	bl	b5070 <_ZN8particle7BleUuidC1EPKc>
   b43d6:	250a      	movs	r5, #10
            : rssi_(BLE_RSSI_INVALID) {
   b43d8:	267f      	movs	r6, #127	; 0x7f
   b43da:	4620      	mov	r0, r4
   b43dc:	f000 fcf7 	bl	b4dce <_ZN8particle10BleAddressC1Ev>
   b43e0:	f104 0008 	add.w	r0, r4, #8
   b43e4:	f001 fd07 	bl	b5df6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b43e8:	f104 0014 	add.w	r0, r4, #20
   b43ec:	f001 fd03 	bl	b5df6 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b43f0:	3d01      	subs	r5, #1
   b43f2:	f884 6020 	strb.w	r6, [r4, #32]
   b43f6:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b43fa:	d1ee      	bne.n	b43da <_GLOBAL__sub_I_SystemMode+0x3a>
BleCharacteristic peerTxCharacteristic;
   b43fc:	480e      	ldr	r0, [pc, #56]	; (b4438 <_GLOBAL__sub_I_SystemMode+0x98>)
   b43fe:	f000 ff67 	bl	b52d0 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b4402:	480e      	ldr	r0, [pc, #56]	; (b443c <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4404:	f000 ff64 	bl	b52d0 <_ZN8particle17BleCharacteristicC1Ev>
}
   b4408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlePeerDevice peer;
   b440c:	480c      	ldr	r0, [pc, #48]	; (b4440 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b440e:	f000 bfdb 	b.w	b53c8 <_ZN8particle13BlePeerDeviceC1Ev>
   b4412:	bf00      	nop
   b4414:	2003e504 	.word	0x2003e504
   b4418:	ffff0000 	.word	0xffff0000
   b441c:	000b7dc0 	.word	0x000b7dc0
   b4420:	2003e510 	.word	0x2003e510
   b4424:	2003e56c 	.word	0x2003e56c
   b4428:	000b7de5 	.word	0x000b7de5
   b442c:	2003e524 	.word	0x2003e524
   b4430:	000b7e0a 	.word	0x000b7e0a
   b4434:	2003e538 	.word	0x2003e538
   b4438:	2003e564 	.word	0x2003e564
   b443c:	2003e55c 	.word	0x2003e55c
   b4440:	2003e554 	.word	0x2003e554

000b4444 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <netdb_freeaddrinfo+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	689b      	ldr	r3, [r3, #8]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030268 	.word	0x00030268

000b4454 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <netdb_getaddrinfo+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	68db      	ldr	r3, [r3, #12]
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	00030268 	.word	0x00030268

000b4464 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <HAL_RNG_GetRandomNumber+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	685b      	ldr	r3, [r3, #4]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	00030218 	.word	0x00030218

000b4474 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <HAL_Delay_Microseconds+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	68db      	ldr	r3, [r3, #12]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	00030218 	.word	0x00030218

000b4484 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	695b      	ldr	r3, [r3, #20]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	00030218 	.word	0x00030218

000b4494 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <hal_ble_stack_init+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	689b      	ldr	r3, [r3, #8]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	00030278 	.word	0x00030278

000b44a4 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <hal_ble_select_antenna+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	691b      	ldr	r3, [r3, #16]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	00030278 	.word	0x00030278

000b44b4 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <hal_ble_gap_set_scan_parameters+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	00030278 	.word	0x00030278

000b44c4 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <hal_ble_gap_get_scan_parameters+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	00030278 	.word	0x00030278

000b44d4 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <hal_ble_gap_start_scan+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030278 	.word	0x00030278

000b44e4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b03      	ldr	r3, [pc, #12]	; (b44f4 <hal_ble_gap_stop_scan+0x10>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b44ee:	9301      	str	r3, [sp, #4]
   b44f0:	bd08      	pop	{r3, pc}
   b44f2:	0000      	.short	0x0000
   b44f4:	00030278 	.word	0x00030278

000b44f8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b03      	ldr	r3, [pc, #12]	; (b4508 <hal_ble_gap_disconnect+0x10>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4502:	9301      	str	r3, [sp, #4]
   b4504:	bd08      	pop	{r3, pc}
   b4506:	0000      	.short	0x0000
   b4508:	00030278 	.word	0x00030278

000b450c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b03      	ldr	r3, [pc, #12]	; (b451c <hal_ble_gatt_client_discover_all_services+0x10>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b4516:	9301      	str	r3, [sp, #4]
   b4518:	bd08      	pop	{r3, pc}
   b451a:	0000      	.short	0x0000
   b451c:	00030278 	.word	0x00030278

000b4520 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b03      	ldr	r3, [pc, #12]	; (b4530 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b452a:	9301      	str	r3, [sp, #4]
   b452c:	bd08      	pop	{r3, pc}
   b452e:	0000      	.short	0x0000
   b4530:	00030278 	.word	0x00030278

000b4534 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b03      	ldr	r3, [pc, #12]	; (b4544 <hal_ble_gatt_client_read+0x10>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b453e:	9301      	str	r3, [sp, #4]
   b4540:	bd08      	pop	{r3, pc}
   b4542:	0000      	.short	0x0000
   b4544:	00030278 	.word	0x00030278

000b4548 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b03      	ldr	r3, [pc, #12]	; (b4558 <hal_ble_gap_connect+0x10>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b4552:	9301      	str	r3, [sp, #4]
   b4554:	bd08      	pop	{r3, pc}
   b4556:	0000      	.short	0x0000
   b4558:	00030278 	.word	0x00030278

000b455c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b03      	ldr	r3, [pc, #12]	; (b456c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4566:	9301      	str	r3, [sp, #4]
   b4568:	bd08      	pop	{r3, pc}
   b456a:	0000      	.short	0x0000
   b456c:	00030278 	.word	0x00030278

000b4570 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b03      	ldr	r3, [pc, #12]	; (b4580 <hal_ble_gatt_client_configure_cccd+0x10>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b457a:	9301      	str	r3, [sp, #4]
   b457c:	bd08      	pop	{r3, pc}
   b457e:	0000      	.short	0x0000
   b4580:	00030278 	.word	0x00030278

000b4584 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <os_mutex_recursive_create+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030248 	.word	0x00030248

000b4594 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <os_mutex_recursive_lock+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030248 	.word	0x00030248

000b45a4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <os_mutex_recursive_unlock+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030248 	.word	0x00030248

000b45b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <inet_inet_ntop+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	695b      	ldr	r3, [r3, #20]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030264 	.word	0x00030264

000b45c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_usart_write+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	68db      	ldr	r3, [r3, #12]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003023c 	.word	0x0003023c

000b45d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_usart_available+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	691b      	ldr	r3, [r3, #16]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003023c 	.word	0x0003023c

000b45e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_usart_read+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	695b      	ldr	r3, [r3, #20]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003023c 	.word	0x0003023c

000b45f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <hal_usart_peek+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	699b      	ldr	r3, [r3, #24]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003023c 	.word	0x0003023c

000b4604 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_usart_flush+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	69db      	ldr	r3, [r3, #28]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	0003023c 	.word	0x0003023c

000b4614 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_usart_available_data_for_write+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	0003023c 	.word	0x0003023c

000b4624 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_usart_init_ex+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003023c 	.word	0x0003023c

000b4634 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <HAL_USB_USART_Init+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	681b      	ldr	r3, [r3, #0]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003024c 	.word	0x0003024c

000b4644 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_USB_USART_Available_Data+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	691b      	ldr	r3, [r3, #16]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003024c 	.word	0x0003024c

000b4654 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	695b      	ldr	r3, [r3, #20]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003024c 	.word	0x0003024c

000b4664 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <HAL_USB_USART_Receive_Data+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	699b      	ldr	r3, [r3, #24]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003024c 	.word	0x0003024c

000b4674 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <HAL_USB_USART_Send_Data+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	69db      	ldr	r3, [r3, #28]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003024c 	.word	0x0003024c

000b4684 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <HAL_USB_USART_Flush_Data+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6a1b      	ldr	r3, [r3, #32]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	0003024c 	.word	0x0003024c

000b4694 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <panic_+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030260 	.word	0x00030260

000b46a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <log_message+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030260 	.word	0x00030260

000b46b4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <set_system_mode+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	685b      	ldr	r3, [r3, #4]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030220 	.word	0x00030220

000b46c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <system_thread_set_state+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030220 	.word	0x00030220

000b46d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b03      	ldr	r3, [pc, #12]	; (b46e4 <system_ctrl_set_app_request_handler+0x10>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b46de:	9301      	str	r3, [sp, #4]
   b46e0:	bd08      	pop	{r3, pc}
   b46e2:	0000      	.short	0x0000
   b46e4:	00030220 	.word	0x00030220

000b46e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b03      	ldr	r3, [pc, #12]	; (b46f8 <system_ctrl_set_result+0x10>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b46f2:	9301      	str	r3, [sp, #4]
   b46f4:	bd08      	pop	{r3, pc}
   b46f6:	0000      	.short	0x0000
   b46f8:	00030220 	.word	0x00030220

000b46fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <network_connect+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	685b      	ldr	r3, [r3, #4]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030240 	.word	0x00030240

000b470c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <network_connecting+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	689b      	ldr	r3, [r3, #8]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030240 	.word	0x00030240

000b471c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <network_disconnect+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	68db      	ldr	r3, [r3, #12]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030240 	.word	0x00030240

000b472c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <network_ready+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	691b      	ldr	r3, [r3, #16]
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030240 	.word	0x00030240

000b473c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <network_on+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	695b      	ldr	r3, [r3, #20]
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030240 	.word	0x00030240

000b474c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <network_off+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	699b      	ldr	r3, [r3, #24]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030240 	.word	0x00030240

000b475c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <network_listen+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	69db      	ldr	r3, [r3, #28]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030240 	.word	0x00030240

000b476c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <network_listening+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	6a1b      	ldr	r3, [r3, #32]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030240 	.word	0x00030240

000b477c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <network_set_listen_timeout+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030240 	.word	0x00030240

000b478c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <network_get_listen_timeout+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030240 	.word	0x00030240

000b479c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <network_is_on+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030240 	.word	0x00030240

000b47ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <network_is_off+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	00030240 	.word	0x00030240

000b47bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <spark_process+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	689b      	ldr	r3, [r3, #8]
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	00030244 	.word	0x00030244

000b47cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	00030244 	.word	0x00030244

000b47dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <malloc+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	681b      	ldr	r3, [r3, #0]
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	0003021c 	.word	0x0003021c

000b47ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <free+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	685b      	ldr	r3, [r3, #4]
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	0003021c 	.word	0x0003021c

000b47fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <realloc+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	689b      	ldr	r3, [r3, #8]
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	0003021c 	.word	0x0003021c

000b480c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <vsnprintf+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	0003021c 	.word	0x0003021c

000b481c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <abort+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	0003021c 	.word	0x0003021c

000b482c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <__assert_func+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	0003021c 	.word	0x0003021c

000b483c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <newlib_impure_ptr_callback+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	0003021c 	.word	0x0003021c

000b484c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b484c:	2200      	movs	r2, #0
   b484e:	6840      	ldr	r0, [r0, #4]
   b4850:	4611      	mov	r1, r2
   b4852:	f7ff bf8b 	b.w	b476c <network_listening>

000b4856 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4856:	2200      	movs	r2, #0
   b4858:	6840      	ldr	r0, [r0, #4]
   b485a:	4611      	mov	r1, r2
   b485c:	f7ff bf96 	b.w	b478c <network_get_listen_timeout>

000b4860 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4860:	6840      	ldr	r0, [r0, #4]
   b4862:	2200      	movs	r2, #0
   b4864:	f7ff bf8a 	b.w	b477c <network_set_listen_timeout>

000b4868 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4868:	6840      	ldr	r0, [r0, #4]
   b486a:	2200      	movs	r2, #0
   b486c:	f081 0101 	eor.w	r1, r1, #1
   b4870:	f7ff bf74 	b.w	b475c <network_listen>

000b4874 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4874:	2300      	movs	r3, #0
   b4876:	6840      	ldr	r0, [r0, #4]
   b4878:	461a      	mov	r2, r3
   b487a:	4619      	mov	r1, r3
   b487c:	f7ff bf66 	b.w	b474c <network_off>

000b4880 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4880:	2300      	movs	r3, #0
   b4882:	6840      	ldr	r0, [r0, #4]
   b4884:	461a      	mov	r2, r3
   b4886:	4619      	mov	r1, r3
   b4888:	f7ff bf58 	b.w	b473c <network_on>

000b488c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b488c:	2200      	movs	r2, #0
   b488e:	6840      	ldr	r0, [r0, #4]
   b4890:	4611      	mov	r1, r2
   b4892:	f7ff bf4b 	b.w	b472c <network_ready>

000b4896 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4896:	2200      	movs	r2, #0
   b4898:	6840      	ldr	r0, [r0, #4]
   b489a:	4611      	mov	r1, r2
   b489c:	f7ff bf36 	b.w	b470c <network_connecting>

000b48a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b48a0:	6840      	ldr	r0, [r0, #4]
   b48a2:	2200      	movs	r2, #0
   b48a4:	2102      	movs	r1, #2
   b48a6:	f7ff bf39 	b.w	b471c <network_disconnect>

000b48aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b48aa:	2300      	movs	r3, #0
   b48ac:	6840      	ldr	r0, [r0, #4]
   b48ae:	461a      	mov	r2, r3
   b48b0:	f7ff bf24 	b.w	b46fc <network_connect>

000b48b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48b4:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b48b6:	2203      	movs	r2, #3
   b48b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b48ba:	4a02      	ldr	r2, [pc, #8]	; (b48c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b48bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b48be:	4770      	bx	lr
   b48c0:	2003e6d4 	.word	0x2003e6d4
   b48c4:	000b7e38 	.word	0x000b7e38

000b48c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b48c8:	4b05      	ldr	r3, [pc, #20]	; (b48e0 <_GLOBAL__sub_I_System+0x18>)
   b48ca:	2202      	movs	r2, #2
   b48cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b48ce:	4b05      	ldr	r3, [pc, #20]	; (b48e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b48d0:	4a05      	ldr	r2, [pc, #20]	; (b48e8 <_GLOBAL__sub_I_System+0x20>)
   b48d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48d4:	2000      	movs	r0, #0
   b48d6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b48da:	f7ff beeb 	b.w	b46b4 <set_system_mode>
   b48de:	bf00      	nop
   b48e0:	2003e6e8 	.word	0x2003e6e8
   b48e4:	2003e6dc 	.word	0x2003e6dc
   b48e8:	ffff0000 	.word	0xffff0000

000b48ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b48ec:	b510      	push	{r4, lr}
   b48ee:	4604      	mov	r4, r0
{
	free(buffer);
   b48f0:	6800      	ldr	r0, [r0, #0]
   b48f2:	f7ff ff7b 	bl	b47ec <free>
}
   b48f6:	4620      	mov	r0, r4
   b48f8:	bd10      	pop	{r4, pc}

000b48fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b48fa:	b510      	push	{r4, lr}
   b48fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b48fe:	6800      	ldr	r0, [r0, #0]
   b4900:	b108      	cbz	r0, b4906 <_ZN6String10invalidateEv+0xc>
   b4902:	f7ff ff73 	bl	b47ec <free>
	buffer = NULL;
   b4906:	2300      	movs	r3, #0
	capacity = len = 0;
   b4908:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b490c:	6023      	str	r3, [r4, #0]
}
   b490e:	bd10      	pop	{r4, pc}

000b4910 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4910:	b538      	push	{r3, r4, r5, lr}
   b4912:	4604      	mov	r4, r0
   b4914:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4916:	6800      	ldr	r0, [r0, #0]
   b4918:	3101      	adds	r1, #1
   b491a:	f7ff ff6f 	bl	b47fc <realloc>
	if (newbuffer) {
   b491e:	b110      	cbz	r0, b4926 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4920:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4924:	2001      	movs	r0, #1
	}
	return 0;
}
   b4926:	bd38      	pop	{r3, r4, r5, pc}

000b4928 <_ZN6String7reserveEj>:
{
   b4928:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b492a:	6803      	ldr	r3, [r0, #0]
{
   b492c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b492e:	b123      	cbz	r3, b493a <_ZN6String7reserveEj+0x12>
   b4930:	6843      	ldr	r3, [r0, #4]
   b4932:	428b      	cmp	r3, r1
   b4934:	d301      	bcc.n	b493a <_ZN6String7reserveEj+0x12>
   b4936:	2001      	movs	r0, #1
}
   b4938:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b493a:	4620      	mov	r0, r4
   b493c:	f7ff ffe8 	bl	b4910 <_ZN6String12changeBufferEj>
   b4940:	2800      	cmp	r0, #0
   b4942:	d0f9      	beq.n	b4938 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4944:	68a3      	ldr	r3, [r4, #8]
   b4946:	2b00      	cmp	r3, #0
   b4948:	d1f5      	bne.n	b4936 <_ZN6String7reserveEj+0xe>
   b494a:	6822      	ldr	r2, [r4, #0]
   b494c:	7013      	strb	r3, [r2, #0]
   b494e:	e7f2      	b.n	b4936 <_ZN6String7reserveEj+0xe>

000b4950 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4950:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4952:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4954:	4611      	mov	r1, r2
   b4956:	9201      	str	r2, [sp, #4]
{
   b4958:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b495a:	f7ff ffe5 	bl	b4928 <_ZN6String7reserveEj>
   b495e:	9a01      	ldr	r2, [sp, #4]
   b4960:	b928      	cbnz	r0, b496e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4962:	4620      	mov	r0, r4
   b4964:	f7ff ffc9 	bl	b48fa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4968:	4620      	mov	r0, r4
   b496a:	b003      	add	sp, #12
   b496c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b496e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4970:	4629      	mov	r1, r5
   b4972:	6820      	ldr	r0, [r4, #0]
   b4974:	f003 f902 	bl	b7b7c <memcpy>
	buffer[len] = 0;
   b4978:	6822      	ldr	r2, [r4, #0]
   b497a:	68a3      	ldr	r3, [r4, #8]
   b497c:	2100      	movs	r1, #0
   b497e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4980:	e7f2      	b.n	b4968 <_ZN6String4copyEPKcj+0x18>

000b4982 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4982:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4984:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4986:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b498a:	4604      	mov	r4, r0
	len = 0;
   b498c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b498e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4990:	b141      	cbz	r1, b49a4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4992:	4608      	mov	r0, r1
   b4994:	9101      	str	r1, [sp, #4]
   b4996:	f003 f961 	bl	b7c5c <strlen>
   b499a:	9901      	ldr	r1, [sp, #4]
   b499c:	4602      	mov	r2, r0
   b499e:	4620      	mov	r0, r4
   b49a0:	f7ff ffd6 	bl	b4950 <_ZN6String4copyEPKcj>
}
   b49a4:	4620      	mov	r0, r4
   b49a6:	b002      	add	sp, #8
   b49a8:	bd10      	pop	{r4, pc}

000b49aa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b49aa:	b538      	push	{r3, r4, r5, lr}
   b49ac:	4605      	mov	r5, r0
	if (buffer) {
   b49ae:	6800      	ldr	r0, [r0, #0]
{
   b49b0:	460c      	mov	r4, r1
	if (buffer) {
   b49b2:	b168      	cbz	r0, b49d0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b49b4:	686a      	ldr	r2, [r5, #4]
   b49b6:	688b      	ldr	r3, [r1, #8]
   b49b8:	429a      	cmp	r2, r3
   b49ba:	d307      	bcc.n	b49cc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b49bc:	6809      	ldr	r1, [r1, #0]
   b49be:	f003 f945 	bl	b7c4c <strcpy>
			len = rhs.len;
   b49c2:	68a3      	ldr	r3, [r4, #8]
   b49c4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b49c6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b49c8:	60a3      	str	r3, [r4, #8]
}
   b49ca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b49cc:	f7ff ff0e 	bl	b47ec <free>
	buffer = rhs.buffer;
   b49d0:	6823      	ldr	r3, [r4, #0]
   b49d2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b49d4:	6863      	ldr	r3, [r4, #4]
   b49d6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b49d8:	68a3      	ldr	r3, [r4, #8]
   b49da:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b49dc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b49de:	e9c4 3300 	strd	r3, r3, [r4]
   b49e2:	e7f1      	b.n	b49c8 <_ZN6String4moveERS_+0x1e>

000b49e4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b49e4:	b510      	push	{r4, lr}
	buffer = NULL;
   b49e6:	2300      	movs	r3, #0
	capacity = 0;
   b49e8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b49ec:	4604      	mov	r4, r0
	len = 0;
   b49ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   b49f0:	7303      	strb	r3, [r0, #12]
	move(rval);
   b49f2:	f7ff ffda 	bl	b49aa <_ZN6String4moveERS_>
}
   b49f6:	4620      	mov	r0, r4
   b49f8:	bd10      	pop	{r4, pc}

000b49fa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b49fa:	4288      	cmp	r0, r1
{
   b49fc:	b510      	push	{r4, lr}
   b49fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4a00:	d005      	beq.n	b4a0e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4a02:	680b      	ldr	r3, [r1, #0]
   b4a04:	b12b      	cbz	r3, b4a12 <_ZN6StringaSERKS_+0x18>
   b4a06:	688a      	ldr	r2, [r1, #8]
   b4a08:	4619      	mov	r1, r3
   b4a0a:	f7ff ffa1 	bl	b4950 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4a0e:	4620      	mov	r0, r4
   b4a10:	bd10      	pop	{r4, pc}
	else invalidate();
   b4a12:	f7ff ff72 	bl	b48fa <_ZN6String10invalidateEv>
   b4a16:	e7fa      	b.n	b4a0e <_ZN6StringaSERKS_+0x14>

000b4a18 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4a18:	b510      	push	{r4, lr}
	buffer = NULL;
   b4a1a:	2300      	movs	r3, #0
String::String(const String &value)
   b4a1c:	4604      	mov	r4, r0
	capacity = 0;
   b4a1e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b4a22:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4a24:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4a26:	f7ff ffe8 	bl	b49fa <_ZN6StringaSERKS_>
}
   b4a2a:	4620      	mov	r0, r4
   b4a2c:	bd10      	pop	{r4, pc}

000b4a2e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4a2e:	b513      	push	{r0, r1, r4, lr}
   b4a30:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4a32:	b159      	cbz	r1, b4a4c <_ZN6StringaSEPKc+0x1e>
   b4a34:	4608      	mov	r0, r1
   b4a36:	9101      	str	r1, [sp, #4]
   b4a38:	f003 f910 	bl	b7c5c <strlen>
   b4a3c:	9901      	ldr	r1, [sp, #4]
   b4a3e:	4602      	mov	r2, r0
   b4a40:	4620      	mov	r0, r4
   b4a42:	f7ff ff85 	bl	b4950 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4a46:	4620      	mov	r0, r4
   b4a48:	b002      	add	sp, #8
   b4a4a:	bd10      	pop	{r4, pc}
	else invalidate();
   b4a4c:	f7ff ff55 	bl	b48fa <_ZN6String10invalidateEv>
   b4a50:	e7f9      	b.n	b4a46 <_ZN6StringaSEPKc+0x18>

000b4a52 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4a52:	b570      	push	{r4, r5, r6, lr}
   b4a54:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4a56:	460e      	mov	r6, r1
   b4a58:	b909      	cbnz	r1, b4a5e <_ZN6String6concatEPKcj+0xc>
   b4a5a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4a5c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4a5e:	b16a      	cbz	r2, b4a7c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4a60:	6884      	ldr	r4, [r0, #8]
   b4a62:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4a64:	4621      	mov	r1, r4
   b4a66:	f7ff ff5f 	bl	b4928 <_ZN6String7reserveEj>
   b4a6a:	2800      	cmp	r0, #0
   b4a6c:	d0f5      	beq.n	b4a5a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4a6e:	6828      	ldr	r0, [r5, #0]
   b4a70:	68ab      	ldr	r3, [r5, #8]
   b4a72:	4631      	mov	r1, r6
   b4a74:	4418      	add	r0, r3
   b4a76:	f003 f8e9 	bl	b7c4c <strcpy>
	len = newlen;
   b4a7a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4a7c:	2001      	movs	r0, #1
   b4a7e:	e7ed      	b.n	b4a5c <_ZN6String6concatEPKcj+0xa>

000b4a80 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4a80:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4a82:	2300      	movs	r3, #0
	buf[0] = c;
   b4a84:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4a88:	2201      	movs	r2, #1
   b4a8a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4a8c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4a90:	f7ff ffdf 	bl	b4a52 <_ZN6String6concatEPKcj>
}
   b4a94:	b003      	add	sp, #12
   b4a96:	f85d fb04 	ldr.w	pc, [sp], #4

000b4a9a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b4a9a:	6802      	ldr	r2, [r0, #0]
{
   b4a9c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b4a9e:	6809      	ldr	r1, [r1, #0]
   b4aa0:	b162      	cbz	r2, b4abc <_ZNK6String9compareToERKS_+0x22>
   b4aa2:	b941      	cbnz	r1, b4ab6 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b4aa4:	6880      	ldr	r0, [r0, #8]
   b4aa6:	b160      	cbz	r0, b4ac2 <_ZNK6String9compareToERKS_+0x28>
   b4aa8:	7810      	ldrb	r0, [r2, #0]
   b4aaa:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4aac:	6898      	ldr	r0, [r3, #8]
   b4aae:	b140      	cbz	r0, b4ac2 <_ZNK6String9compareToERKS_+0x28>
   b4ab0:	7809      	ldrb	r1, [r1, #0]
   b4ab2:	4248      	negs	r0, r1
   b4ab4:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b4ab6:	4610      	mov	r0, r2
   b4ab8:	f003 b8be 	b.w	b7c38 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4abc:	2900      	cmp	r1, #0
   b4abe:	d1f5      	bne.n	b4aac <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b4ac0:	4608      	mov	r0, r1
}
   b4ac2:	4770      	bx	lr

000b4ac4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b4ac4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b4ac6:	6882      	ldr	r2, [r0, #8]
   b4ac8:	688b      	ldr	r3, [r1, #8]
   b4aca:	429a      	cmp	r2, r3
   b4acc:	d105      	bne.n	b4ada <_ZNK6String6equalsERKS_+0x16>
   b4ace:	f7ff ffe4 	bl	b4a9a <_ZNK6String9compareToERKS_>
   b4ad2:	fab0 f080 	clz	r0, r0
   b4ad6:	0940      	lsrs	r0, r0, #5
}
   b4ad8:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b4ada:	2000      	movs	r0, #0
   b4adc:	e7fc      	b.n	b4ad8 <_ZNK6String6equalsERKS_+0x14>

000b4ade <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4ade:	4770      	bx	lr

000b4ae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4ae0:	4770      	bx	lr

000b4ae2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4ae2:	4770      	bx	lr

000b4ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4ae4:	4770      	bx	lr
	...

000b4ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4ae8:	4b06      	ldr	r3, [pc, #24]	; (b4b04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4aea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4aec:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4aee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4af2:	d005      	beq.n	b4b00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4af4:	4608      	mov	r0, r1
   b4af6:	f002 ff19 	bl	b792c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4afa:	2800      	cmp	r0, #0
   b4afc:	bf08      	it	eq
   b4afe:	2400      	moveq	r4, #0
      }
   b4b00:	4620      	mov	r0, r4
   b4b02:	bd10      	pop	{r4, pc}
   b4b04:	000b80dc 	.word	0x000b80dc

000b4b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b08:	4b06      	ldr	r3, [pc, #24]	; (b4b24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b0a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b0c:	b510      	push	{r4, lr}
   b4b0e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b12:	d005      	beq.n	b4b20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b14:	4608      	mov	r0, r1
   b4b16:	f002 ff09 	bl	b792c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b1a:	2800      	cmp	r0, #0
   b4b1c:	bf08      	it	eq
   b4b1e:	2400      	moveq	r4, #0
      }
   b4b20:	4620      	mov	r0, r4
   b4b22:	bd10      	pop	{r4, pc}
   b4b24:	000b80dc 	.word	0x000b80dc

000b4b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b28:	4b06      	ldr	r3, [pc, #24]	; (b4b44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b2a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b32:	d005      	beq.n	b4b40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b34:	4608      	mov	r0, r1
   b4b36:	f002 fef9 	bl	b792c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b3a:	2800      	cmp	r0, #0
   b4b3c:	bf08      	it	eq
   b4b3e:	2400      	moveq	r4, #0
      }
   b4b40:	4620      	mov	r0, r4
   b4b42:	bd10      	pop	{r4, pc}
   b4b44:	000b80dc 	.word	0x000b80dc

000b4b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b48:	b510      	push	{r4, lr}
   b4b4a:	2168      	movs	r1, #104	; 0x68
   b4b4c:	4604      	mov	r4, r0
   b4b4e:	f7ff faa4 	bl	b409a <_ZdlPvj>
   b4b52:	4620      	mov	r0, r4
   b4b54:	bd10      	pop	{r4, pc}

000b4b56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b56:	b510      	push	{r4, lr}
   b4b58:	2128      	movs	r1, #40	; 0x28
   b4b5a:	4604      	mov	r4, r0
   b4b5c:	f7ff fa9d 	bl	b409a <_ZdlPvj>
   b4b60:	4620      	mov	r0, r4
   b4b62:	bd10      	pop	{r4, pc}

000b4b64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b64:	b510      	push	{r4, lr}
   b4b66:	2130      	movs	r1, #48	; 0x30
   b4b68:	4604      	mov	r4, r0
   b4b6a:	f7ff fa96 	bl	b409a <_ZdlPvj>
   b4b6e:	4620      	mov	r0, r4
   b4b70:	bd10      	pop	{r4, pc}

000b4b72 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4b72:	2168      	movs	r1, #104	; 0x68
   b4b74:	f7ff ba91 	b.w	b409a <_ZdlPvj>

000b4b78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4b78:	2128      	movs	r1, #40	; 0x28
   b4b7a:	f7ff ba8e 	b.w	b409a <_ZdlPvj>

000b4b7e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4b7e:	2130      	movs	r1, #48	; 0x30
   b4b80:	f7ff ba8b 	b.w	b409a <_ZdlPvj>

000b4b84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4b86:	2500      	movs	r5, #0
   b4b88:	1cec      	adds	r4, r5, #3
   b4b8a:	428c      	cmp	r4, r1
   b4b8c:	d80d      	bhi.n	b4baa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4b8e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4b90:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4b92:	5d87      	ldrb	r7, [r0, r6]
   b4b94:	4297      	cmp	r7, r2
   b4b96:	d105      	bne.n	b4ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4b98:	4426      	add	r6, r4
   b4b9a:	42b1      	cmp	r1, r6
   b4b9c:	d305      	bcc.n	b4baa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4b9e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4ba0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4ba4:	3401      	adds	r4, #1
   b4ba6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4ba8:	e7ee      	b.n	b4b88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4baa:	2000      	movs	r0, #0
   b4bac:	e7f9      	b.n	b4ba2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4bb0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4bb0:	4a02      	ldr	r2, [pc, #8]	; (b4bbc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4bb2:	4903      	ldr	r1, [pc, #12]	; (b4bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4bb4:	200a      	movs	r0, #10
   b4bb6:	f7ff bd6d 	b.w	b4694 <panic_>
   b4bba:	bf00      	nop
   b4bbc:	000b4475 	.word	0x000b4475
   b4bc0:	000b7e6c 	.word	0x000b7e6c

000b4bc4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4bc4:	b430      	push	{r4, r5}
   b4bc6:	460d      	mov	r5, r1
   b4bc8:	4611      	mov	r1, r2
   b4bca:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4bcc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bce:	6809      	ldr	r1, [r1, #0]
   b4bd0:	6828      	ldr	r0, [r5, #0]
   b4bd2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4bd6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4bd8:	bc30      	pop	{r4, r5}
   b4bda:	4760      	bx	ip

000b4bdc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4bdc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4bde:	b538      	push	{r3, r4, r5, lr}
   b4be0:	4604      	mov	r4, r0
	switch (__op)
   b4be2:	d102      	bne.n	b4bea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4be4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4be6:	6023      	str	r3, [r4, #0]
	}
   b4be8:	e003      	b.n	b4bf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4bea:	2a02      	cmp	r2, #2
   b4bec:	d003      	beq.n	b4bf6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4bee:	2a03      	cmp	r2, #3
   b4bf0:	d00d      	beq.n	b4c0e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4bf2:	2000      	movs	r0, #0
   b4bf4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4bf6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4bf8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4bfa:	f7ff fa4a 	bl	b4092 <_Znwj>
   b4bfe:	4603      	mov	r3, r0
   b4c00:	2800      	cmp	r0, #0
   b4c02:	d0f0      	beq.n	b4be6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4c04:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4c08:	e883 0003 	stmia.w	r3, {r0, r1}
   b4c0c:	e7eb      	b.n	b4be6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4c0e:	6800      	ldr	r0, [r0, #0]
   b4c10:	2800      	cmp	r0, #0
   b4c12:	d0ee      	beq.n	b4bf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4c14:	2108      	movs	r1, #8
   b4c16:	f7ff fa40 	bl	b409a <_ZdlPvj>
   b4c1a:	e7ea      	b.n	b4bf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4c1c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b4c1c:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b4c1e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4c20:	4604      	mov	r4, r0
	if (_M_manager)
   b4c22:	b12b      	cbz	r3, b4c30 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c24:	2203      	movs	r2, #3
   b4c26:	4601      	mov	r1, r0
   b4c28:	4798      	blx	r3
	    _M_manager = nullptr;
   b4c2a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4c2c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b4c30:	bd10      	pop	{r4, pc}

000b4c32 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b4c32:	b510      	push	{r4, lr}
	if (_M_manager)
   b4c34:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4c36:	4604      	mov	r4, r0
	if (_M_manager)
   b4c38:	b12b      	cbz	r3, b4c46 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c3a:	2203      	movs	r2, #3
   b4c3c:	4601      	mov	r1, r0
   b4c3e:	4798      	blx	r3
	    _M_manager = nullptr;
   b4c40:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4c42:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b4c46:	bd10      	pop	{r4, pc}

000b4c48 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b4c48:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b4c4a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b4c4c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b4c4e:	2220      	movs	r2, #32
   b4c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b4c54:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b4c56:	4a08      	ldr	r2, [pc, #32]	; (b4c78 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b4c58:	9200      	str	r2, [sp, #0]
   b4c5a:	4908      	ldr	r1, [pc, #32]	; (b4c7c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b4c5c:	aa02      	add	r2, sp, #8
   b4c5e:	2001      	movs	r0, #1
   b4c60:	f7ff fd20 	bl	b46a4 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4c64:	6820      	ldr	r0, [r4, #0]
   b4c66:	4906      	ldr	r1, [pc, #24]	; (b4c80 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b4c68:	8800      	ldrh	r0, [r0, #0]
   b4c6a:	2300      	movs	r3, #0
   b4c6c:	4622      	mov	r2, r4
    }
   b4c6e:	b00a      	add	sp, #40	; 0x28
   b4c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4c74:	f7ff bc4a 	b.w	b450c <hal_ble_gatt_client_discover_all_services>
   b4c78:	000b7e8e 	.word	0x000b7e8e
   b4c7c:	000b7e83 	.word	0x000b7e83
   b4c80:	000b6855 	.word	0x000b6855

000b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b4c84:	b510      	push	{r4, lr}
   b4c86:	3801      	subs	r0, #1
   b4c88:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b4c8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b4c90:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b4c92:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b4c96:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b4c98:	bf88      	it	hi
   b4c9a:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b4c9e:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b4ca2:	7803      	ldrb	r3, [r0, #0]
   b4ca4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b4ca8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b4cac:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b4cae:	bf88      	it	hi
   b4cb0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b4cb4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b4cb6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b4cba:	d1e7      	bne.n	b4c8c <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b4cbc:	bd10      	pop	{r4, pc}

000b4cbe <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4cbe:	b510      	push	{r4, lr}
      if (_M_manager)
   b4cc0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4cc2:	4604      	mov	r4, r0
      if (_M_manager)
   b4cc4:	b113      	cbz	r3, b4ccc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cc6:	2203      	movs	r2, #3
   b4cc8:	4601      	mov	r1, r0
   b4cca:	4798      	blx	r3
    }
   b4ccc:	4620      	mov	r0, r4
   b4cce:	bd10      	pop	{r4, pc}

000b4cd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4cd0:	b510      	push	{r4, lr}
   b4cd2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b4cd4:	3058      	adds	r0, #88	; 0x58
   b4cd6:	f7ff fff2 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4cda:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4ce2:	f7ff be03 	b.w	b48ec <_ZN6StringD1Ev>

000b4ce6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ce6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ce8:	6843      	ldr	r3, [r0, #4]
   b4cea:	3b01      	subs	r3, #1
    {
   b4cec:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4cee:	6043      	str	r3, [r0, #4]
   b4cf0:	b963      	cbnz	r3, b4d0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4cf2:	6803      	ldr	r3, [r0, #0]
   b4cf4:	689b      	ldr	r3, [r3, #8]
   b4cf6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4cf8:	68a3      	ldr	r3, [r4, #8]
   b4cfa:	3b01      	subs	r3, #1
   b4cfc:	60a3      	str	r3, [r4, #8]
   b4cfe:	b92b      	cbnz	r3, b4d0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d00:	6823      	ldr	r3, [r4, #0]
   b4d02:	4620      	mov	r0, r4
   b4d04:	68db      	ldr	r3, [r3, #12]
    }
   b4d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d0a:	4718      	bx	r3
    }
   b4d0c:	bd10      	pop	{r4, pc}

000b4d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b4d0e:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b4d10:	6803      	ldr	r3, [r0, #0]
   b4d12:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b4d14:	4605      	mov	r5, r0
   b4d16:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b4d18:	d008      	beq.n	b4d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b4d1a:	b111      	cbz	r1, b4d22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b4d1c:	684b      	ldr	r3, [r1, #4]
   b4d1e:	3301      	adds	r3, #1
   b4d20:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b4d22:	6828      	ldr	r0, [r5, #0]
   b4d24:	b108      	cbz	r0, b4d2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b4d26:	f7ff ffde 	bl	b4ce6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4d2a:	602c      	str	r4, [r5, #0]
      }
   b4d2c:	bd38      	pop	{r3, r4, r5, pc}

000b4d2e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4d2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d32:	b2da      	uxtb	r2, r3
   b4d34:	2a09      	cmp	r2, #9
   b4d36:	d801      	bhi.n	b4d3c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4d38:	4618      	mov	r0, r3
   b4d3a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4d3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4d40:	2b05      	cmp	r3, #5
   b4d42:	d801      	bhi.n	b4d48 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4d44:	3857      	subs	r0, #87	; 0x57
   b4d46:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4d48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4d4c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4d4e:	bf94      	ite	ls
   b4d50:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4d52:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b4d56:	4770      	bx	lr

000b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4d58:	b510      	push	{r4, lr}
            locked_(false) {
   b4d5a:	2300      	movs	r3, #0
   b4d5c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4d5e:	4b04      	ldr	r3, [pc, #16]	; (b4d70 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4d60:	4604      	mov	r4, r0
   b4d62:	6818      	ldr	r0, [r3, #0]
   b4d64:	f7ff fc16 	bl	b4594 <os_mutex_recursive_lock>
        locked_ = true;
   b4d68:	2301      	movs	r3, #1
   b4d6a:	7023      	strb	r3, [r4, #0]
    }
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	bd10      	pop	{r4, pc}
   b4d70:	2003e6f0 	.word	0x2003e6f0

000b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4d74:	b510      	push	{r4, lr}
        if (locked_) {
   b4d76:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4d78:	4604      	mov	r4, r0
        if (locked_) {
   b4d7a:	b11b      	cbz	r3, b4d84 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4d7c:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4d7e:	6818      	ldr	r0, [r3, #0]
   b4d80:	f7ff fc10 	bl	b45a4 <os_mutex_recursive_unlock>
    }
   b4d84:	4620      	mov	r0, r4
   b4d86:	bd10      	pop	{r4, pc}
   b4d88:	2003e6f0 	.word	0x2003e6f0

000b4d8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4d8c:	b082      	sub	sp, #8
   b4d8e:	4603      	mov	r3, r0
    address_ = addr;
   b4d90:	6808      	ldr	r0, [r1, #0]
   b4d92:	6849      	ldr	r1, [r1, #4]
   b4d94:	466a      	mov	r2, sp
   b4d96:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4d98:	466a      	mov	r2, sp
   b4d9a:	ca03      	ldmia	r2!, {r0, r1}
   b4d9c:	6018      	str	r0, [r3, #0]
}
   b4d9e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4da0:	6059      	str	r1, [r3, #4]
}
   b4da2:	b002      	add	sp, #8
   b4da4:	4770      	bx	lr

000b4da6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4da6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4da8:	7982      	ldrb	r2, [r0, #6]
   b4daa:	798b      	ldrb	r3, [r1, #6]
   b4dac:	429a      	cmp	r2, r3
   b4dae:	d106      	bne.n	b4dbe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4db0:	2206      	movs	r2, #6
   b4db2:	f002 fed3 	bl	b7b5c <memcmp>
   b4db6:	fab0 f080 	clz	r0, r0
   b4dba:	0940      	lsrs	r0, r0, #5
}
   b4dbc:	bd08      	pop	{r3, pc}
    return false;
   b4dbe:	2000      	movs	r0, #0
   b4dc0:	e7fc      	b.n	b4dbc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4dc2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4dc2:	f04f 33ff 	mov.w	r3, #4294967295
   b4dc6:	6003      	str	r3, [r0, #0]
   b4dc8:	8083      	strh	r3, [r0, #4]
}
   b4dca:	2000      	movs	r0, #0
   b4dcc:	4770      	bx	lr

000b4dce <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4dce:	b508      	push	{r3, lr}
   b4dd0:	4602      	mov	r2, r0
        : address_{} {
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	6001      	str	r1, [r0, #0]
   b4dd6:	6041      	str	r1, [r0, #4]
    clear();
   b4dd8:	f7ff fff3 	bl	b4dc2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4ddc:	7191      	strb	r1, [r2, #6]
}
   b4dde:	4610      	mov	r0, r2
   b4de0:	bd08      	pop	{r3, pc}

000b4de2 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b4de2:	b510      	push	{r4, lr}
   b4de4:	1d43      	adds	r3, r0, #5
   b4de6:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b4de8:	781c      	ldrb	r4, [r3, #0]
   b4dea:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b4dee:	4283      	cmp	r3, r0
   b4df0:	f103 33ff 	add.w	r3, r3, #4294967295
   b4df4:	d1f8      	bne.n	b4de8 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b4df6:	bd10      	pop	{r4, pc}

000b4df8 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b4df8:	b570      	push	{r4, r5, r6, lr}
   b4dfa:	4614      	mov	r4, r2
   b4dfc:	b088      	sub	sp, #32
   b4dfe:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b4e00:	460d      	mov	r5, r1
   b4e02:	2900      	cmp	r1, #0
   b4e04:	d048      	beq.n	b4e98 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b4e06:	b1a4      	cbz	r4, b4e32 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b4e08:	a901      	add	r1, sp, #4
   b4e0a:	f7ff ffea 	bl	b4de2 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b4e0e:	b19a      	cbz	r2, b4e38 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b4e10:	aa03      	add	r2, sp, #12
   b4e12:	2106      	movs	r1, #6
   b4e14:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b4e16:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b4e18:	f7ff ff34 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b4e1c:	2e11      	cmp	r6, #17
   b4e1e:	bf28      	it	cs
   b4e20:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b4e22:	4632      	mov	r2, r6
   b4e24:	a903      	add	r1, sp, #12
   b4e26:	4628      	mov	r0, r5
   b4e28:	f002 fea8 	bl	b7b7c <memcpy>
    buf[len++] = '\0';
   b4e2c:	2300      	movs	r3, #0
   b4e2e:	55ab      	strb	r3, [r5, r6]
   b4e30:	1c74      	adds	r4, r6, #1
}
   b4e32:	4620      	mov	r0, r4
   b4e34:	b008      	add	sp, #32
   b4e36:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b4e38:	aa03      	add	r2, sp, #12
   b4e3a:	2101      	movs	r1, #1
   b4e3c:	a801      	add	r0, sp, #4
   b4e3e:	f7ff ff21 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b4e42:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b4e44:	f10d 020f 	add.w	r2, sp, #15
   b4e48:	2101      	movs	r1, #1
   b4e4a:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b4e4e:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b4e52:	f7ff ff17 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b4e56:	f10d 0212 	add.w	r2, sp, #18
   b4e5a:	2101      	movs	r1, #1
   b4e5c:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b4e60:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b4e64:	f7ff ff0e 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b4e68:	f10d 0215 	add.w	r2, sp, #21
   b4e6c:	2101      	movs	r1, #1
   b4e6e:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b4e72:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b4e76:	f7ff ff05 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b4e7a:	aa06      	add	r2, sp, #24
   b4e7c:	2101      	movs	r1, #1
   b4e7e:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b4e80:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b4e84:	f7ff fefe 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b4e88:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b4e8c:	f10d 021b 	add.w	r2, sp, #27
   b4e90:	2101      	movs	r1, #1
   b4e92:	f10d 0009 	add.w	r0, sp, #9
   b4e96:	e7be      	b.n	b4e16 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b4e98:	460c      	mov	r4, r1
   b4e9a:	e7ca      	b.n	b4e32 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b4e9c <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b4e9c:	b510      	push	{r4, lr}
   b4e9e:	b086      	sub	sp, #24
   b4ea0:	4604      	mov	r4, r0
   b4ea2:	4613      	mov	r3, r2
   b4ea4:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b4ea6:	2212      	movs	r2, #18
   b4ea8:	a901      	add	r1, sp, #4
   b4eaa:	f7ff ffa5 	bl	b4df8 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b4eae:	a901      	add	r1, sp, #4
   b4eb0:	4620      	mov	r0, r4
   b4eb2:	f7ff fd66 	bl	b4982 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b4eb6:	4620      	mov	r0, r4
   b4eb8:	b006      	add	sp, #24
   b4eba:	bd10      	pop	{r4, pc}

000b4ebc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4ebc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4ebe:	2301      	movs	r3, #1
   b4ec0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4ec2:	4b05      	ldr	r3, [pc, #20]	; (b4ed8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4ec4:	4602      	mov	r2, r0
   b4ec6:	f103 0110 	add.w	r1, r3, #16
   b4eca:	f853 4b04 	ldr.w	r4, [r3], #4
   b4ece:	f842 4b04 	str.w	r4, [r2], #4
   b4ed2:	428b      	cmp	r3, r1
   b4ed4:	d1f9      	bne.n	b4eca <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4ed6:	bd10      	pop	{r4, pc}
   b4ed8:	000b80ea 	.word	0x000b80ea

000b4edc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b4edc:	7c0b      	ldrb	r3, [r1, #16]
   b4ede:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b4ee2:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b4ee4:	d10d      	bne.n	b4f02 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b4ee6:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4ee8:	4b0c      	ldr	r3, [pc, #48]	; (b4f1c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b4eea:	4602      	mov	r2, r0
   b4eec:	f103 0410 	add.w	r4, r3, #16
   b4ef0:	f853 5b04 	ldr.w	r5, [r3], #4
   b4ef4:	f842 5b04 	str.w	r5, [r2], #4
   b4ef8:	42a3      	cmp	r3, r4
   b4efa:	d1f9      	bne.n	b4ef0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b4efc:	880b      	ldrh	r3, [r1, #0]
   b4efe:	8183      	strh	r3, [r0, #12]
}
   b4f00:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b4f02:	2301      	movs	r3, #1
   b4f04:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4f06:	f101 0210 	add.w	r2, r1, #16
   b4f0a:	4603      	mov	r3, r0
   b4f0c:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f10:	f843 4b04 	str.w	r4, [r3], #4
   b4f14:	4291      	cmp	r1, r2
   b4f16:	d1f9      	bne.n	b4f0c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b4f18:	e7f2      	b.n	b4f00 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b4f1a:	bf00      	nop
   b4f1c:	000b80ea 	.word	0x000b80ea

000b4f20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4f20:	b510      	push	{r4, lr}
    if (uuid128) {
   b4f22:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4f24:	4604      	mov	r4, r0
    if (uuid128) {
   b4f26:	b1b1      	cbz	r1, b4f56 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4f28:	2a01      	cmp	r2, #1
   b4f2a:	f101 0210 	add.w	r2, r1, #16
   b4f2e:	d10a      	bne.n	b4f46 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4f30:	4601      	mov	r1, r0
   b4f32:	f853 0b04 	ldr.w	r0, [r3], #4
   b4f36:	f841 0b04 	str.w	r0, [r1], #4
   b4f3a:	4293      	cmp	r3, r2
   b4f3c:	d1f9      	bne.n	b4f32 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4f3e:	2301      	movs	r3, #1
   b4f40:	6123      	str	r3, [r4, #16]
}
   b4f42:	4620      	mov	r0, r4
   b4f44:	bd10      	pop	{r4, pc}
   b4f46:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4f48:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4f4c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4f50:	429a      	cmp	r2, r3
   b4f52:	d1f9      	bne.n	b4f48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4f54:	e7f3      	b.n	b4f3e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4f56:	2210      	movs	r2, #16
   b4f58:	f002 fe38 	bl	b7bcc <memset>
   b4f5c:	e7f1      	b.n	b4f42 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4f5e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b4f5e:	b538      	push	{r3, r4, r5, lr}
   b4f60:	4604      	mov	r4, r0
   b4f62:	460d      	mov	r5, r1
        : BleUuid() {
   b4f64:	f7ff ffaa 	bl	b4ebc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b4f68:	2300      	movs	r3, #0
   b4f6a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4f6c:	81a5      	strh	r5, [r4, #12]
}
   b4f6e:	4620      	mov	r0, r4
   b4f70:	bd38      	pop	{r3, r4, r5, pc}

000b4f72 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4f72:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4f74:	6902      	ldr	r2, [r0, #16]
   b4f76:	690b      	ldr	r3, [r1, #16]
   b4f78:	429a      	cmp	r2, r3
   b4f7a:	d106      	bne.n	b4f8a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4f7c:	2210      	movs	r2, #16
   b4f7e:	f002 fded 	bl	b7b5c <memcmp>
   b4f82:	fab0 f080 	clz	r0, r0
   b4f86:	0940      	lsrs	r0, r0, #5
}
   b4f88:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4f8a:	2000      	movs	r0, #0
   b4f8c:	e7fc      	b.n	b4f88 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4f90 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4f90:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4f92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4f96:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4f98:	4b34      	ldr	r3, [pc, #208]	; (b506c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4f9a:	460c      	mov	r4, r1
   b4f9c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4f9e:	4602      	mov	r2, r0
   b4fa0:	f103 0110 	add.w	r1, r3, #16
   b4fa4:	f853 0b04 	ldr.w	r0, [r3], #4
   b4fa8:	f842 0b04 	str.w	r0, [r2], #4
   b4fac:	428b      	cmp	r3, r1
   b4fae:	d1f9      	bne.n	b4fa4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4fb0:	b344      	cbz	r4, b5004 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4fb2:	2124      	movs	r1, #36	; 0x24
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	f002 fe59 	bl	b7c6c <strnlen>
   b4fba:	2804      	cmp	r0, #4
   b4fbc:	f04f 0500 	mov.w	r5, #0
   b4fc0:	d123      	bne.n	b500a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4fc2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4fc6:	af01      	add	r7, sp, #4
   b4fc8:	1ca5      	adds	r5, r4, #2
   b4fca:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4fcc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4fd0:	f7ff fead 	bl	b4d2e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4fd4:	f1b0 0800 	subs.w	r8, r0, #0
   b4fd8:	db12      	blt.n	b5000 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4fda:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4fde:	f7ff fea6 	bl	b4d2e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4fe2:	2800      	cmp	r0, #0
   b4fe4:	db0c      	blt.n	b5000 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4fe6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4fe8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4fec:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4fee:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4ff2:	d1eb      	bne.n	b4fcc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4ff4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4ff8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4ffa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4ffe:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5000:	2300      	movs	r3, #0
   b5002:	6133      	str	r3, [r6, #16]
}
   b5004:	b002      	add	sp, #8
   b5006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b500a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b500e:	2124      	movs	r1, #36	; 0x24
   b5010:	4620      	mov	r0, r4
   b5012:	f002 fe2b 	bl	b7c6c <strnlen>
   b5016:	42a8      	cmp	r0, r5
   b5018:	d807      	bhi.n	b502a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b501a:	4642      	mov	r2, r8
   b501c:	2100      	movs	r1, #0
   b501e:	4630      	mov	r0, r6
}
   b5020:	b002      	add	sp, #8
   b5022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5026:	f002 bdd1 	b.w	b7bcc <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b502a:	f1b8 0f00 	cmp.w	r8, #0
   b502e:	d0e9      	beq.n	b5004 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5030:	5d60      	ldrb	r0, [r4, r5]
   b5032:	f7ff fe7c 	bl	b4d2e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5036:	0603      	lsls	r3, r0, #24
   b5038:	d415      	bmi.n	b5066 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b503a:	0100      	lsls	r0, r0, #4
   b503c:	f108 38ff 	add.w	r8, r8, #4294967295
   b5040:	b2c7      	uxtb	r7, r0
   b5042:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5046:	2124      	movs	r1, #36	; 0x24
   b5048:	4620      	mov	r0, r4
   b504a:	f002 fe0f 	bl	b7c6c <strnlen>
   b504e:	3501      	adds	r5, #1
   b5050:	42a8      	cmp	r0, r5
   b5052:	d908      	bls.n	b5066 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5054:	5d60      	ldrb	r0, [r4, r5]
   b5056:	f7ff fe6a 	bl	b4d2e <_ZN8particle11hexToNibbleEc>
   b505a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b505c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b505e:	bfa4      	itt	ge
   b5060:	4338      	orrge	r0, r7
   b5062:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5066:	3501      	adds	r5, #1
   b5068:	e7d1      	b.n	b500e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b506a:	bf00      	nop
   b506c:	000b80ea 	.word	0x000b80ea

000b5070 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5070:	b513      	push	{r0, r1, r4, lr}
   b5072:	4604      	mov	r4, r0
   b5074:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5076:	f7ff ff21 	bl	b4ebc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b507a:	4620      	mov	r0, r4
   b507c:	9901      	ldr	r1, [sp, #4]
   b507e:	f7ff ff87 	bl	b4f90 <_ZN8particle7BleUuid9constructEPKc>
}
   b5082:	4620      	mov	r0, r4
   b5084:	b002      	add	sp, #8
   b5086:	bd10      	pop	{r4, pc}

000b5088 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b5088:	b510      	push	{r4, lr}
   b508a:	f100 030f 	add.w	r3, r0, #15
   b508e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b5090:	781c      	ldrb	r4, [r3, #0]
   b5092:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5096:	4283      	cmp	r3, r0
   b5098:	f103 33ff 	add.w	r3, r3, #4294967295
   b509c:	d1f8      	bne.n	b5090 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b509e:	bd10      	pop	{r4, pc}

000b50a0 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b50a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b50a4:	461f      	mov	r7, r3
   b50a6:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b50a8:	460d      	mov	r5, r1
   b50aa:	2900      	cmp	r1, #0
   b50ac:	d05b      	beq.n	b5166 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b50ae:	b1da      	cbz	r2, b50e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b50b0:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b50b4:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b50b6:	f1b8 0f00 	cmp.w	r8, #0
   b50ba:	d119      	bne.n	b50f0 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b50bc:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b50be:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b50c2:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b50c4:	aa05      	add	r2, sp, #20
   b50c6:	2102      	movs	r1, #2
   b50c8:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b50ca:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b50ce:	f7ff fdd9 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b50d2:	2c04      	cmp	r4, #4
   b50d4:	bf28      	it	cs
   b50d6:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b50d8:	4622      	mov	r2, r4
   b50da:	a905      	add	r1, sp, #20
   b50dc:	4628      	mov	r0, r5
   b50de:	f002 fd4d 	bl	b7b7c <memcpy>
        buf[len++] = '\0';
   b50e2:	f805 8004 	strb.w	r8, [r5, r4]
   b50e6:	1c62      	adds	r2, r4, #1
}
   b50e8:	4610      	mov	r0, r2
   b50ea:	b00e      	add	sp, #56	; 0x38
   b50ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b50f0:	a901      	add	r1, sp, #4
   b50f2:	f7ff ffc9 	bl	b5088 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b50f6:	aa05      	add	r2, sp, #20
    if (stripped) {
   b50f8:	b17f      	cbz	r7, b511a <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b50fa:	2110      	movs	r1, #16
   b50fc:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b50fe:	f7ff fdc1 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b5102:	2c24      	cmp	r4, #36	; 0x24
   b5104:	bf28      	it	cs
   b5106:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b5108:	4622      	mov	r2, r4
   b510a:	a905      	add	r1, sp, #20
   b510c:	4628      	mov	r0, r5
   b510e:	f002 fd35 	bl	b7b7c <memcpy>
    buf[len++] = '\0';
   b5112:	2300      	movs	r3, #0
   b5114:	552b      	strb	r3, [r5, r4]
   b5116:	1c62      	adds	r2, r4, #1
    return len;
   b5118:	e7e6      	b.n	b50e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b511a:	2104      	movs	r1, #4
   b511c:	eb0d 0001 	add.w	r0, sp, r1
   b5120:	f7ff fdb0 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b5124:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b5126:	f10d 021d 	add.w	r2, sp, #29
   b512a:	2102      	movs	r1, #2
   b512c:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b512e:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b5132:	f7ff fda7 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b5136:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b513a:	2102      	movs	r1, #2
   b513c:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b5140:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b5144:	f7ff fd9e 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5148:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b514c:	2102      	movs	r1, #2
   b514e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b5150:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5154:	f7ff fd96 	bl	b4c84 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b5158:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b515c:	aa0b      	add	r2, sp, #44	; 0x2c
   b515e:	2106      	movs	r1, #6
   b5160:	f10d 000e 	add.w	r0, sp, #14
   b5164:	e7cb      	b.n	b50fe <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b5166:	460a      	mov	r2, r1
   b5168:	e7be      	b.n	b50e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b516a <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b516a:	b510      	push	{r4, lr}
   b516c:	b08a      	sub	sp, #40	; 0x28
   b516e:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b5170:	2300      	movs	r3, #0
   b5172:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b5174:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b5176:	4669      	mov	r1, sp
   b5178:	f7ff ff92 	bl	b50a0 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b517c:	4669      	mov	r1, sp
   b517e:	4620      	mov	r0, r4
   b5180:	f7ff fbff 	bl	b4982 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5184:	4620      	mov	r0, r4
   b5186:	b00a      	add	sp, #40	; 0x28
   b5188:	bd10      	pop	{r4, pc}

000b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b518a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b518c:	4605      	mov	r5, r0
   b518e:	4616      	mov	r6, r2
   b5190:	461f      	mov	r7, r3
   b5192:	460a      	mov	r2, r1
   b5194:	ab01      	add	r3, sp, #4
   b5196:	e9d0 0100 	ldrd	r0, r1, [r0]
   b519a:	f7ff fcf3 	bl	b4b84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b519e:	f030 0402 	bics.w	r4, r0, #2
   b51a2:	d00c      	beq.n	b51be <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b51a4:	1e84      	subs	r4, r0, #2
   b51a6:	42bc      	cmp	r4, r7
   b51a8:	bf28      	it	cs
   b51aa:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b51ac:	b13e      	cbz	r6, b51be <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b51ae:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b51b0:	682b      	ldr	r3, [r5, #0]
   b51b2:	3102      	adds	r1, #2
   b51b4:	4622      	mov	r2, r4
   b51b6:	4419      	add	r1, r3
   b51b8:	4630      	mov	r0, r6
   b51ba:	f002 fcdf 	bl	b7b7c <memcpy>
}
   b51be:	4620      	mov	r0, r4
   b51c0:	b003      	add	sp, #12
   b51c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b51c4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b51c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51c6:	4613      	mov	r3, r2
   b51c8:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b51ca:	9201      	str	r2, [sp, #4]
   b51cc:	460a      	mov	r2, r1
   b51ce:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b51d0:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b51d2:	f7ff ffda 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b51d6:	b940      	cbnz	r0, b51ea <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b51d8:	9b01      	ldr	r3, [sp, #4]
   b51da:	4622      	mov	r2, r4
   b51dc:	2109      	movs	r1, #9
   b51de:	4628      	mov	r0, r5
}
   b51e0:	b003      	add	sp, #12
   b51e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b51e6:	f7ff bfd0 	b.w	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b51ea:	b003      	add	sp, #12
   b51ec:	bd30      	pop	{r4, r5, pc}
	...

000b51f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b51f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51f2:	460c      	mov	r4, r1
   b51f4:	b089      	sub	sp, #36	; 0x24
    String name;
   b51f6:	490c      	ldr	r1, [pc, #48]	; (b5228 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b51f8:	4605      	mov	r5, r0
    String name;
   b51fa:	f7ff fbc2 	bl	b4982 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b51fe:	221f      	movs	r2, #31
   b5200:	4669      	mov	r1, sp
   b5202:	4620      	mov	r0, r4
   b5204:	f7ff ffde 	bl	b51c4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b5208:	4606      	mov	r6, r0
   b520a:	b150      	cbz	r0, b5222 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b520c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b520e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b5210:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5214:	4628      	mov	r0, r5
   b5216:	f7ff fc33 	bl	b4a80 <_ZN6String6concatEc>
   b521a:	b110      	cbz	r0, b5222 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b521c:	3701      	adds	r7, #1
   b521e:	42be      	cmp	r6, r7
   b5220:	d1f6      	bne.n	b5210 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b5222:	4628      	mov	r0, r5
   b5224:	b009      	add	sp, #36	; 0x24
   b5226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5228:	000b7d7a 	.word	0x000b7d7a

000b522c <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b522c:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b522e:	2302      	movs	r3, #2
   b5230:	aa01      	add	r2, sp, #4
   b5232:	2119      	movs	r1, #25
   b5234:	f7ff ffa9 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b5238:	b108      	cbz	r0, b523e <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b523a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b523e:	b003      	add	sp, #12
   b5240:	f85d fb04 	ldr.w	pc, [sp], #4

000b5244 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5244:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5246:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b524a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b524c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b524e:	8043      	strh	r3, [r0, #2]
   b5250:	220e      	movs	r2, #14
   b5252:	4629      	mov	r1, r5
   b5254:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5256:	7105      	strb	r5, [r0, #4]
   b5258:	3006      	adds	r0, #6
   b525a:	f002 fcb7 	bl	b7bcc <memset>
   b525e:	f104 0014 	add.w	r0, r4, #20
   b5262:	f7ff fe2b 	bl	b4ebc <_ZN8particle7BleUuidC1Ev>
   b5266:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b526a:	f7ff fe27 	bl	b4ebc <_ZN8particle7BleUuidC1Ev>
   b526e:	4904      	ldr	r1, [pc, #16]	; (b5280 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5270:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5274:	f7ff fb85 	bl	b4982 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5278:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b527a:	4620      	mov	r0, r4
   b527c:	bd38      	pop	{r3, r4, r5, pc}
   b527e:	bf00      	nop
   b5280:	000b7d7a 	.word	0x000b7d7a

000b5284 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b5284:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5286:	680d      	ldr	r5, [r1, #0]
   b5288:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b528a:	4601      	mov	r1, r0
   b528c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b5290:	f7ff fe6f 	bl	b4f72 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b5294:	b140      	cbz	r0, b52a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b5296:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b5298:	8aa2      	ldrh	r2, [r4, #20]
   b529a:	429a      	cmp	r2, r3
   b529c:	d805      	bhi.n	b52aa <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b529e:	8ae0      	ldrh	r0, [r4, #22]
   b52a0:	4298      	cmp	r0, r3
   b52a2:	bf34      	ite	cc
   b52a4:	2000      	movcc	r0, #0
   b52a6:	2001      	movcs	r0, #1
    }
   b52a8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b52aa:	2000      	movs	r0, #0
   b52ac:	e7fc      	b.n	b52a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b52ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b52ae:	b510      	push	{r4, lr}
    return data_ + size_;
   b52b0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b52b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b52b8:	4293      	cmp	r3, r2
   b52ba:	4618      	mov	r0, r3
   b52bc:	d006      	beq.n	b52cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b52be:	6804      	ldr	r4, [r0, #0]
   b52c0:	8824      	ldrh	r4, [r4, #0]
   b52c2:	428c      	cmp	r4, r1
   b52c4:	f103 0308 	add.w	r3, r3, #8
   b52c8:	d1f6      	bne.n	b52b8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b52ca:	bd10      	pop	{r4, pc}
        return nullptr;
   b52cc:	2000      	movs	r0, #0
   b52ce:	e7fc      	b.n	b52ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b52d0 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b52d0:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b52d2:	b570      	push	{r4, r5, r6, lr}
   b52d4:	6003      	str	r3, [r0, #0]
   b52d6:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b52d8:	2068      	movs	r0, #104	; 0x68
   b52da:	f7fe feda 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b52de:	1e04      	subs	r4, r0, #0
   b52e0:	f104 060c 	add.w	r6, r4, #12
   b52e4:	d007      	beq.n	b52f6 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b52e6:	2301      	movs	r3, #1
   b52e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b52ec:	4b04      	ldr	r3, [pc, #16]	; (b5300 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b52ee:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b52f0:	4630      	mov	r0, r6
   b52f2:	f7ff ffa7 	bl	b5244 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b52f6:	e9c5 6400 	strd	r6, r4, [r5]
}
   b52fa:	4628      	mov	r0, r5
   b52fc:	bd70      	pop	{r4, r5, r6, pc}
   b52fe:	bf00      	nop
   b5300:	000b8090 	.word	0x000b8090

000b5304 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b5304:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b5306:	680c      	ldr	r4, [r1, #0]
   b5308:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b530a:	4606      	mov	r6, r0
    return impl()->charUUID();
   b530c:	4605      	mov	r5, r0
   b530e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5312:	6823      	ldr	r3, [r4, #0]
   b5314:	602b      	str	r3, [r5, #0]
}
   b5316:	4630      	mov	r0, r6
   b5318:	bd70      	pop	{r4, r5, r6, pc}
	...

000b531c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b531c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b531e:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5320:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b5322:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5324:	bb52      	cbnz	r2, b537c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b5326:	885c      	ldrh	r4, [r3, #2]
   b5328:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b532c:	4284      	cmp	r4, r0
   b532e:	d025      	beq.n	b537c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5330:	8a18      	ldrh	r0, [r3, #16]
   b5332:	b330      	cbz	r0, b5382 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b5334:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b5338:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b533a:	4a13      	ldr	r2, [pc, #76]	; (b5388 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b533c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b533e:	4a13      	ldr	r2, [pc, #76]	; (b538c <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b5340:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b5344:	885a      	ldrh	r2, [r3, #2]
   b5346:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b534a:	8a1a      	ldrh	r2, [r3, #16]
   b534c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b5350:	899a      	ldrh	r2, [r3, #12]
   b5352:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b5356:	b159      	cbz	r1, b5370 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5358:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b535a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b535c:	bf44      	itt	mi
   b535e:	2202      	movmi	r2, #2
   b5360:	9205      	strmi	r2, [sp, #20]
   b5362:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b5364:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b5366:	bf42      	ittt	mi
   b5368:	9b05      	ldrmi	r3, [sp, #20]
   b536a:	f043 0301 	orrmi.w	r3, r3, #1
   b536e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b5370:	2100      	movs	r1, #0
   b5372:	4668      	mov	r0, sp
   b5374:	f7ff f8fc 	bl	b4570 <hal_ble_gatt_client_configure_cccd>
}
   b5378:	b006      	add	sp, #24
   b537a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b537c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5380:	e7fa      	b.n	b5378 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5382:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5386:	e7f7      	b.n	b5378 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b5388:	00180003 	.word	0x00180003
   b538c:	000b5561 	.word	0x000b5561

000b5390 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b5390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5392:	2600      	movs	r6, #0
   b5394:	6006      	str	r6, [r0, #0]
   b5396:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5398:	2028      	movs	r0, #40	; 0x28
   b539a:	f7fe fe7a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b539e:	1e04      	subs	r4, r0, #0
   b53a0:	f104 070c 	add.w	r7, r4, #12
   b53a4:	d00a      	beq.n	b53bc <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b53a6:	2301      	movs	r3, #1
   b53a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b53ac:	4b05      	ldr	r3, [pc, #20]	; (b53c4 <_ZN8particle10BleServiceC1Ev+0x34>)
   b53ae:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b53b0:	4638      	mov	r0, r7
   b53b2:	f7ff fd83 	bl	b4ebc <_ZN8particle7BleUuidC1Ev>
   b53b6:	6226      	str	r6, [r4, #32]
   b53b8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b53bc:	e9c5 7400 	strd	r7, r4, [r5]
}
   b53c0:	4628      	mov	r0, r5
   b53c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b53c4:	000b80ac 	.word	0x000b80ac

000b53c8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b53c8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b53ca:	2500      	movs	r5, #0
   b53cc:	6005      	str	r5, [r0, #0]
   b53ce:	4606      	mov	r6, r0
   b53d0:	2030      	movs	r0, #48	; 0x30
   b53d2:	f7fe fe5e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b53d6:	4604      	mov	r4, r0
   b53d8:	b188      	cbz	r0, b53fe <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b53da:	2301      	movs	r3, #1
   b53dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b53e0:	4b09      	ldr	r3, [pc, #36]	; (b5408 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b53e2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b53e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b53e8:	8183      	strh	r3, [r0, #12]
   b53ea:	300e      	adds	r0, #14
   b53ec:	f7ff fcef 	bl	b4dce <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b53f0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b53f4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b53f8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b53fc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b53fe:	6074      	str	r4, [r6, #4]
   b5400:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5402:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5404:	4630      	mov	r0, r6
   b5406:	bd70      	pop	{r4, r5, r6, pc}
   b5408:	000b80c8 	.word	0x000b80c8

000b540c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b540c:	b513      	push	{r0, r1, r4, lr}
   b540e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5410:	a801      	add	r0, sp, #4
   b5412:	f7ff fca1 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b5416:	6823      	ldr	r3, [r4, #0]
   b5418:	881c      	ldrh	r4, [r3, #0]
   b541a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b541e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b5420:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b5422:	bf18      	it	ne
   b5424:	2401      	movne	r4, #1
    WiringBleLock lk;
   b5426:	f7ff fca5 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b542a:	4620      	mov	r0, r4
   b542c:	b002      	add	sp, #8
   b542e:	bd10      	pop	{r4, pc}

000b5430 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b5430:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5432:	4605      	mov	r5, r0
   b5434:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5436:	a801      	add	r0, sp, #4
   b5438:	f7ff fc8e 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b543c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b543e:	6823      	ldr	r3, [r4, #0]
   b5440:	f8c2 3002 	str.w	r3, [r2, #2]
   b5444:	6863      	ldr	r3, [r4, #4]
   b5446:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b544a:	a801      	add	r0, sp, #4
   b544c:	f7ff fc92 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b5450:	b003      	add	sp, #12
   b5452:	bd30      	pop	{r4, r5, pc}

000b5454 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b5454:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5456:	460d      	mov	r5, r1
   b5458:	4604      	mov	r4, r0
    WiringBleLock lk;
   b545a:	a801      	add	r0, sp, #4
   b545c:	f7ff fc7c 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
   b5460:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5462:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5466:	6023      	str	r3, [r4, #0]
   b5468:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b546c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b546e:	a801      	add	r0, sp, #4
   b5470:	f7ff fc80 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5474:	4620      	mov	r0, r4
   b5476:	b003      	add	sp, #12
   b5478:	bd30      	pop	{r4, r5, pc}

000b547a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b547a:	b530      	push	{r4, r5, lr}
   b547c:	4605      	mov	r5, r0
   b547e:	b087      	sub	sp, #28
   b5480:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5482:	a801      	add	r0, sp, #4
   b5484:	f7ff fc68 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5488:	682a      	ldr	r2, [r5, #0]
   b548a:	6823      	ldr	r3, [r4, #0]
   b548c:	8812      	ldrh	r2, [r2, #0]
   b548e:	881b      	ldrh	r3, [r3, #0]
   b5490:	429a      	cmp	r2, r3
   b5492:	d10d      	bne.n	b54b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5494:	4629      	mov	r1, r5
   b5496:	a802      	add	r0, sp, #8
   b5498:	f7ff ffdc 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b549c:	4621      	mov	r1, r4
   b549e:	a804      	add	r0, sp, #16
   b54a0:	f7ff ffd8 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b54a4:	a904      	add	r1, sp, #16
   b54a6:	a802      	add	r0, sp, #8
   b54a8:	f7ff fc7d 	bl	b4da6 <_ZNK8particle10BleAddresseqERKS0_>
   b54ac:	4604      	mov	r4, r0
   b54ae:	b900      	cbnz	r0, b54b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b54b0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b54b2:	a801      	add	r0, sp, #4
   b54b4:	f7ff fc5e 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b54b8:	4620      	mov	r0, r4
   b54ba:	b007      	add	sp, #28
   b54bc:	bd30      	pop	{r4, r5, pc}
	...

000b54c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b54c0:	b510      	push	{r4, lr}
   b54c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b54c4:	2064      	movs	r0, #100	; 0x64
   b54c6:	f7fe fde4 	bl	b4092 <_Znwj>
   b54ca:	b168      	cbz	r0, b54e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b54cc:	2300      	movs	r3, #0
   b54ce:	e9c0 3300 	strd	r3, r3, [r0]
   b54d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b54d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b54da:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b54de:	6203      	str	r3, [r0, #32]
   b54e0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b54e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b54e4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b54e6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b54e8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b54ea:	b920      	cbnz	r0, b54f6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b54ec:	4a0a      	ldr	r2, [pc, #40]	; (b5518 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b54ee:	490b      	ldr	r1, [pc, #44]	; (b551c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b54f0:	200a      	movs	r0, #10
   b54f2:	f7ff f8cf 	bl	b4694 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b54f6:	2000      	movs	r0, #0
   b54f8:	f7fe ffcc 	bl	b4494 <hal_ble_stack_init>
   b54fc:	b120      	cbz	r0, b5508 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b54fe:	4a06      	ldr	r2, [pc, #24]	; (b5518 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5500:	4907      	ldr	r1, [pc, #28]	; (b5520 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5502:	200a      	movs	r0, #10
   b5504:	f7ff f8c6 	bl	b4694 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5508:	6821      	ldr	r1, [r4, #0]
   b550a:	4806      	ldr	r0, [pc, #24]	; (b5524 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b550c:	2200      	movs	r2, #0
   b550e:	f7ff f825 	bl	b455c <hal_ble_set_callback_on_periph_link_events>
}
   b5512:	4620      	mov	r0, r4
   b5514:	bd10      	pop	{r4, pc}
   b5516:	bf00      	nop
   b5518:	000b4475 	.word	0x000b4475
   b551c:	000b7e6c 	.word	0x000b7e6c
   b5520:	000b7eaa 	.word	0x000b7eaa
   b5524:	000b5f29 	.word	0x000b5f29

000b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5528:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b552a:	4c0a      	ldr	r4, [pc, #40]	; (b5554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b552c:	7823      	ldrb	r3, [r4, #0]
   b552e:	f3bf 8f5b 	dmb	ish
   b5532:	07db      	lsls	r3, r3, #31
   b5534:	d40c      	bmi.n	b5550 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5536:	4620      	mov	r0, r4
   b5538:	f7fe fdb1 	bl	b409e <__cxa_guard_acquire>
   b553c:	b140      	cbz	r0, b5550 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b553e:	4806      	ldr	r0, [pc, #24]	; (b5558 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5540:	f7ff ffbe 	bl	b54c0 <_ZN8particle14BleLocalDeviceC1Ev>
   b5544:	4620      	mov	r0, r4
   b5546:	f7fe fdaf 	bl	b40a8 <__cxa_guard_release>
   b554a:	4804      	ldr	r0, [pc, #16]	; (b555c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b554c:	f002 fb00 	bl	b7b50 <atexit>
    return instance;
}
   b5550:	4801      	ldr	r0, [pc, #4]	; (b5558 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5552:	bd10      	pop	{r4, pc}
   b5554:	2003e6ec 	.word	0x2003e6ec
   b5558:	2003e6f4 	.word	0x2003e6f4
   b555c:	000b582d 	.word	0x000b582d

000b5560 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5560:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5562:	6803      	ldr	r3, [r0, #0]
   b5564:	3b09      	subs	r3, #9
   b5566:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5568:	b08d      	sub	sp, #52	; 0x34
   b556a:	4604      	mov	r4, r0
   b556c:	460d      	mov	r5, r1
    switch (event->type) {
   b556e:	d811      	bhi.n	b5594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5570:	f7ff ffda 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5574:	88a1      	ldrh	r1, [r4, #4]
   b5576:	6800      	ldr	r0, [r0, #0]
   b5578:	f7ff fe99 	bl	b52ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b557c:	4603      	mov	r3, r0
   b557e:	b958      	cbnz	r0, b5598 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5580:	2220      	movs	r2, #32
   b5582:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5586:	4a0b      	ldr	r2, [pc, #44]	; (b55b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5588:	9200      	str	r2, [sp, #0]
   b558a:	490b      	ldr	r1, [pc, #44]	; (b55b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b558c:	aa04      	add	r2, sp, #16
   b558e:	2032      	movs	r0, #50	; 0x32
   b5590:	f7ff f888 	bl	b46a4 <log_message>
}
   b5594:	b00d      	add	sp, #52	; 0x34
   b5596:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5598:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b559a:	2a00      	cmp	r2, #0
   b559c:	d0fa      	beq.n	b5594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b559e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b55a2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b55a6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b55aa:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b55ac:	aa04      	add	r2, sp, #16
   b55ae:	a903      	add	r1, sp, #12
   b55b0:	47a0      	blx	r4
}
   b55b2:	e7ef      	b.n	b5594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b55b4:	000b7eec 	.word	0x000b7eec
   b55b8:	000b7e83 	.word	0x000b7e83

000b55bc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b55bc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b55be:	2000      	movs	r0, #0
   b55c0:	f7fe ff68 	bl	b4494 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b55c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b55c8:	bd08      	pop	{r3, pc}

000b55ca <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b55ca:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b55cc:	2100      	movs	r1, #0
   b55ce:	f7fe bf69 	b.w	b44a4 <hal_ble_select_antenna>
	...

000b55d4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b55d4:	b570      	push	{r4, r5, r6, lr}
   b55d6:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b55d8:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b55da:	460e      	mov	r6, r1
   b55dc:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b55de:	f7ff fb1d 	bl	b4c1c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b55e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b55e6:	f7ff fb24 	bl	b4c32 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b55ea:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b55ee:	2200      	movs	r2, #0
   b55f0:	4621      	mov	r1, r4
   b55f2:	4803      	ldr	r0, [pc, #12]	; (b5600 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b55f4:	f7fe ff6e 	bl	b44d4 <hal_ble_gap_start_scan>
   b55f8:	2800      	cmp	r0, #0
        return foundCount_;
   b55fa:	bfa8      	it	ge
   b55fc:	6960      	ldrge	r0, [r4, #20]
    }
   b55fe:	bd70      	pop	{r4, r5, r6, pc}
   b5600:	000b6f91 	.word	0x000b6f91

000b5604 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b5604:	b510      	push	{r4, lr}
   b5606:	4604      	mov	r4, r0
    ::free(ptr);
   b5608:	6940      	ldr	r0, [r0, #20]
   b560a:	f7ff f8ef 	bl	b47ec <free>
   b560e:	68a0      	ldr	r0, [r4, #8]
   b5610:	f7ff f8ec 	bl	b47ec <free>
   b5614:	4620      	mov	r0, r4
   b5616:	bd10      	pop	{r4, pc}

000b5618 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b5618:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b561a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b561e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b5622:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5626:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b562a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b562e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5632:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b5636:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b563a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b563e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5642:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b5646:	6202      	str	r2, [r0, #32]
   b5648:	6302      	str	r2, [r0, #48]	; 0x30
   b564a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b564e:	4770      	bx	lr

000b5650 <_ZNK8particle14BleLocalDevice10setScanPhyENS_9EnumFlagsINS_6BlePhyEvEE>:
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}

int BleLocalDevice::setScanPhy(EnumFlags<BlePhy> phy) const {
   b5650:	b530      	push	{r4, r5, lr}
   b5652:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b5654:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b5656:	2310      	movs	r3, #16
int BleLocalDevice::setScanPhy(EnumFlags<BlePhy> phy) const {
   b5658:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b565a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b565e:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b5660:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b5662:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b5664:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b5668:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b566c:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b566e:	f7fe ff29 	bl	b44c4 <hal_ble_gap_get_scan_parameters>
    scanParams.scan_phys = static_cast<uint8_t>(phy.value());
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b5672:	4621      	mov	r1, r4
   b5674:	4668      	mov	r0, sp
    scanParams.scan_phys = static_cast<uint8_t>(phy.value());
   b5676:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b567a:	f7fe ff1b 	bl	b44b4 <hal_ble_gap_set_scan_parameters>
}
   b567e:	b005      	add	sp, #20
   b5680:	bd30      	pop	{r4, r5, pc}

000b5682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5682:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5684:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5688:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b568a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b568e:	42ae      	cmp	r6, r5
   b5690:	d004      	beq.n	b569c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5692:	4628      	mov	r0, r5
   b5694:	f7ff f92a 	bl	b48ec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5698:	3510      	adds	r5, #16
   b569a:	e7f8      	b.n	b568e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b569c:	6820      	ldr	r0, [r4, #0]
   b569e:	f7ff f8a5 	bl	b47ec <free>
}
   b56a2:	4620      	mov	r0, r4
   b56a4:	bd70      	pop	{r4, r5, r6, pc}

000b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b56a6:	b510      	push	{r4, lr}
   b56a8:	4604      	mov	r4, r0
    ::free(ptr);
   b56aa:	6800      	ldr	r0, [r0, #0]
   b56ac:	f7ff f89e 	bl	b47ec <free>
}
   b56b0:	4620      	mov	r0, r4
   b56b2:	bd10      	pop	{r4, pc}

000b56b4 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b56b4:	b570      	push	{r4, r5, r6, lr}
   b56b6:	4604      	mov	r4, r0
    ::free(ptr);
   b56b8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b56ba:	f7ff f897 	bl	b47ec <free>
   b56be:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b56c0:	f7ff f894 	bl	b47ec <free>
    }
    ~BleScanFilter() = default;
   b56c4:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b56c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b56cc:	f7ff ffeb 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b56d0:	4628      	mov	r0, r5
   b56d2:	f7ff ffd6 	bl	b5682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b56d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b56da:	f7ff faf0 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
   b56de:	f104 0018 	add.w	r0, r4, #24
   b56e2:	f7ff faec 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b56e6:	e9d4 5300 	ldrd	r5, r3, [r4]
   b56ea:	2624      	movs	r6, #36	; 0x24
   b56ec:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b56f0:	42ae      	cmp	r6, r5
   b56f2:	d004      	beq.n	b56fe <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b56f4:	4628      	mov	r0, r5
   b56f6:	f7ff ff85 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b56fa:	3524      	adds	r5, #36	; 0x24
   b56fc:	e7f8      	b.n	b56f0 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b56fe:	6820      	ldr	r0, [r4, #0]
   b5700:	f7ff f874 	bl	b47ec <free>
   b5704:	4620      	mov	r0, r4
   b5706:	bd70      	pop	{r4, r5, r6, pc}

000b5708 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5708:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b570a:	1e14      	subs	r4, r2, #0
   b570c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b570e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5710:	db02      	blt.n	b5718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5712:	1862      	adds	r2, r4, r1
   b5714:	429a      	cmp	r2, r3
   b5716:	dd00      	ble.n	b571a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5718:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b571a:	682a      	ldr	r2, [r5, #0]
   b571c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b571e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5720:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5722:	1a52      	subs	r2, r2, r1
   b5724:	f002 fa38 	bl	b7b98 <memmove>
    size_ -= n;
   b5728:	686a      	ldr	r2, [r5, #4]
   b572a:	1b12      	subs	r2, r2, r4
   b572c:	606a      	str	r2, [r5, #4]
}
   b572e:	bd38      	pop	{r3, r4, r5, pc}

000b5730 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5730:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5732:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5734:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5736:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5738:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b573a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b573c:	f7fe fca9 	bl	b4092 <_Znwj>
   b5740:	b118      	cbz	r0, b574a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5742:	682b      	ldr	r3, [r5, #0]
   b5744:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5746:	686b      	ldr	r3, [r5, #4]
   b5748:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b574a:	4b03      	ldr	r3, [pc, #12]	; (b5758 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b574c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b574e:	4b03      	ldr	r3, [pc, #12]	; (b575c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5750:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5752:	60a3      	str	r3, [r4, #8]
      }
   b5754:	4620      	mov	r0, r4
   b5756:	bd38      	pop	{r3, r4, r5, pc}
   b5758:	000b4bc5 	.word	0x000b4bc5
   b575c:	000b4bdd 	.word	0x000b4bdd

000b5760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5760:	680b      	ldr	r3, [r1, #0]
   b5762:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5764:	b113      	cbz	r3, b576c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5766:	685a      	ldr	r2, [r3, #4]
   b5768:	3201      	adds	r2, #1
   b576a:	605a      	str	r2, [r3, #4]
      }
   b576c:	4770      	bx	lr

000b576e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b576e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5770:	f851 3b04 	ldr.w	r3, [r1], #4
   b5774:	4604      	mov	r4, r0
   b5776:	f840 3b04 	str.w	r3, [r0], #4
   b577a:	f7ff fff1 	bl	b5760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b577e:	6823      	ldr	r3, [r4, #0]
   b5780:	b90b      	cbnz	r3, b5786 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5782:	f7ff fa15 	bl	b4bb0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5786:	4620      	mov	r0, r4
   b5788:	bd10      	pop	{r4, pc}

000b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b578a:	b510      	push	{r4, lr}
   b578c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5790:	4604      	mov	r4, r0
   b5792:	f840 3b04 	str.w	r3, [r0], #4
   b5796:	f7ff ffe3 	bl	b5760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b579a:	4620      	mov	r0, r4
   b579c:	bd10      	pop	{r4, pc}

000b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b579e:	b510      	push	{r4, lr}
   b57a0:	f851 3b04 	ldr.w	r3, [r1], #4
   b57a4:	4604      	mov	r4, r0
   b57a6:	f840 3b04 	str.w	r3, [r0], #4
   b57aa:	f7ff ffd9 	bl	b5760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b57ae:	4620      	mov	r0, r4
   b57b0:	bd10      	pop	{r4, pc}

000b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b57b2:	b510      	push	{r4, lr}
   b57b4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b57b6:	6800      	ldr	r0, [r0, #0]
   b57b8:	b108      	cbz	r0, b57be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b57ba:	f7ff fa94 	bl	b4ce6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b57be:	4620      	mov	r0, r4
   b57c0:	bd10      	pop	{r4, pc}

000b57c2 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b57c2:	b510      	push	{r4, lr}
   b57c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b57c6:	3004      	adds	r0, #4
   b57c8:	f7ff fff3 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57cc:	4620      	mov	r0, r4
   b57ce:	bd10      	pop	{r4, pc}

000b57d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57d2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b57d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b57dc:	42ae      	cmp	r6, r5
   b57de:	d004      	beq.n	b57ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b57e0:	1d28      	adds	r0, r5, #4
   b57e2:	f7ff ffe6 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57e6:	3508      	adds	r5, #8
   b57e8:	e7f8      	b.n	b57dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b57ea:	6820      	ldr	r0, [r4, #0]
   b57ec:	f7fe fffe 	bl	b47ec <free>
}
   b57f0:	4620      	mov	r0, r4
   b57f2:	bd70      	pop	{r4, r5, r6, pc}

000b57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b57fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5800:	42ae      	cmp	r6, r5
   b5802:	d004      	beq.n	b580e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5804:	1d28      	adds	r0, r5, #4
   b5806:	f7ff ffd4 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b580a:	3508      	adds	r5, #8
   b580c:	e7f8      	b.n	b5800 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b580e:	6820      	ldr	r0, [r4, #0]
   b5810:	f7fe ffec 	bl	b47ec <free>
}
   b5814:	4620      	mov	r0, r4
   b5816:	bd70      	pop	{r4, r5, r6, pc}

000b5818 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5818:	b510      	push	{r4, lr}
   b581a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b581c:	3024      	adds	r0, #36	; 0x24
   b581e:	f7ff ffe9 	bl	b57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5822:	f104 0018 	add.w	r0, r4, #24
   b5826:	f7ff ffd3 	bl	b57d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b582a:	bd10      	pop	{r4, pc}

000b582c <__tcf_0>:
    static BleLocalDevice instance;
   b582c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b582e:	4b17      	ldr	r3, [pc, #92]	; (b588c <__tcf_0+0x60>)
   b5830:	681c      	ldr	r4, [r3, #0]
   b5832:	b354      	cbz	r4, b588a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5834:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5838:	f7ff fa41 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
   b583c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5840:	f7ff fa3d 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
   b5844:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5848:	f7ff fa39 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
   b584c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5850:	f7ff fa35 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5854:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5858:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b585c:	42ae      	cmp	r6, r5
   b585e:	d004      	beq.n	b586a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5860:	1d28      	adds	r0, r5, #4
   b5862:	f7ff ffa6 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5866:	3508      	adds	r5, #8
   b5868:	e7f8      	b.n	b585c <__tcf_0+0x30>
    ::free(ptr);
   b586a:	69a0      	ldr	r0, [r4, #24]
   b586c:	f7fe ffbe 	bl	b47ec <free>
    ~BleLocalDeviceImpl() = default;
   b5870:	f104 000c 	add.w	r0, r4, #12
   b5874:	f7ff ffbe 	bl	b57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5878:	4620      	mov	r0, r4
   b587a:	f7ff ffa9 	bl	b57d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b587e:	4620      	mov	r0, r4
   b5880:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5886:	f7fe bc08 	b.w	b409a <_ZdlPvj>
   b588a:	bd70      	pop	{r4, r5, r6, pc}
   b588c:	2003e6f4 	.word	0x2003e6f4

000b5890 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5890:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5892:	b510      	push	{r4, lr}
      if (_M_empty())
   b5894:	b90a      	cbnz	r2, b589a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5896:	f002 f845 	bl	b7924 <_ZSt25__throw_bad_function_callv>
    }
   b589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b589e:	68c3      	ldr	r3, [r0, #12]
   b58a0:	4718      	bx	r3

000b58a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b58a6:	2300      	movs	r3, #0
   b58a8:	e9c0 3300 	strd	r3, r3, [r0]
   b58ac:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58ae:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b58b2:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58b4:	4605      	mov	r5, r0
   b58b6:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58b8:	dd4a      	ble.n	b5950 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b58ba:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b58be:	f7fe ff8d 	bl	b47dc <malloc>
            if (!d) {
   b58c2:	4606      	mov	r6, r0
   b58c4:	2800      	cmp	r0, #0
   b58c6:	d043      	beq.n	b5950 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b58c8:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b58cc:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b58ce:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b58d2:	d916      	bls.n	b5902 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b58d4:	4550      	cmp	r0, sl
   b58d6:	d215      	bcs.n	b5904 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b58d8:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b58dc:	f1a4 0910 	sub.w	r9, r4, #16
   b58e0:	ebaa 0404 	sub.w	r4, sl, r4
   b58e4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b58e6:	45d1      	cmp	r9, sl
   b58e8:	d01d      	beq.n	b5926 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b58ea:	b11c      	cbz	r4, b58f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b58ec:	4651      	mov	r1, sl
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff f878 	bl	b49e4 <_ZN6StringC1EOS_>
                end->~T();
   b58f4:	4650      	mov	r0, sl
   b58f6:	f7fe fff9 	bl	b48ec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b58fa:	f1aa 0a10 	sub.w	sl, sl, #16
   b58fe:	3c10      	subs	r4, #16
   b5900:	e7f1      	b.n	b58e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b5902:	d010      	beq.n	b5926 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b5904:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b5906:	45a2      	cmp	sl, r4
   b5908:	d00d      	beq.n	b5926 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b590a:	f1b9 0f00 	cmp.w	r9, #0
   b590e:	d003      	beq.n	b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b5910:	4621      	mov	r1, r4
   b5912:	4648      	mov	r0, r9
   b5914:	f7ff f866 	bl	b49e4 <_ZN6StringC1EOS_>
                p->~T();
   b5918:	4620      	mov	r0, r4
   b591a:	f7fe ffe7 	bl	b48ec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b591e:	3410      	adds	r4, #16
   b5920:	f109 0910 	add.w	r9, r9, #16
   b5924:	e7ef      	b.n	b5906 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b5926:	6828      	ldr	r0, [r5, #0]
   b5928:	f7fe ff60 	bl	b47ec <free>
        capacity_ = n;
   b592c:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b5930:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5932:	e9d7 4300 	ldrd	r4, r3, [r7]
   b5936:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b593a:	45a0      	cmp	r8, r4
   b593c:	d006      	beq.n	b594c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b593e:	4621      	mov	r1, r4
   b5940:	4630      	mov	r0, r6
   b5942:	f7ff f869 	bl	b4a18 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b5946:	3410      	adds	r4, #16
   b5948:	3610      	adds	r6, #16
   b594a:	e7f6      	b.n	b593a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b594c:	687b      	ldr	r3, [r7, #4]
   b594e:	606b      	str	r3, [r5, #4]
}
   b5950:	4628      	mov	r0, r5
   b5952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5956 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b5956:	b530      	push	{r4, r5, lr}
   b5958:	b08d      	sub	sp, #52	; 0x34
   b595a:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b595c:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b5960:	a801      	add	r0, sp, #4
   b5962:	f7ff ff9e 	bl	b58a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b5966:	9b02      	ldr	r3, [sp, #8]
   b5968:	2b00      	cmp	r3, #0
   b596a:	dd2f      	ble.n	b59cc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b596c:	f104 0114 	add.w	r1, r4, #20
   b5970:	a804      	add	r0, sp, #16
   b5972:	f7ff fc3d 	bl	b51f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b5976:	f104 0108 	add.w	r1, r4, #8
   b597a:	a808      	add	r0, sp, #32
   b597c:	f7ff fc38 	bl	b51f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b5980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5982:	9b06      	ldr	r3, [sp, #24]
   b5984:	4313      	orrs	r3, r2
   b5986:	d01f      	beq.n	b59c8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b5988:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b598c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b5990:	42ac      	cmp	r4, r5
   b5992:	d019      	beq.n	b59c8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b5994:	a904      	add	r1, sp, #16
   b5996:	4620      	mov	r0, r4
   b5998:	f7ff f894 	bl	b4ac4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b599c:	b160      	cbz	r0, b59b8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b599e:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b59a0:	a808      	add	r0, sp, #32
   b59a2:	f7fe ffa3 	bl	b48ec <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b59a6:	a804      	add	r0, sp, #16
   b59a8:	f7fe ffa0 	bl	b48ec <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b59ac:	a801      	add	r0, sp, #4
   b59ae:	f7ff fe68 	bl	b5682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b59b2:	4620      	mov	r0, r4
   b59b4:	b00d      	add	sp, #52	; 0x34
   b59b6:	bd30      	pop	{r4, r5, pc}
   b59b8:	4620      	mov	r0, r4
   b59ba:	a908      	add	r1, sp, #32
   b59bc:	f7ff f882 	bl	b4ac4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b59c0:	3410      	adds	r4, #16
   b59c2:	2800      	cmp	r0, #0
   b59c4:	d0e4      	beq.n	b5990 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b59c6:	e7ea      	b.n	b599e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b59c8:	2400      	movs	r4, #0
   b59ca:	e7e9      	b.n	b59a0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b59cc:	2401      	movs	r4, #1
   b59ce:	e7ed      	b.n	b59ac <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b59d0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b59d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b59d2:	2300      	movs	r3, #0
   b59d4:	e9c0 3300 	strd	r3, r3, [r0]
   b59d8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b59da:	684f      	ldr	r7, [r1, #4]
   b59dc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b59de:	4605      	mov	r5, r0
   b59e0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b59e2:	dd3e      	ble.n	b5a62 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b59e4:	00f8      	lsls	r0, r7, #3
   b59e6:	f7fe fef9 	bl	b47dc <malloc>
            if (!d) {
   b59ea:	4604      	mov	r4, r0
   b59ec:	b3c8      	cbz	r0, b5a62 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b59ee:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b59f2:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b59f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b59f8:	d910      	bls.n	b5a1c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b59fa:	429c      	cmp	r4, r3
   b59fc:	d20f      	bcs.n	b5a1e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b59fe:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b5a00:	1a1a      	subs	r2, r3, r0
   b5a02:	f1a0 0c08 	sub.w	ip, r0, #8
   b5a06:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b5a08:	459c      	cmp	ip, r3
   b5a0a:	d018      	beq.n	b5a3e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b5a0c:	b11a      	cbz	r2, b5a16 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b5a0e:	6819      	ldr	r1, [r3, #0]
   b5a10:	6011      	str	r1, [r2, #0]
   b5a12:	6859      	ldr	r1, [r3, #4]
   b5a14:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b5a16:	3b08      	subs	r3, #8
   b5a18:	3a08      	subs	r2, #8
   b5a1a:	e7f5      	b.n	b5a08 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b5a1c:	d00f      	beq.n	b5a3e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b5a1e:	4601      	mov	r1, r0
   b5a20:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b5a22:	428b      	cmp	r3, r1
   b5a24:	d00b      	beq.n	b5a3e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b5a26:	b13a      	cbz	r2, b5a38 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b5a28:	f8d1 c000 	ldr.w	ip, [r1]
   b5a2c:	f8c2 c000 	str.w	ip, [r2]
   b5a30:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b5a34:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b5a38:	3108      	adds	r1, #8
   b5a3a:	3208      	adds	r2, #8
   b5a3c:	e7f1      	b.n	b5a22 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b5a3e:	f7fe fed5 	bl	b47ec <free>
        data_ = d;
   b5a42:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5a44:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5a46:	e9d6 3100 	ldrd	r3, r1, [r6]
   b5a4a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b5a4e:	4298      	cmp	r0, r3
   b5a50:	d006      	beq.n	b5a60 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b5a52:	681a      	ldr	r2, [r3, #0]
   b5a54:	6022      	str	r2, [r4, #0]
   b5a56:	685a      	ldr	r2, [r3, #4]
   b5a58:	6062      	str	r2, [r4, #4]
   b5a5a:	3308      	adds	r3, #8
   b5a5c:	3408      	adds	r4, #8
   b5a5e:	e7f6      	b.n	b5a4e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b5a60:	6069      	str	r1, [r5, #4]
}
   b5a62:	4628      	mov	r0, r5
   b5a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a66 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a66:	b570      	push	{r4, r5, r6, lr}
   b5a68:	4604      	mov	r4, r0
        capacity_(0) {
   b5a6a:	2000      	movs	r0, #0
   b5a6c:	e9c4 0000 	strd	r0, r0, [r4]
   b5a70:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a72:	684e      	ldr	r6, [r1, #4]
   b5a74:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a76:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a78:	dd12      	ble.n	b5aa0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b5a7a:	0071      	lsls	r1, r6, #1
   b5a7c:	f7fe febe 	bl	b47fc <realloc>
            if (!d) {
   b5a80:	b170      	cbz	r0, b5aa0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b5a82:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5a84:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5a86:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5a8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b5a8e:	429a      	cmp	r2, r3
   b5a90:	d004      	beq.n	b5a9c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b5a92:	f833 1b02 	ldrh.w	r1, [r3], #2
   b5a96:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b5a9a:	e7f8      	b.n	b5a8e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b5a9c:	686b      	ldr	r3, [r5, #4]
   b5a9e:	6063      	str	r3, [r4, #4]
}
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	bd70      	pop	{r4, r5, r6, pc}

000b5aa4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b5aa4:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5aa6:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5aa8:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5aaa:	b923      	cbnz	r3, b5ab6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b5aac:	6803      	ldr	r3, [r0, #0]
   b5aae:	6818      	ldr	r0, [r3, #0]
   b5ab0:	b108      	cbz	r0, b5ab6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b5ab2:	f7fe fe9b 	bl	b47ec <free>
            func_();
        }
    }
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	bd10      	pop	{r4, pc}

000b5aba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b5aba:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5abc:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5abe:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5ac0:	b923      	cbnz	r3, b5acc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b5ac2:	6803      	ldr	r3, [r0, #0]
   b5ac4:	6818      	ldr	r0, [r3, #0]
   b5ac6:	b108      	cbz	r0, b5acc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b5ac8:	f7fe fe90 	bl	b47ec <free>
    }
   b5acc:	4620      	mov	r0, r4
   b5ace:	bd10      	pop	{r4, pc}

000b5ad0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b5ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b5ad4:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b5ad8:	b08f      	sub	sp, #60	; 0x3c
   b5ada:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b5adc:	f1b8 0f00 	cmp.w	r8, #0
   b5ae0:	d072      	beq.n	b5bc8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b5ae2:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b5ae4:	2d00      	cmp	r5, #0
   b5ae6:	d06f      	beq.n	b5bc8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b5ae8:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5aec:	231f      	movs	r3, #31
   b5aee:	2200      	movs	r2, #0
   b5af0:	21ff      	movs	r1, #255	; 0xff
   b5af2:	4648      	mov	r0, r9
   b5af4:	f7ff fb49 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b5af8:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5afa:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5afc:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5afe:	2200      	movs	r2, #0
   b5b00:	4619      	mov	r1, r3
   b5b02:	4638      	mov	r0, r7
   b5b04:	f7ff fb41 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5b08:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5b0a:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5b0c:	d006      	beq.n	b5b1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b5b0e:	42ae      	cmp	r6, r5
   b5b10:	d030      	beq.n	b5b74 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b5b12:	2400      	movs	r4, #0
    }
   b5b14:	4620      	mov	r0, r4
   b5b16:	b00f      	add	sp, #60	; 0x3c
   b5b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	f7fe fe5d 	bl	b47dc <malloc>
            dismissed_(false) {
   b5b22:	ab03      	add	r3, sp, #12
   b5b24:	9304      	str	r3, [sp, #16]
   b5b26:	2300      	movs	r3, #0
   b5b28:	4604      	mov	r4, r0
   b5b2a:	9003      	str	r0, [sp, #12]
   b5b2c:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b5b30:	b970      	cbnz	r0, b5b50 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b5b32:	2320      	movs	r3, #32
   b5b34:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5b38:	4b24      	ldr	r3, [pc, #144]	; (b5bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5b3a:	9300      	str	r3, [sp, #0]
   b5b3c:	4924      	ldr	r1, [pc, #144]	; (b5bd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5b3e:	4603      	mov	r3, r0
   b5b40:	aa06      	add	r2, sp, #24
   b5b42:	2032      	movs	r0, #50	; 0x32
   b5b44:	f7fe fdae 	bl	b46a4 <log_message>
                    return false;
   b5b48:	a804      	add	r0, sp, #16
   b5b4a:	f7ff ffab 	bl	b5aa4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b5b4e:	e7e1      	b.n	b5b14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b5b50:	4602      	mov	r2, r0
   b5b52:	21ff      	movs	r1, #255	; 0xff
   b5b54:	462b      	mov	r3, r5
   b5b56:	4648      	mov	r0, r9
   b5b58:	f7ff fb17 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b5b5c:	9803      	ldr	r0, [sp, #12]
   b5b5e:	462a      	mov	r2, r5
   b5b60:	4641      	mov	r1, r8
   b5b62:	f001 fffb 	bl	b7b5c <memcmp>
   b5b66:	b118      	cbz	r0, b5b70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b5b68:	a804      	add	r0, sp, #16
   b5b6a:	f7ff ff9b 	bl	b5aa4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b5b6e:	e7ce      	b.n	b5b0e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b5b70:	2401      	movs	r4, #1
   b5b72:	e7e9      	b.n	b5b48 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b5b74:	4628      	mov	r0, r5
   b5b76:	f7fe fe31 	bl	b47dc <malloc>
   b5b7a:	2400      	movs	r4, #0
   b5b7c:	ab03      	add	r3, sp, #12
   b5b7e:	4606      	mov	r6, r0
   b5b80:	9003      	str	r0, [sp, #12]
   b5b82:	9304      	str	r3, [sp, #16]
   b5b84:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b5b88:	b978      	cbnz	r0, b5baa <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b5b8a:	2320      	movs	r3, #32
   b5b8c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5b90:	4b0e      	ldr	r3, [pc, #56]	; (b5bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5b92:	9300      	str	r3, [sp, #0]
   b5b94:	490e      	ldr	r1, [pc, #56]	; (b5bd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5b96:	4603      	mov	r3, r0
   b5b98:	aa06      	add	r2, sp, #24
   b5b9a:	2032      	movs	r0, #50	; 0x32
   b5b9c:	f7fe fd82 	bl	b46a4 <log_message>
                    return false;
   b5ba0:	4634      	mov	r4, r6
   b5ba2:	a804      	add	r0, sp, #16
   b5ba4:	f7ff ff89 	bl	b5aba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b5ba8:	e7b4      	b.n	b5b14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b5baa:	4602      	mov	r2, r0
   b5bac:	21ff      	movs	r1, #255	; 0xff
   b5bae:	462b      	mov	r3, r5
   b5bb0:	4638      	mov	r0, r7
   b5bb2:	f7ff faea 	bl	b518a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b5bb6:	9803      	ldr	r0, [sp, #12]
   b5bb8:	462a      	mov	r2, r5
   b5bba:	4641      	mov	r1, r8
   b5bbc:	f001 ffce 	bl	b7b5c <memcmp>
   b5bc0:	2800      	cmp	r0, #0
   b5bc2:	d1ee      	bne.n	b5ba2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b5bc4:	2401      	movs	r4, #1
   b5bc6:	e7ec      	b.n	b5ba2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b5bc8:	2401      	movs	r4, #1
   b5bca:	e7a3      	b.n	b5b14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b5bcc:	000b7f04 	.word	0x000b7f04
   b5bd0:	000b7e83 	.word	0x000b7e83

000b5bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5bd4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5bd6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5bd8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5bda:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5bdc:	dd03      	ble.n	b5be6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5bde:	f7fe fe0d 	bl	b47fc <realloc>
            if (!d) {
   b5be2:	b918      	cbnz	r0, b5bec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5be4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5be6:	f7fe fe01 	bl	b47ec <free>
        T* d = nullptr;
   b5bea:	2000      	movs	r0, #0
        data_ = d;
   b5bec:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5bee:	60a5      	str	r5, [r4, #8]
        return true;
   b5bf0:	2001      	movs	r0, #1
   b5bf2:	e7f7      	b.n	b5be4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5bf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5bf4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5bf6:	6883      	ldr	r3, [r0, #8]
   b5bf8:	428b      	cmp	r3, r1
   b5bfa:	da02      	bge.n	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5bfc:	f7ff ffea 	bl	b5bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5c00:	bd08      	pop	{r3, pc}
    return true;
   b5c02:	2001      	movs	r0, #1
   b5c04:	e7fc      	b.n	b5c00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c06:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5c08:	2300      	movs	r3, #0
   b5c0a:	e9c0 3300 	strd	r3, r3, [r0]
   b5c0e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c10:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5c12:	6849      	ldr	r1, [r1, #4]
   b5c14:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c16:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5c18:	dd10      	ble.n	b5c3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b5c1a:	f7ff ffdb 	bl	b5bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5c1e:	b168      	cbz	r0, b5c3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5c20:	e9d5 3100 	ldrd	r3, r1, [r5]
   b5c24:	6822      	ldr	r2, [r4, #0]
   b5c26:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b5c28:	4299      	cmp	r1, r3
   b5c2a:	d005      	beq.n	b5c38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b5c2c:	b10a      	cbz	r2, b5c32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b5c2e:	7818      	ldrb	r0, [r3, #0]
   b5c30:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5c32:	3301      	adds	r3, #1
   b5c34:	3201      	adds	r2, #1
   b5c36:	e7f7      	b.n	b5c28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b5c38:	686b      	ldr	r3, [r5, #4]
   b5c3a:	6063      	str	r3, [r4, #4]
}
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	bd38      	pop	{r3, r4, r5, pc}

000b5c40 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b5c40:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b5c42:	680b      	ldr	r3, [r1, #0]
   b5c44:	6003      	str	r3, [r0, #0]
   b5c46:	684b      	ldr	r3, [r1, #4]
   b5c48:	6043      	str	r3, [r0, #4]
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	460d      	mov	r5, r1
class BleAdvertisingData {
   b5c4e:	3008      	adds	r0, #8
   b5c50:	3108      	adds	r1, #8
   b5c52:	f7ff ffd8 	bl	b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b5c56:	f105 0114 	add.w	r1, r5, #20
   b5c5a:	f104 0014 	add.w	r0, r4, #20
   b5c5e:	f7ff ffd2 	bl	b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b5c62:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5c66:	f884 3020 	strb.w	r3, [r4, #32]
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	bd38      	pop	{r3, r4, r5, pc}

000b5c6e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b5c6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5c70:	4604      	mov	r4, r0
   b5c72:	a801      	add	r0, sp, #4
   b5c74:	f7ff ffc7 	bl	b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5c78:	9b01      	ldr	r3, [sp, #4]
   b5c7a:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c7c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5c7e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c80:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5c82:	6062      	str	r2, [r4, #4]
   b5c84:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c86:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c88:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5c8a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c8c:	9001      	str	r0, [sp, #4]
   b5c8e:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b5c90:	f7fe fdac 	bl	b47ec <free>
   b5c94:	b004      	add	sp, #16
   b5c96:	bd10      	pop	{r4, pc}

000b5c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c9c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c9e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ca0:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ca2:	4419      	add	r1, r3
   b5ca4:	6883      	ldr	r3, [r0, #8]
   b5ca6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ca8:	4604      	mov	r4, r0
   b5caa:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5cac:	dc12      	bgt.n	b5cd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5cae:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cb0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cb2:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cb4:	1bd2      	subs	r2, r2, r7
   b5cb6:	4631      	mov	r1, r6
   b5cb8:	1970      	adds	r0, r6, r5
   b5cba:	f001 ff6d 	bl	b7b98 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5cbe:	462a      	mov	r2, r5
   b5cc0:	4641      	mov	r1, r8
   b5cc2:	4630      	mov	r0, r6
   b5cc4:	f001 ff5a 	bl	b7b7c <memcpy>
    size_ += n;
   b5cc8:	6863      	ldr	r3, [r4, #4]
   b5cca:	442b      	add	r3, r5
   b5ccc:	6063      	str	r3, [r4, #4]
    return true;
   b5cce:	2001      	movs	r0, #1
}
   b5cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5cd4:	f7ff ff7e 	bl	b5bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5cd8:	2800      	cmp	r0, #0
   b5cda:	d1e8      	bne.n	b5cae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5cdc:	e7f8      	b.n	b5cd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5cde <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5cde:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b5ce0:	460a      	mov	r2, r1
   b5ce2:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5ce4:	b510      	push	{r4, lr}
   b5ce6:	4604      	mov	r4, r0
    size_ = 0;
   b5ce8:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b5cea:	b102      	cbz	r2, b5cee <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b5cec:	b90b      	cbnz	r3, b5cf2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b5cee:	2000      	movs	r0, #0
}
   b5cf0:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b5cf2:	2bff      	cmp	r3, #255	; 0xff
   b5cf4:	bf28      	it	cs
   b5cf6:	23ff      	movcs	r3, #255	; 0xff
   b5cf8:	f7ff ffce 	bl	b5c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b5cfc:	2800      	cmp	r0, #0
   b5cfe:	d0f7      	beq.n	b5cf0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b5d00:	6860      	ldr	r0, [r4, #4]
   b5d02:	e7f5      	b.n	b5cf0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b5d04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d06:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d08:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5d0c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5d0e:	4604      	mov	r4, r0
   b5d10:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d12:	da0b      	bge.n	b5d2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5d14:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d16:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d18:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d1a:	1b52      	subs	r2, r2, r5
   b5d1c:	1c48      	adds	r0, r1, #1
   b5d1e:	f001 ff3b 	bl	b7b98 <memmove>
    new(p) T(std::move(value));
   b5d22:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5d24:	6863      	ldr	r3, [r4, #4]
   b5d26:	3301      	adds	r3, #1
   b5d28:	6063      	str	r3, [r4, #4]
}
   b5d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d2c:	3101      	adds	r1, #1
   b5d2e:	f7ff ff51 	bl	b5bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5d32:	2800      	cmp	r0, #0
   b5d34:	d1ee      	bne.n	b5d14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5d36:	e7f8      	b.n	b5d2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5d38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d38:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5d3a:	6841      	ldr	r1, [r0, #4]
   b5d3c:	f7ff bfe2 	b.w	b5d04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5d40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5d44:	4604      	mov	r4, r0
   b5d46:	461d      	mov	r5, r3
   b5d48:	460f      	mov	r7, r1
   b5d4a:	ab01      	add	r3, sp, #4
   b5d4c:	4690      	mov	r8, r2
   b5d4e:	460a      	mov	r2, r1
   b5d50:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5d54:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5d58:	f7fe ff14 	bl	b4b84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5d5c:	1cae      	adds	r6, r5, #2
   b5d5e:	6863      	ldr	r3, [r4, #4]
   b5d60:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5d62:	f1b9 0f00 	cmp.w	r9, #0
   b5d66:	d126      	bne.n	b5db6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5d68:	b328      	cbz	r0, b5db6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5d6a:	4433      	add	r3, r6
   b5d6c:	1a1b      	subs	r3, r3, r0
   b5d6e:	2bff      	cmp	r3, #255	; 0xff
   b5d70:	d809      	bhi.n	b5d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5d72:	9901      	ldr	r1, [sp, #4]
   b5d74:	4620      	mov	r0, r4
   b5d76:	f7ff fcc7 	bl	b5708 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5d7a:	6861      	ldr	r1, [r4, #4]
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	4431      	add	r1, r6
   b5d80:	f7ff ff38 	bl	b5bf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5d84:	b918      	cbnz	r0, b5d8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5d86:	6860      	ldr	r0, [r4, #4]
}
   b5d88:	b003      	add	sp, #12
   b5d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5d8e:	1c6a      	adds	r2, r5, #1
   b5d90:	9901      	ldr	r1, [sp, #4]
   b5d92:	b2d2      	uxtb	r2, r2
   b5d94:	4620      	mov	r0, r4
   b5d96:	f7ff ffb5 	bl	b5d04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5d9a:	9901      	ldr	r1, [sp, #4]
   b5d9c:	463a      	mov	r2, r7
   b5d9e:	3101      	adds	r1, #1
   b5da0:	4620      	mov	r0, r4
   b5da2:	f7ff ffaf 	bl	b5d04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5da6:	9901      	ldr	r1, [sp, #4]
   b5da8:	462b      	mov	r3, r5
   b5daa:	4642      	mov	r2, r8
   b5dac:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5dae:	4620      	mov	r0, r4
   b5db0:	f7ff ff72 	bl	b5c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5db4:	e7e7      	b.n	b5d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5db6:	18f1      	adds	r1, r6, r3
   b5db8:	29ff      	cmp	r1, #255	; 0xff
   b5dba:	d8e4      	bhi.n	b5d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	f7ff ff19 	bl	b5bf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	d0df      	beq.n	b5d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5dc6:	1c69      	adds	r1, r5, #1
   b5dc8:	b2c9      	uxtb	r1, r1
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff ffb4 	bl	b5d38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5dd0:	4639      	mov	r1, r7
   b5dd2:	4620      	mov	r0, r4
   b5dd4:	f7ff ffb0 	bl	b5d38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5dd8:	6861      	ldr	r1, [r4, #4]
   b5dda:	462b      	mov	r3, r5
   b5ddc:	4642      	mov	r2, r8
   b5dde:	e7e6      	b.n	b5dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5de0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5de0:	b430      	push	{r4, r5}
   b5de2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5de6:	b11a      	cbz	r2, b5df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5de8:	9502      	str	r5, [sp, #8]
}
   b5dea:	bc30      	pop	{r4, r5}
   b5dec:	f7ff bfa8 	b.w	b5d40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5df0:	6840      	ldr	r0, [r0, #4]
}
   b5df2:	bc30      	pop	{r4, r5}
   b5df4:	4770      	bx	lr

000b5df6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5df6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5df8:	2300      	movs	r3, #0
   b5dfa:	e9c0 3300 	strd	r3, r3, [r0]
   b5dfe:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5e00:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5e02:	9300      	str	r3, [sp, #0]
   b5e04:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5e06:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5e0a:	4619      	mov	r1, r3
   b5e0c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5e10:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5e12:	f7ff ffe5 	bl	b5de0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5e16:	4620      	mov	r0, r4
   b5e18:	b004      	add	sp, #16
   b5e1a:	bd10      	pop	{r4, pc}

000b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5e1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e20:	4604      	mov	r4, r0
   b5e22:	460d      	mov	r5, r1
   b5e24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5e26:	d914      	bls.n	b5e52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5e28:	4290      	cmp	r0, r2
   b5e2a:	d213      	bcs.n	b5e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5e2c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5e30:	1a75      	subs	r5, r6, r1
   b5e32:	f1a1 0708 	sub.w	r7, r1, #8
   b5e36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5e38:	42b7      	cmp	r7, r6
   b5e3a:	d018      	beq.n	b5e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5e3c:	b11c      	cbz	r4, b5e46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5e3e:	4631      	mov	r1, r6
   b5e40:	4620      	mov	r0, r4
   b5e42:	f7ff fcac 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e46:	1d30      	adds	r0, r6, #4
   b5e48:	f7ff fcb3 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5e4c:	3e08      	subs	r6, #8
   b5e4e:	3c08      	subs	r4, #8
   b5e50:	e7f2      	b.n	b5e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5e52:	d00c      	beq.n	b5e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5e54:	42b5      	cmp	r5, r6
   b5e56:	d00a      	beq.n	b5e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5e58:	b11c      	cbz	r4, b5e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5e5a:	4629      	mov	r1, r5
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	f7ff fc9e 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e62:	1d28      	adds	r0, r5, #4
   b5e64:	f7ff fca5 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5e68:	3508      	adds	r5, #8
   b5e6a:	3408      	adds	r4, #8
   b5e6c:	e7f2      	b.n	b5e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e72:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5e74:	6846      	ldr	r6, [r0, #4]
   b5e76:	4668      	mov	r0, sp
   b5e78:	f7ff fc91 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e7c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5e80:	429f      	cmp	r7, r3
   b5e82:	db12      	blt.n	b5eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5e84:	3701      	adds	r7, #1
        if (n > 0) {
   b5e86:	2f00      	cmp	r7, #0
   b5e88:	dd29      	ble.n	b5ede <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5e8a:	00f8      	lsls	r0, r7, #3
   b5e8c:	f7fe fca6 	bl	b47dc <malloc>
            if (!d) {
   b5e90:	4605      	mov	r5, r0
   b5e92:	b1f0      	cbz	r0, b5ed2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5e94:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5e98:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5e9c:	f7ff ffbe 	bl	b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5ea0:	6820      	ldr	r0, [r4, #0]
   b5ea2:	f7fe fca3 	bl	b47ec <free>
        data_ = d;
   b5ea6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5ea8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5eaa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5eac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5eae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5eb2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5eb6:	4631      	mov	r1, r6
   b5eb8:	f106 0008 	add.w	r0, r6, #8
   b5ebc:	f7ff ffae 	bl	b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5ec0:	b11e      	cbz	r6, b5eca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5ec2:	4669      	mov	r1, sp
   b5ec4:	4630      	mov	r0, r6
   b5ec6:	f7ff fc6a 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5eca:	6863      	ldr	r3, [r4, #4]
   b5ecc:	3301      	adds	r3, #1
   b5ece:	6063      	str	r3, [r4, #4]
    return true;
   b5ed0:	2501      	movs	r5, #1
   b5ed2:	a801      	add	r0, sp, #4
   b5ed4:	f7ff fc6d 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ed8:	4628      	mov	r0, r5
   b5eda:	b003      	add	sp, #12
   b5edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5ede:	2500      	movs	r5, #0
   b5ee0:	e7de      	b.n	b5ea0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5ee4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5ee8:	4605      	mov	r5, r0
   b5eea:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5eec:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5ef0:	42a6      	cmp	r6, r4
   b5ef2:	d005      	beq.n	b5f00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5ef4:	4639      	mov	r1, r7
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	f7ff fabf 	bl	b547a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5efc:	b108      	cbz	r0, b5f02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5efe:	b914      	cbnz	r4, b5f06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5f02:	3408      	adds	r4, #8
   b5f04:	e7f4      	b.n	b5ef0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5f06:	1d20      	adds	r0, r4, #4
   b5f08:	f7ff fc53 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5f0c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5f10:	f104 0108 	add.w	r1, r4, #8
   b5f14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5f18:	4620      	mov	r0, r4
   b5f1a:	f7ff ff7f 	bl	b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5f1e:	686b      	ldr	r3, [r5, #4]
   b5f20:	3b01      	subs	r3, #1
   b5f22:	606b      	str	r3, [r5, #4]
    return true;
   b5f24:	e7ec      	b.n	b5f00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5f28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f2c:	4605      	mov	r5, r0
   b5f2e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5f30:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5f32:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5f34:	f7fe ff10 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5f38:	682e      	ldr	r6, [r5, #0]
   b5f3a:	1ef3      	subs	r3, r6, #3
   b5f3c:	2b0d      	cmp	r3, #13
   b5f3e:	d83c      	bhi.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5f40:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5f44:	0053000e 	.word	0x0053000e
   b5f48:	00d1003b 	.word	0x00d1003b
   b5f4c:	003b003b 	.word	0x003b003b
   b5f50:	003b003b 	.word	0x003b003b
   b5f54:	009b003b 	.word	0x009b003b
   b5f58:	009b009b 	.word	0x009b009b
   b5f5c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b5f60:	a804      	add	r0, sp, #16
   b5f62:	f7ff fa31 	bl	b53c8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5f66:	9b04      	ldr	r3, [sp, #16]
   b5f68:	89aa      	ldrh	r2, [r5, #12]
   b5f6a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5f6c:	6869      	ldr	r1, [r5, #4]
   b5f6e:	9804      	ldr	r0, [sp, #16]
   b5f70:	3108      	adds	r1, #8
   b5f72:	3002      	adds	r0, #2
   b5f74:	f7fe ff0a 	bl	b4d8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5f78:	a904      	add	r1, sp, #16
   b5f7a:	a806      	add	r0, sp, #24
   b5f7c:	f7ff fc0f 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5f80:	a906      	add	r1, sp, #24
   b5f82:	f104 0018 	add.w	r0, r4, #24
   b5f86:	f7ff ff73 	bl	b5e70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5f8a:	4605      	mov	r5, r0
   b5f8c:	a807      	add	r0, sp, #28
   b5f8e:	f7ff fc10 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f92:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5f94:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5f96:	b9b5      	cbnz	r5, b5fc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5f98:	4b5d      	ldr	r3, [pc, #372]	; (b6110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b5f9a:	495e      	ldr	r1, [pc, #376]	; (b6114 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5f9c:	9300      	str	r3, [sp, #0]
   b5f9e:	2032      	movs	r0, #50	; 0x32
   b5fa0:	462b      	mov	r3, r5
   b5fa2:	aa06      	add	r2, sp, #24
   b5fa4:	9507      	str	r5, [sp, #28]
   b5fa6:	f7fe fb7d 	bl	b46a4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5faa:	9b04      	ldr	r3, [sp, #16]
   b5fac:	4629      	mov	r1, r5
   b5fae:	8818      	ldrh	r0, [r3, #0]
   b5fb0:	f7fe faa2 	bl	b44f8 <hal_ble_gap_disconnect>
   b5fb4:	a805      	add	r0, sp, #20
   b5fb6:	f7ff fbfc 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5fba:	a803      	add	r0, sp, #12
   b5fbc:	f7fe feda 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5fc0:	b00e      	add	sp, #56	; 0x38
   b5fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b5fc6:	4a54      	ldr	r2, [pc, #336]	; (b6118 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5fc8:	9200      	str	r2, [sp, #0]
   b5fca:	2300      	movs	r3, #0
   b5fcc:	4951      	ldr	r1, [pc, #324]	; (b6114 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5fce:	9307      	str	r3, [sp, #28]
   b5fd0:	aa06      	add	r2, sp, #24
   b5fd2:	2001      	movs	r0, #1
   b5fd4:	f7fe fb66 	bl	b46a4 <log_message>
                if (impl->connectedCallback_) {
   b5fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5fda:	2b00      	cmp	r3, #0
   b5fdc:	d0ea      	beq.n	b5fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b5fde:	a904      	add	r1, sp, #16
   b5fe0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5fe4:	f7ff fc54 	bl	b5890 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5fe8:	e7e4      	b.n	b5fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5fea:	89a9      	ldrh	r1, [r5, #12]
   b5fec:	4620      	mov	r0, r4
   b5fee:	f7ff f95e 	bl	b52ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5ff2:	4606      	mov	r6, r0
   b5ff4:	2800      	cmp	r0, #0
   b5ff6:	d0e0      	beq.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5ff8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5ffa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5ffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6002:	8029      	strh	r1, [r5, #0]
   b6004:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6008:	429a      	cmp	r2, r3
   b600a:	d003      	beq.n	b6014 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b600c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6010:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6012:	e7f9      	b.n	b6008 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b6014:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6018:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b601c:	45b8      	cmp	r8, r7
   b601e:	d004      	beq.n	b602a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b6020:	1d38      	adds	r0, r7, #4
   b6022:	f7ff fbc6 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6026:	3708      	adds	r7, #8
   b6028:	e7f8      	b.n	b601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b602a:	2300      	movs	r3, #0
   b602c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b602e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6032:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6036:	45b8      	cmp	r8, r7
   b6038:	d004      	beq.n	b6044 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b603a:	1d38      	adds	r0, r7, #4
   b603c:	f7ff fbb9 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6040:	3708      	adds	r7, #8
   b6042:	e7f8      	b.n	b6036 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b6044:	2300      	movs	r3, #0
   b6046:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6048:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b604a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b604c:	b123      	cbz	r3, b6058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b604e:	4631      	mov	r1, r6
   b6050:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6054:	f7ff fc1c 	bl	b5890 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6058:	2300      	movs	r3, #0
   b605a:	2220      	movs	r2, #32
   b605c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6060:	4a2e      	ldr	r2, [pc, #184]	; (b611c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b6062:	9200      	str	r2, [sp, #0]
   b6064:	492b      	ldr	r1, [pc, #172]	; (b6114 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6066:	aa06      	add	r2, sp, #24
   b6068:	2001      	movs	r0, #1
   b606a:	f7fe fb1b 	bl	b46a4 <log_message>
                    impl->peers_.removeOne(*peer);
   b606e:	4631      	mov	r1, r6
   b6070:	f104 0018 	add.w	r0, r4, #24
   b6074:	f7ff ff35 	bl	b5ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b6078:	e79f      	b.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b607a:	89a9      	ldrh	r1, [r5, #12]
   b607c:	4620      	mov	r0, r4
   b607e:	f7ff f916 	bl	b52ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6082:	2800      	cmp	r0, #0
   b6084:	d099      	beq.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b6086:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6088:	2b00      	cmp	r3, #0
   b608a:	d096      	beq.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b608c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b608e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6090:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6094:	d001      	beq.n	b609a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b6096:	2e10      	cmp	r6, #16
   b6098:	d117      	bne.n	b60ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b609a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b609c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b609e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b60a0:	2506      	movs	r5, #6
                        };
   b60a2:	f88d 3015 	strb.w	r3, [sp, #21]
   b60a6:	9104      	str	r1, [sp, #16]
   b60a8:	f88d 2014 	strb.w	r2, [sp, #20]
   b60ac:	9006      	str	r0, [sp, #24]
   b60ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b60b2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b60b4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b60b8:	9508      	str	r5, [sp, #32]
   b60ba:	e883 0003 	stmia.w	r3, {r0, r1}
   b60be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b60c0:	a906      	add	r1, sp, #24
   b60c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b60c6:	4798      	blx	r3
   b60c8:	e777      	b.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b60ca:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b60cc:	bf01      	itttt	eq
   b60ce:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b60d0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b60d2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b60d6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b60d8:	bf0f      	iteee	eq
   b60da:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b60de:	461a      	movne	r2, r3
   b60e0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b60e2:	461d      	movne	r5, r3
   b60e4:	e7dd      	b.n	b60a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b60e6:	89a9      	ldrh	r1, [r5, #12]
   b60e8:	4620      	mov	r0, r4
   b60ea:	f7ff f8e0 	bl	b52ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b60ee:	4601      	mov	r1, r0
   b60f0:	2800      	cmp	r0, #0
   b60f2:	f43f af62 	beq.w	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b60f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b60f8:	2b00      	cmp	r3, #0
   b60fa:	f43f af5e 	beq.w	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b60fe:	686b      	ldr	r3, [r5, #4]
   b6100:	9306      	str	r3, [sp, #24]
   b6102:	aa06      	add	r2, sp, #24
   b6104:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b6106:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b610a:	4798      	blx	r3
   b610c:	e755      	b.n	b5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b610e:	bf00      	nop
   b6110:	000b7f1f 	.word	0x000b7f1f
   b6114:	000b7e83 	.word	0x000b7e83
   b6118:	000b7f45 	.word	0x000b7f45
   b611c:	000b7f62 	.word	0x000b7f62

000b6120 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b6120:	b513      	push	{r0, r1, r4, lr}
   b6122:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b6124:	f7ff f972 	bl	b540c <_ZNK8particle13BlePeerDevice9connectedEv>
   b6128:	b1d0      	cbz	r0, b6160 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b612a:	6823      	ldr	r3, [r4, #0]
   b612c:	2100      	movs	r1, #0
   b612e:	8818      	ldrh	r0, [r3, #0]
   b6130:	f7fe f9e2 	bl	b44f8 <hal_ble_gap_disconnect>
   b6134:	2800      	cmp	r0, #0
   b6136:	db11      	blt.n	b615c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b6138:	a801      	add	r0, sp, #4
   b613a:	f7fe fe0d 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b613e:	f7ff f9f3 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b6142:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b6144:	4621      	mov	r1, r4
   b6146:	3018      	adds	r0, #24
   b6148:	f7ff fecb 	bl	b5ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b614c:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b614e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6152:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b6154:	a801      	add	r0, sp, #4
   b6156:	f7fe fe0d 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b615a:	2000      	movs	r0, #0
}
   b615c:	b002      	add	sp, #8
   b615e:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b6160:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6164:	e7fa      	b.n	b615c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000b6166 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6166:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6168:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b616a:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b616c:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b616e:	dd05      	ble.n	b617c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b6170:	2114      	movs	r1, #20
   b6172:	4369      	muls	r1, r5
   b6174:	f7fe fb42 	bl	b47fc <realloc>
            if (!d) {
   b6178:	b918      	cbnz	r0, b6182 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b617a:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b617c:	f7fe fb36 	bl	b47ec <free>
        T* d = nullptr;
   b6180:	2000      	movs	r0, #0
        data_ = d;
   b6182:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6184:	60a5      	str	r5, [r4, #8]
        return true;
   b6186:	2001      	movs	r0, #1
   b6188:	e7f7      	b.n	b617a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b618a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b618a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b618e:	2400      	movs	r4, #0
   b6190:	e9c0 4400 	strd	r4, r4, [r0]
   b6194:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6196:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6198:	6849      	ldr	r1, [r1, #4]
   b619a:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b619c:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b619e:	dd1a      	ble.n	b61d6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b61a0:	f7ff ffe1 	bl	b6166 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b61a4:	b1b8      	cbz	r0, b61d6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b61a6:	e9d8 9300 	ldrd	r9, r3, [r8]
   b61aa:	f04f 0c14 	mov.w	ip, #20
   b61ae:	f8d7 e000 	ldr.w	lr, [r7]
   b61b2:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b61b6:	eb09 0504 	add.w	r5, r9, r4
   b61ba:	45ac      	cmp	ip, r5
   b61bc:	d008      	beq.n	b61d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b61be:	eb1e 0604 	adds.w	r6, lr, r4
   b61c2:	bf1f      	itttt	ne
   b61c4:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b61c6:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b61c8:	682b      	ldrne	r3, [r5, #0]
   b61ca:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b61cc:	3414      	adds	r4, #20
   b61ce:	e7f2      	b.n	b61b6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b61d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b61d4:	607b      	str	r3, [r7, #4]
}
   b61d6:	4638      	mov	r0, r7
   b61d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b61dc <_ZN8particle13BleScanFilteraSERKS0_.isra.0>:
class BleScanFilter {
   b61dc:	b530      	push	{r4, r5, lr}
   b61de:	b085      	sub	sp, #20
   b61e0:	4604      	mov	r4, r0
   b61e2:	a801      	add	r0, sp, #4
   b61e4:	460d      	mov	r5, r1
   b61e6:	f7ff fb5c 	bl	b58a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b61ea:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61ec:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b61ee:	6022      	str	r2, [r4, #0]
   b61f0:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b61f2:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61f4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b61f6:	6062      	str	r2, [r4, #4]
   b61f8:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b61fa:	9302      	str	r3, [sp, #8]
   b61fc:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61fe:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6200:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6202:	9303      	str	r3, [sp, #12]
   b6204:	f7ff fa3d 	bl	b5682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
   b6208:	f105 010c 	add.w	r1, r5, #12
   b620c:	a801      	add	r0, sp, #4
   b620e:	f7ff ffbc 	bl	b618a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b6212:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6214:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6216:	60e2      	str	r2, [r4, #12]
   b6218:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b621a:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b621c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b621e:	6122      	str	r2, [r4, #16]
   b6220:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6222:	9302      	str	r3, [sp, #8]
   b6224:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6226:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6228:	6162      	str	r2, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b622a:	9303      	str	r3, [sp, #12]
   b622c:	f7ff fa3b 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b6230:	f105 0118 	add.w	r1, r5, #24
   b6234:	a801      	add	r0, sp, #4
   b6236:	f7ff fbcb 	bl	b59d0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b623a:	9b01      	ldr	r3, [sp, #4]
   b623c:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b623e:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6240:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6242:	69e3      	ldr	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6244:	61e2      	str	r2, [r4, #28]
   b6246:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6248:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b624a:	6a23      	ldr	r3, [r4, #32]
      __a = _GLIBCXX_MOVE(__b);
   b624c:	6222      	str	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b624e:	9303      	str	r3, [sp, #12]
   b6250:	9001      	str	r0, [sp, #4]
    ::free(ptr);
   b6252:	f7fe facb 	bl	b47ec <free>
   b6256:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b625a:	a801      	add	r0, sp, #4
   b625c:	f7ff fc03 	bl	b5a66 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b6260:	9b01      	ldr	r3, [sp, #4]
   b6262:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6264:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6266:	6263      	str	r3, [r4, #36]	; 0x24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   b626a:	62a2      	str	r2, [r4, #40]	; 0x28
   b626c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b626e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   b6272:	62e2      	str	r2, [r4, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6274:	9303      	str	r3, [sp, #12]
   b6276:	9001      	str	r0, [sp, #4]
   b6278:	f7fe fab8 	bl	b47ec <free>
   b627c:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
   b6280:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b6284:	f995 3031 	ldrsb.w	r3, [r5, #49]	; 0x31
   b6288:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   b628c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b628e:	6363      	str	r3, [r4, #52]	; 0x34
   b6290:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6292:	63a3      	str	r3, [r4, #56]	; 0x38
   b6294:	b005      	add	sp, #20
   b6296:	bd30      	pop	{r4, r5, pc}

000b6298 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj>:
int BleLocalDevice::scanWithFilter(const BleScanFilter& filter, BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.setScanFilter(filter).start(callback, context);
}

int BleLocalDevice::scanWithFilter(const BleScanFilter& filter, BleScanResult* results, size_t resultCount) const {
   b6298:	b530      	push	{r4, r5, lr}
   b629a:	b0a1      	sub	sp, #132	; 0x84
   b629c:	461d      	mov	r5, r3
   b629e:	9101      	str	r1, [sp, #4]
    if (results == nullptr || resultCount == 0) {
   b62a0:	4614      	mov	r4, r2
   b62a2:	b19a      	cbz	r2, b62cc <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj+0x34>
   b62a4:	b193      	cbz	r3, b62cc <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b62a6:	a803      	add	r0, sp, #12
   b62a8:	f7ff f9b6 	bl	b5618 <_ZN8particle16BleScanDelegatorC1Ev>
        filter_ = filter;
   b62ac:	9901      	ldr	r1, [sp, #4]
   b62ae:	a811      	add	r0, sp, #68	; 0x44
   b62b0:	f7ff ff94 	bl	b61dc <_ZN8particle13BleScanFilteraSERKS0_.isra.0>
    return scanner.setScanFilter(filter).start(results, resultCount);
   b62b4:	4621      	mov	r1, r4
   b62b6:	462a      	mov	r2, r5
   b62b8:	a803      	add	r0, sp, #12
   b62ba:	f7ff f98b 	bl	b55d4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b62be:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b62c0:	a803      	add	r0, sp, #12
   b62c2:	f7ff f9f7 	bl	b56b4 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b62c6:	4620      	mov	r0, r4
   b62c8:	b021      	add	sp, #132	; 0x84
   b62ca:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b62cc:	4c00      	ldr	r4, [pc, #0]	; (b62d0 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj+0x38>)
   b62ce:	e7fa      	b.n	b62c6 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterEPNS_13BleScanResultEj+0x2e>
   b62d0:	fffffef2 	.word	0xfffffef2

000b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b62d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b62d8:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b62dc:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b62de:	6883      	ldr	r3, [r0, #8]
   b62e0:	19e9      	adds	r1, r5, r7
   b62e2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b62e4:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b62e6:	dc17      	bgt.n	b6318 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b62e8:	2314      	movs	r3, #20
   b62ea:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b62ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b62ee:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b62f0:	fb03 f907 	mul.w	r9, r3, r7
   b62f4:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b62f6:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b62f8:	1b52      	subs	r2, r2, r5
   b62fa:	4631      	mov	r1, r6
   b62fc:	eb06 0009 	add.w	r0, r6, r9
   b6300:	f001 fc4a 	bl	b7b98 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6304:	464a      	mov	r2, r9
   b6306:	4641      	mov	r1, r8
   b6308:	4630      	mov	r0, r6
   b630a:	f001 fc37 	bl	b7b7c <memcpy>
    size_ += n;
   b630e:	6863      	ldr	r3, [r4, #4]
   b6310:	443b      	add	r3, r7
   b6312:	6063      	str	r3, [r4, #4]
}
   b6314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6318:	f7ff ff25 	bl	b6166 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b631c:	2800      	cmp	r0, #0
   b631e:	d1e3      	bne.n	b62e8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b6320:	e7f8      	b.n	b6314 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b6322 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6322:	b082      	sub	sp, #8
   b6324:	b570      	push	{r4, r5, r6, lr}
   b6326:	460c      	mov	r4, r1
   b6328:	a904      	add	r1, sp, #16
   b632a:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b632e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6332:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6334:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6336:	da17      	bge.n	b6368 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b6338:	2314      	movs	r3, #20
   b633a:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b633e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b6340:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b6342:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b6344:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6346:	1a52      	subs	r2, r2, r1
   b6348:	18e0      	adds	r0, r4, r3
   b634a:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b634c:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b634e:	f001 fc23 	bl	b7b98 <memmove>
    new(p) T(std::move(value));
   b6352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6356:	6833      	ldr	r3, [r6, #0]
   b6358:	6023      	str	r3, [r4, #0]
    ++size_;
   b635a:	686b      	ldr	r3, [r5, #4]
   b635c:	3301      	adds	r3, #1
   b635e:	606b      	str	r3, [r5, #4]
}
   b6360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6364:	b002      	add	sp, #8
   b6366:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6368:	3101      	adds	r1, #1
   b636a:	f7ff fefc 	bl	b6166 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b636e:	2800      	cmp	r0, #0
   b6370:	d1e2      	bne.n	b6338 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b6372:	e7f5      	b.n	b6360 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b6378:	2400      	movs	r4, #0
   b637a:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b637c:	1e93      	subs	r3, r2, #2
   b637e:	e9c0 4400 	strd	r4, r4, [r0]
   b6382:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b6384:	4605      	mov	r5, r0
   b6386:	460f      	mov	r7, r1
   b6388:	4690      	mov	r8, r2
   b638a:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b638c:	9305      	str	r3, [sp, #20]
    return size_;
   b638e:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6390:	428c      	cmp	r4, r1
   b6392:	da72      	bge.n	b647a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b6394:	6838      	ldr	r0, [r7, #0]
   b6396:	ab07      	add	r3, sp, #28
   b6398:	4642      	mov	r2, r8
   b639a:	1b09      	subs	r1, r1, r4
   b639c:	4420      	add	r0, r4
   b639e:	f7fe fbf1 	bl	b4b84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b63a2:	4606      	mov	r6, r0
   b63a4:	2800      	cmp	r0, #0
   b63a6:	d068      	beq.n	b647a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b63a8:	9b05      	ldr	r3, [sp, #20]
   b63aa:	2b01      	cmp	r3, #1
   b63ac:	d82f      	bhi.n	b640e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b63ae:	f1a0 0b02 	sub.w	fp, r0, #2
   b63b2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b63b6:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b63ba:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b63be:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b63c0:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b63c2:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b63c4:	d055      	beq.n	b6472 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b63c6:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b63c8:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b63cc:	4413      	add	r3, r2
   b63ce:	a808      	add	r0, sp, #32
   b63d0:	78d9      	ldrb	r1, [r3, #3]
   b63d2:	789b      	ldrb	r3, [r3, #2]
   b63d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b63d8:	f7fe fdc1 	bl	b4f5e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b63dc:	f10d 0e20 	add.w	lr, sp, #32
   b63e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b63e4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b63e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b63ec:	f8de 3000 	ldr.w	r3, [lr]
   b63f0:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b63f4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b63f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b63fc:	ab0d      	add	r3, sp, #52	; 0x34
   b63fe:	cb0c      	ldmia	r3, {r2, r3}
   b6400:	6869      	ldr	r1, [r5, #4]
   b6402:	4628      	mov	r0, r5
   b6404:	f7ff ff8d 	bl	b6322 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6408:	f109 0901 	add.w	r9, r9, #1
   b640c:	e7d7      	b.n	b63be <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b640e:	f1a8 0306 	sub.w	r3, r8, #6
   b6412:	2b01      	cmp	r3, #1
   b6414:	d82d      	bhi.n	b6472 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6416:	f1a0 0b02 	sub.w	fp, r0, #2
   b641a:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b641e:	f04f 0900 	mov.w	r9, #0
   b6422:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b6426:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b6428:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b642a:	d022      	beq.n	b6472 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b642c:	3302      	adds	r3, #2
    return data_[i];
   b642e:	6839      	ldr	r1, [r7, #0]
   b6430:	4423      	add	r3, r4
   b6432:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b6436:	2201      	movs	r2, #1
   b6438:	4419      	add	r1, r3
   b643a:	a808      	add	r0, sp, #32
   b643c:	f7fe fd70 	bl	b4f20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b6440:	f10d 0e20 	add.w	lr, sp, #32
   b6444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6448:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b644c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6450:	f8de 3000 	ldr.w	r3, [lr]
   b6454:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b6458:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b645c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b6460:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b6464:	6869      	ldr	r1, [r5, #4]
   b6466:	4628      	mov	r0, r5
   b6468:	f7ff ff5b 	bl	b6322 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b646c:	f109 0901 	add.w	r9, r9, #1
   b6470:	e7d9      	b.n	b6426 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6472:	9b07      	ldr	r3, [sp, #28]
   b6474:	441c      	add	r4, r3
   b6476:	4434      	add	r4, r6
   b6478:	e789      	b.n	b638e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b647a:	4628      	mov	r0, r5
   b647c:	b013      	add	sp, #76	; 0x4c
   b647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6482 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6482:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b6484:	2300      	movs	r3, #0
   b6486:	b085      	sub	sp, #20
   b6488:	e9c0 3300 	strd	r3, r3, [r0]
   b648c:	6083      	str	r3, [r0, #8]
   b648e:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6490:	2202      	movs	r2, #2
   b6492:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6494:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6496:	f7ff ff6d 	bl	b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b649a:	a901      	add	r1, sp, #4
   b649c:	4620      	mov	r0, r4
   b649e:	f7ff ff19 	bl	b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b64a2:	a801      	add	r0, sp, #4
   b64a4:	f7ff f8ff 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b64a8:	2202      	movs	r2, #2
   b64aa:	4629      	mov	r1, r5
   b64ac:	a801      	add	r0, sp, #4
   b64ae:	f7ff ff61 	bl	b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b64b2:	a901      	add	r1, sp, #4
   b64b4:	4620      	mov	r0, r4
   b64b6:	f7ff ff0d 	bl	b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b64ba:	a801      	add	r0, sp, #4
   b64bc:	f7ff f8f3 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b64c0:	2203      	movs	r2, #3
   b64c2:	4629      	mov	r1, r5
   b64c4:	a801      	add	r0, sp, #4
   b64c6:	f7ff ff55 	bl	b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b64ca:	a901      	add	r1, sp, #4
   b64cc:	4620      	mov	r0, r4
   b64ce:	f7ff ff01 	bl	b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b64d2:	a801      	add	r0, sp, #4
   b64d4:	f7ff f8e7 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b64d8:	2206      	movs	r2, #6
   b64da:	4629      	mov	r1, r5
   b64dc:	a801      	add	r0, sp, #4
   b64de:	f7ff ff49 	bl	b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b64e2:	a901      	add	r1, sp, #4
   b64e4:	4620      	mov	r0, r4
   b64e6:	f7ff fef5 	bl	b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b64ea:	a801      	add	r0, sp, #4
   b64ec:	f7ff f8db 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b64f0:	2207      	movs	r2, #7
   b64f2:	4629      	mov	r1, r5
   b64f4:	a801      	add	r0, sp, #4
   b64f6:	f7ff ff3d 	bl	b6374 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b64fa:	a901      	add	r1, sp, #4
   b64fc:	4620      	mov	r0, r4
   b64fe:	f7ff fee9 	bl	b62d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6502:	a801      	add	r0, sp, #4
   b6504:	f7ff f8cf 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b6508:	4620      	mov	r0, r4
   b650a:	b005      	add	sp, #20
   b650c:	bd30      	pop	{r4, r5, pc}

000b650e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b650e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6512:	b08b      	sub	sp, #44	; 0x2c
   b6514:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b6516:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b651a:	a801      	add	r0, sp, #4
   b651c:	f7ff fe35 	bl	b618a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b6520:	9b02      	ldr	r3, [sp, #8]
   b6522:	2b00      	cmp	r3, #0
   b6524:	dd4a      	ble.n	b65bc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6526:	f104 0114 	add.w	r1, r4, #20
   b652a:	a804      	add	r0, sp, #16
   b652c:	f7ff ffa9 	bl	b6482 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6530:	f104 0108 	add.w	r1, r4, #8
   b6534:	a807      	add	r0, sp, #28
   b6536:	f7ff ffa4 	bl	b6482 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b653a:	9d05      	ldr	r5, [sp, #20]
   b653c:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b653e:	2d00      	cmp	r5, #0
   b6540:	dc01      	bgt.n	b6546 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b6542:	2e00      	cmp	r6, #0
   b6544:	dd38      	ble.n	b65b8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b6546:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b6548:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b654a:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b654e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b6552:	2314      	movs	r3, #20
   b6554:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b6558:	fb03 8505 	mla	r5, r3, r5, r8
   b655c:	fb03 9606 	mla	r6, r3, r6, r9
   b6560:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b6562:	45ba      	cmp	sl, r7
   b6564:	d028      	beq.n	b65b8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b6566:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b6568:	45ab      	cmp	fp, r5
   b656a:	d015      	beq.n	b6598 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b656c:	4659      	mov	r1, fp
   b656e:	4650      	mov	r0, sl
   b6570:	f7fe fcff 	bl	b4f72 <_ZNK8particle7BleUuideqERKS0_>
   b6574:	f10b 0b14 	add.w	fp, fp, #20
   b6578:	4604      	mov	r4, r0
   b657a:	2800      	cmp	r0, #0
   b657c:	d0f4      	beq.n	b6568 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b657e:	a807      	add	r0, sp, #28
   b6580:	f7ff f891 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6584:	a804      	add	r0, sp, #16
   b6586:	f7ff f88e 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b658a:	a801      	add	r0, sp, #4
   b658c:	f7ff f88b 	bl	b56a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b6590:	4620      	mov	r0, r4
   b6592:	b00b      	add	sp, #44	; 0x2c
   b6594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6598:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b659a:	45b3      	cmp	fp, r6
   b659c:	d009      	beq.n	b65b2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b659e:	4659      	mov	r1, fp
   b65a0:	4650      	mov	r0, sl
   b65a2:	f7fe fce6 	bl	b4f72 <_ZNK8particle7BleUuideqERKS0_>
   b65a6:	f10b 0b14 	add.w	fp, fp, #20
   b65aa:	4604      	mov	r4, r0
   b65ac:	2800      	cmp	r0, #0
   b65ae:	d0f4      	beq.n	b659a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b65b0:	e7e5      	b.n	b657e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b65b2:	f10a 0a14 	add.w	sl, sl, #20
   b65b6:	e7d4      	b.n	b6562 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b65b8:	2400      	movs	r4, #0
   b65ba:	e7e0      	b.n	b657e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b65bc:	2401      	movs	r4, #1
   b65be:	e7e4      	b.n	b658a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b65c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b65c0:	b513      	push	{r0, r1, r4, lr}
   b65c2:	460b      	mov	r3, r1
   b65c4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65c6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b65ca:	466c      	mov	r4, sp
   b65cc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b65d0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b65d4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b65d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b65dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b65e0:	b002      	add	sp, #8
   b65e2:	bd10      	pop	{r4, pc}

000b65e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b65e4:	b538      	push	{r3, r4, r5, lr}
   b65e6:	4605      	mov	r5, r0
   b65e8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b65ea:	f7ff ffe9 	bl	b65c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65ee:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b65f0:	68a2      	ldr	r2, [r4, #8]
   b65f2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b65f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65f6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b65f8:	68e2      	ldr	r2, [r4, #12]
   b65fa:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b65fc:	60e3      	str	r3, [r4, #12]
      }
   b65fe:	bd38      	pop	{r3, r4, r5, pc}

000b6600 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b6600:	b530      	push	{r4, r5, lr}
   b6602:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b6604:	2300      	movs	r3, #0
   b6606:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b6608:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b660a:	4605      	mov	r5, r0
   b660c:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b660e:	b133      	cbz	r3, b661e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6610:	2202      	movs	r2, #2
   b6612:	4668      	mov	r0, sp
   b6614:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6616:	68e3      	ldr	r3, [r4, #12]
   b6618:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b661a:	68a3      	ldr	r3, [r4, #8]
   b661c:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b661e:	4629      	mov	r1, r5
   b6620:	4668      	mov	r0, sp
   b6622:	f7ff ffdf 	bl	b65e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6626:	4668      	mov	r0, sp
   b6628:	f7fe fb49 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
      }
   b662c:	b005      	add	sp, #20
   b662e:	bd30      	pop	{r4, r5, pc}

000b6630 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b6630:	b538      	push	{r3, r4, r5, lr}
   b6632:	460d      	mov	r5, r1
   b6634:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b6636:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b6638:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b663a:	b123      	cbz	r3, b6646 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b663c:	6828      	ldr	r0, [r5, #0]
   b663e:	314c      	adds	r1, #76	; 0x4c
   b6640:	304c      	adds	r0, #76	; 0x4c
   b6642:	f7ff ffdd 	bl	b6600 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6646:	4620      	mov	r0, r4
   b6648:	682b      	ldr	r3, [r5, #0]
   b664a:	f840 3b04 	str.w	r3, [r0], #4
   b664e:	6869      	ldr	r1, [r5, #4]
   b6650:	f7fe fb5d 	bl	b4d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b6654:	4620      	mov	r0, r4
   b6656:	bd38      	pop	{r3, r4, r5, pc}

000b6658 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b6658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b665c:	4604      	mov	r4, r0
   b665e:	b087      	sub	sp, #28
    WiringBleLock lk;
   b6660:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b6662:	460e      	mov	r6, r1
   b6664:	4617      	mov	r7, r2
    WiringBleLock lk;
   b6666:	f7fe fb77 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b666a:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b666c:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6670:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b6674:	4544      	cmp	r4, r8
   b6676:	46a1      	mov	r9, r4
   b6678:	d016      	beq.n	b66a8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b667a:	4621      	mov	r1, r4
   b667c:	a801      	add	r0, sp, #4
   b667e:	f7fe fe41 	bl	b5304 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b6682:	4639      	mov	r1, r7
   b6684:	a801      	add	r0, sp, #4
   b6686:	f7fe fc74 	bl	b4f72 <_ZNK8particle7BleUuideqERKS0_>
   b668a:	3408      	adds	r4, #8
   b668c:	4605      	mov	r5, r0
   b668e:	2800      	cmp	r0, #0
   b6690:	d0f0      	beq.n	b6674 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b6692:	4649      	mov	r1, r9
   b6694:	4630      	mov	r0, r6
   b6696:	f7ff ffcb 	bl	b6630 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b669a:	4668      	mov	r0, sp
   b669c:	f7fe fb6a 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b66a0:	4628      	mov	r0, r5
   b66a2:	b007      	add	sp, #28
   b66a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b66a8:	2500      	movs	r5, #0
   b66aa:	e7f6      	b.n	b669a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b66ac <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b66ac:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b66ae:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b66b0:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b66b2:	344c      	adds	r4, #76	; 0x4c
   b66b4:	b1b9      	cbz	r1, b66e6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b66b6:	e9cd 1200 	strd	r1, r2, [sp]
   b66ba:	a802      	add	r0, sp, #8
   b66bc:	4669      	mov	r1, sp
   b66be:	f7ff f837 	bl	b5730 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b66c2:	2300      	movs	r3, #0
	__x.swap(*this);
   b66c4:	a906      	add	r1, sp, #24
   b66c6:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b66c8:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b66ca:	f7ff ff8b 	bl	b65e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b66ce:	4621      	mov	r1, r4
   b66d0:	a806      	add	r0, sp, #24
   b66d2:	f7ff ff87 	bl	b65e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b66d6:	a806      	add	r0, sp, #24
   b66d8:	f7fe faf1 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
   b66dc:	a802      	add	r0, sp, #8
   b66de:	f7fe faee 	bl	b4cbe <_ZNSt14_Function_baseD1Ev>
}
   b66e2:	b00a      	add	sp, #40	; 0x28
   b66e4:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b66e6:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b66e8:	e7eb      	b.n	b66c2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b66ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b66ea:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b66ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66ee:	4604      	mov	r4, r0
   b66f0:	460d      	mov	r5, r1
   b66f2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b66f4:	d914      	bls.n	b6720 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b66f6:	4290      	cmp	r0, r2
   b66f8:	d213      	bcs.n	b6722 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b66fa:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b66fe:	1a75      	subs	r5, r6, r1
   b6700:	f1a1 0708 	sub.w	r7, r1, #8
   b6704:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6706:	42b7      	cmp	r7, r6
   b6708:	d018      	beq.n	b673c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b670a:	b11c      	cbz	r4, b6714 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b670c:	4631      	mov	r1, r6
   b670e:	4620      	mov	r0, r4
   b6710:	f7ff f83b 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6714:	1d30      	adds	r0, r6, #4
   b6716:	f7ff f84c 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b671a:	3e08      	subs	r6, #8
   b671c:	3c08      	subs	r4, #8
   b671e:	e7f2      	b.n	b6706 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6720:	d00c      	beq.n	b673c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6722:	42b5      	cmp	r5, r6
   b6724:	d00a      	beq.n	b673c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6726:	b11c      	cbz	r4, b6730 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6728:	4629      	mov	r1, r5
   b672a:	4620      	mov	r0, r4
   b672c:	f7ff f82d 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6730:	1d28      	adds	r0, r5, #4
   b6732:	f7ff f83e 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6736:	3508      	adds	r5, #8
   b6738:	3408      	adds	r4, #8
   b673a:	e7f2      	b.n	b6722 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b673e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b673e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6740:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6742:	4605      	mov	r5, r0
        if (n > 0) {
   b6744:	dd11      	ble.n	b676a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6746:	00f0      	lsls	r0, r6, #3
   b6748:	f7fe f848 	bl	b47dc <malloc>
            if (!d) {
   b674c:	4604      	mov	r4, r0
   b674e:	b158      	cbz	r0, b6768 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6750:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6754:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6758:	f7ff ffc7 	bl	b66ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b675c:	6828      	ldr	r0, [r5, #0]
   b675e:	f7fe f845 	bl	b47ec <free>
        data_ = d;
   b6762:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6764:	60ae      	str	r6, [r5, #8]
        return true;
   b6766:	2001      	movs	r0, #1
    }
   b6768:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b676a:	2400      	movs	r4, #0
   b676c:	e7f6      	b.n	b675c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b676e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b676e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6772:	2300      	movs	r3, #0
   b6774:	e9c0 3300 	strd	r3, r3, [r0]
   b6778:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b677a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b677c:	6849      	ldr	r1, [r1, #4]
   b677e:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6780:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6782:	dd13      	ble.n	b67ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b6784:	f7ff ffdb 	bl	b673e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6788:	b180      	cbz	r0, b67ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b678a:	e9d5 6300 	ldrd	r6, r3, [r5]
   b678e:	6827      	ldr	r7, [r4, #0]
   b6790:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b6794:	45b0      	cmp	r8, r6
   b6796:	d007      	beq.n	b67a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b6798:	b11f      	cbz	r7, b67a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b679a:	4631      	mov	r1, r6
   b679c:	4638      	mov	r0, r7
   b679e:	f7fe fff4 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b67a2:	3608      	adds	r6, #8
   b67a4:	3708      	adds	r7, #8
   b67a6:	e7f5      	b.n	b6794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b67a8:	686b      	ldr	r3, [r5, #4]
   b67aa:	6063      	str	r3, [r4, #4]
}
   b67ac:	4620      	mov	r0, r4
   b67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67b2 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b67b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67b4:	460d      	mov	r5, r1
   b67b6:	4604      	mov	r4, r0
    WiringBleLock lk;
   b67b8:	a801      	add	r0, sp, #4
   b67ba:	f7fe facd 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b67be:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b67c0:	4620      	mov	r0, r4
   b67c2:	310c      	adds	r1, #12
   b67c4:	f7ff ffd3 	bl	b676e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b67c8:	a801      	add	r0, sp, #4
   b67ca:	f7fe fad3 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b67ce:	4620      	mov	r0, r4
   b67d0:	b003      	add	sp, #12
   b67d2:	bd30      	pop	{r4, r5, pc}

000b67d4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b67d4:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b67d6:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b67d8:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b67da:	4605      	mov	r5, r0
   b67dc:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b67de:	b933      	cbnz	r3, b67ee <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b67e0:	4608      	mov	r0, r1
   b67e2:	f7fe fa31 	bl	b4c48 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b67e6:	b910      	cbnz	r0, b67ee <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b67e8:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b67ea:	2201      	movs	r2, #1
   b67ec:	729a      	strb	r2, [r3, #10]
    return services();
   b67ee:	4628      	mov	r0, r5
   b67f0:	4621      	mov	r1, r4
   b67f2:	f7ff ffde 	bl	b67b2 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b67f6:	4628      	mov	r0, r5
   b67f8:	bd38      	pop	{r3, r4, r5, pc}

000b67fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b67fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b67fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b67fe:	6845      	ldr	r5, [r0, #4]
   b6800:	4668      	mov	r0, sp
   b6802:	f7fe ffc2 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6806:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b680a:	4299      	cmp	r1, r3
   b680c:	da10      	bge.n	b6830 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b680e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6810:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6812:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6816:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b681a:	4629      	mov	r1, r5
   b681c:	f105 0008 	add.w	r0, r5, #8
   b6820:	f7ff ff63 	bl	b66ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6824:	b98d      	cbnz	r5, b684a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6826:	6863      	ldr	r3, [r4, #4]
   b6828:	3301      	adds	r3, #1
   b682a:	6063      	str	r3, [r4, #4]
    return true;
   b682c:	2601      	movs	r6, #1
   b682e:	e006      	b.n	b683e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6830:	3101      	adds	r1, #1
   b6832:	4620      	mov	r0, r4
   b6834:	f7ff ff83 	bl	b673e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6838:	4606      	mov	r6, r0
   b683a:	2800      	cmp	r0, #0
   b683c:	d1e7      	bne.n	b680e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b683e:	a801      	add	r0, sp, #4
   b6840:	f7fe ffb7 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6844:	4630      	mov	r0, r6
   b6846:	b002      	add	sp, #8
   b6848:	bd70      	pop	{r4, r5, r6, pc}
   b684a:	4669      	mov	r1, sp
   b684c:	4628      	mov	r0, r5
   b684e:	f7fe ff9c 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6852:	e7e8      	b.n	b6826 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6854 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b6854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b6858:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b6914 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b685c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b6918 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b6860:	b093      	sub	sp, #76	; 0x4c
   b6862:	4605      	mov	r5, r0
   b6864:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b6866:	2700      	movs	r7, #0
   b6868:	682b      	ldr	r3, [r5, #0]
   b686a:	42bb      	cmp	r3, r7
   b686c:	d94e      	bls.n	b690c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b686e:	a803      	add	r0, sp, #12
   b6870:	f7fe fd8e 	bl	b5390 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b6874:	261c      	movs	r6, #28
   b6876:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b6878:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b687a:	437e      	muls	r6, r7
   b687c:	4432      	add	r2, r6
   b687e:	f10d 0c14 	add.w	ip, sp, #20
   b6882:	1d13      	adds	r3, r2, #4
   b6884:	46e3      	mov	fp, ip
   b6886:	3214      	adds	r2, #20
   b6888:	6818      	ldr	r0, [r3, #0]
   b688a:	6859      	ldr	r1, [r3, #4]
   b688c:	46e6      	mov	lr, ip
   b688e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b6892:	3308      	adds	r3, #8
   b6894:	4293      	cmp	r3, r2
   b6896:	46f4      	mov	ip, lr
   b6898:	d1f6      	bne.n	b6888 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b689a:	6818      	ldr	r0, [r3, #0]
   b689c:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b68a0:	4659      	mov	r1, fp
   b68a2:	a80a      	add	r0, sp, #40	; 0x28
   b68a4:	f7fe fb1a 	bl	b4edc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b68a8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b68ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b68b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68b2:	f8dc 3000 	ldr.w	r3, [ip]
   b68b6:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b68b8:	686b      	ldr	r3, [r5, #4]
   b68ba:	9a03      	ldr	r2, [sp, #12]
   b68bc:	4433      	add	r3, r6
   b68be:	a903      	add	r1, sp, #12
   b68c0:	8b1b      	ldrh	r3, [r3, #24]
   b68c2:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b68c4:	686b      	ldr	r3, [r5, #4]
   b68c6:	4433      	add	r3, r6
   b68c8:	8b5b      	ldrh	r3, [r3, #26]
   b68ca:	82d3      	strh	r3, [r2, #22]
        return services_;
   b68cc:	f8d8 0000 	ldr.w	r0, [r8]
   b68d0:	f100 040c 	add.w	r4, r0, #12
   b68d4:	a80a      	add	r0, sp, #40	; 0x28
   b68d6:	f7fe ff58 	bl	b578a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b68da:	4620      	mov	r0, r4
   b68dc:	a90a      	add	r1, sp, #40	; 0x28
   b68de:	f7ff ff8c 	bl	b67fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b68e2:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b68e4:	a80b      	add	r0, sp, #44	; 0x2c
   b68e6:	f7fe ff64 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68ea:	b954      	cbnz	r4, b6902 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b68ec:	2320      	movs	r3, #32
   b68ee:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b68f2:	f8cd 9000 	str.w	r9, [sp]
   b68f6:	4623      	mov	r3, r4
   b68f8:	aa0a      	add	r2, sp, #40	; 0x28
   b68fa:	4651      	mov	r1, sl
   b68fc:	2032      	movs	r0, #50	; 0x32
   b68fe:	f7fd fed1 	bl	b46a4 <log_message>
   b6902:	a804      	add	r0, sp, #16
   b6904:	f7fe ff55 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b6908:	3701      	adds	r7, #1
   b690a:	e7ad      	b.n	b6868 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b690c:	b013      	add	sp, #76	; 0x4c
   b690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6912:	bf00      	nop
   b6914:	000b7f81 	.word	0x000b7f81
   b6918:	000b7e83 	.word	0x000b7e83

000b691c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b691c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6920:	4604      	mov	r4, r0
   b6922:	460d      	mov	r5, r1
   b6924:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6926:	d914      	bls.n	b6952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6928:	4290      	cmp	r0, r2
   b692a:	d213      	bcs.n	b6954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b692c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6930:	1a75      	subs	r5, r6, r1
   b6932:	f1a1 0708 	sub.w	r7, r1, #8
   b6936:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6938:	42b7      	cmp	r7, r6
   b693a:	d018      	beq.n	b696e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b693c:	b11c      	cbz	r4, b6946 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b693e:	4631      	mov	r1, r6
   b6940:	4620      	mov	r0, r4
   b6942:	f7fe ff14 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6946:	1d30      	adds	r0, r6, #4
   b6948:	f7fe ff33 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b694c:	3e08      	subs	r6, #8
   b694e:	3c08      	subs	r4, #8
   b6950:	e7f2      	b.n	b6938 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6952:	d00c      	beq.n	b696e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6954:	42b5      	cmp	r5, r6
   b6956:	d00a      	beq.n	b696e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6958:	b11c      	cbz	r4, b6962 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b695a:	4629      	mov	r1, r5
   b695c:	4620      	mov	r0, r4
   b695e:	f7fe ff06 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6962:	1d28      	adds	r0, r5, #4
   b6964:	f7fe ff25 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6968:	3508      	adds	r5, #8
   b696a:	3408      	adds	r4, #8
   b696c:	e7f2      	b.n	b6954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6970 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6970:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6972:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6974:	4605      	mov	r5, r0
        if (n > 0) {
   b6976:	dd11      	ble.n	b699c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6978:	00f0      	lsls	r0, r6, #3
   b697a:	f7fd ff2f 	bl	b47dc <malloc>
            if (!d) {
   b697e:	4604      	mov	r4, r0
   b6980:	b158      	cbz	r0, b699a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6982:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6986:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b698a:	f7ff ffc7 	bl	b691c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b698e:	6828      	ldr	r0, [r5, #0]
   b6990:	f7fd ff2c 	bl	b47ec <free>
        data_ = d;
   b6994:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6996:	60ae      	str	r6, [r5, #8]
        return true;
   b6998:	2001      	movs	r0, #1
    }
   b699a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b699c:	2400      	movs	r4, #0
   b699e:	e7f6      	b.n	b698e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b69a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b69a4:	2300      	movs	r3, #0
   b69a6:	e9c0 3300 	strd	r3, r3, [r0]
   b69aa:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69ac:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69ae:	6849      	ldr	r1, [r1, #4]
   b69b0:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69b2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69b4:	dd13      	ble.n	b69de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b69b6:	f7ff ffdb 	bl	b6970 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b69ba:	b180      	cbz	r0, b69de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b69bc:	e9d5 6300 	ldrd	r6, r3, [r5]
   b69c0:	6827      	ldr	r7, [r4, #0]
   b69c2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b69c6:	45b0      	cmp	r8, r6
   b69c8:	d007      	beq.n	b69da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b69ca:	b11f      	cbz	r7, b69d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b69cc:	4631      	mov	r1, r6
   b69ce:	4638      	mov	r0, r7
   b69d0:	f7fe fecd 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b69d4:	3608      	adds	r6, #8
   b69d6:	3708      	adds	r7, #8
   b69d8:	e7f5      	b.n	b69c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b69da:	686b      	ldr	r3, [r5, #4]
   b69dc:	6063      	str	r3, [r4, #4]
}
   b69de:	4620      	mov	r0, r4
   b69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b69e4 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b69e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b69e6:	460d      	mov	r5, r1
   b69e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b69ea:	a801      	add	r0, sp, #4
   b69ec:	f7fe f9b4 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b69f0:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b69f2:	4620      	mov	r0, r4
   b69f4:	3118      	adds	r1, #24
   b69f6:	f7ff ffd3 	bl	b69a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b69fa:	a801      	add	r0, sp, #4
   b69fc:	f7fe f9ba 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6a00:	4620      	mov	r0, r4
   b6a02:	b003      	add	sp, #12
   b6a04:	bd30      	pop	{r4, r5, pc}

000b6a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a08:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6a0a:	6845      	ldr	r5, [r0, #4]
   b6a0c:	4668      	mov	r0, sp
   b6a0e:	f7fe feae 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6a12:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6a16:	4299      	cmp	r1, r3
   b6a18:	da10      	bge.n	b6a3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6a1a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6a1c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6a1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6a22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6a26:	4629      	mov	r1, r5
   b6a28:	f105 0008 	add.w	r0, r5, #8
   b6a2c:	f7ff ff76 	bl	b691c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6a30:	b98d      	cbnz	r5, b6a56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6a32:	6863      	ldr	r3, [r4, #4]
   b6a34:	3301      	adds	r3, #1
   b6a36:	6063      	str	r3, [r4, #4]
    return true;
   b6a38:	2601      	movs	r6, #1
   b6a3a:	e006      	b.n	b6a4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6a3c:	3101      	adds	r1, #1
   b6a3e:	4620      	mov	r0, r4
   b6a40:	f7ff ff96 	bl	b6970 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6a44:	4606      	mov	r6, r0
   b6a46:	2800      	cmp	r0, #0
   b6a48:	d1e7      	bne.n	b6a1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6a4a:	a801      	add	r0, sp, #4
   b6a4c:	f7fe feb1 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6a50:	4630      	mov	r0, r6
   b6a52:	b002      	add	sp, #8
   b6a54:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6a56:	4669      	mov	r1, sp
   b6a58:	4628      	mov	r0, r5
   b6a5a:	f7fe fe88 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a5e:	e7e8      	b.n	b6a32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6a60 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b6a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a62:	b085      	sub	sp, #20
   b6a64:	4605      	mov	r5, r0
    WiringBleLock lk;
   b6a66:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b6a68:	460c      	mov	r4, r1
   b6a6a:	4617      	mov	r7, r2
    WiringBleLock lk;
   b6a6c:	f7fe f974 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b6a70:	2300      	movs	r3, #0
   b6a72:	e9c5 3300 	strd	r3, r3, [r5]
   b6a76:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b6a78:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b6a7a:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b6a7e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b6a82:	42b4      	cmp	r4, r6
   b6a84:	d011      	beq.n	b6aaa <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b6a86:	6838      	ldr	r0, [r7, #0]
   b6a88:	4621      	mov	r1, r4
   b6a8a:	f7fe fbfb 	bl	b5284 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b6a8e:	b150      	cbz	r0, b6aa6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b6a90:	4621      	mov	r1, r4
   b6a92:	a802      	add	r0, sp, #8
   b6a94:	f7fe fe6b 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a98:	a902      	add	r1, sp, #8
   b6a9a:	4628      	mov	r0, r5
   b6a9c:	f7ff ffb3 	bl	b6a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b6aa0:	a803      	add	r0, sp, #12
   b6aa2:	f7fe fe86 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b6aa6:	3408      	adds	r4, #8
   b6aa8:	e7eb      	b.n	b6a82 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b6aaa:	a801      	add	r0, sp, #4
   b6aac:	f7fe f962 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6ab0:	4628      	mov	r0, r5
   b6ab2:	b005      	add	sp, #20
   b6ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6ab8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b6ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b6abc:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6abe:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b6ac0:	b091      	sub	sp, #68	; 0x44
   b6ac2:	4606      	mov	r6, r0
   b6ac4:	460f      	mov	r7, r1
   b6ac6:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b6ac8:	b933      	cbnz	r3, b6ad8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b6aca:	e9c0 3300 	strd	r3, r3, [r0]
   b6ace:	6083      	str	r3, [r0, #8]
}
   b6ad0:	4630      	mov	r0, r6
   b6ad2:	b011      	add	sp, #68	; 0x44
   b6ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b6ad8:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b6ada:	7e0d      	ldrb	r5, [r1, #24]
   b6adc:	2d00      	cmp	r5, #0
   b6ade:	d158      	bne.n	b6b92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b6ae0:	2320      	movs	r3, #32
   b6ae2:	462a      	mov	r2, r5
   b6ae4:	a803      	add	r0, sp, #12
   b6ae6:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b6aea:	f7fe fb3e 	bl	b516a <_ZNK8particle7BleUuid8toStringEb>
   b6aee:	9b03      	ldr	r3, [sp, #12]
   b6af0:	9301      	str	r3, [sp, #4]
   b6af2:	4b2b      	ldr	r3, [pc, #172]	; (b6ba0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b6af4:	492b      	ldr	r1, [pc, #172]	; (b6ba4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b6af6:	9300      	str	r3, [sp, #0]
   b6af8:	aa08      	add	r2, sp, #32
   b6afa:	462b      	mov	r3, r5
   b6afc:	2001      	movs	r0, #1
   b6afe:	f7fd fdd1 	bl	b46a4 <log_message>
   b6b02:	a803      	add	r0, sp, #12
   b6b04:	f7fd fef2 	bl	b48ec <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b6b08:	231c      	movs	r3, #28
   b6b0a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b6b0e:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b6b12:	8a9a      	ldrh	r2, [r3, #20]
   b6b14:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b6b18:	8adb      	ldrh	r3, [r3, #22]
   b6b1a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b6b1e:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b6b20:	4a21      	ldr	r2, [pc, #132]	; (b6ba8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b6b22:	8818      	ldrh	r0, [r3, #0]
   b6b24:	9500      	str	r5, [sp, #0]
   b6b26:	a908      	add	r1, sp, #32
   b6b28:	f7fd fcfa 	bl	b4520 <hal_ble_gatt_client_discover_characteristics>
   b6b2c:	2800      	cmp	r0, #0
   b6b2e:	db30      	blt.n	b6b92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b6b30:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b6b32:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6b36:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b6b3a:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6b3c:	f1a4 0308 	sub.w	r3, r4, #8
   b6b40:	4599      	cmp	r9, r3
   b6b42:	d022      	beq.n	b6b8a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b6b44:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6b48:	89db      	ldrh	r3, [r3, #14]
   b6b4a:	2b00      	cmp	r3, #0
   b6b4c:	d0f5      	beq.n	b6b3a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b6b4e:	2210      	movs	r2, #16
   b6b50:	2100      	movs	r1, #0
   b6b52:	eb0d 0002 	add.w	r0, sp, r2
   b6b56:	9503      	str	r5, [sp, #12]
   b6b58:	f001 f838 	bl	b7bcc <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b6b5c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6b60:	89d9      	ldrh	r1, [r3, #14]
   b6b62:	683b      	ldr	r3, [r7, #0]
   b6b64:	aa03      	add	r2, sp, #12
   b6b66:	8818      	ldrh	r0, [r3, #0]
   b6b68:	9500      	str	r5, [sp, #0]
   b6b6a:	2313      	movs	r3, #19
   b6b6c:	f7fd fce2 	bl	b4534 <hal_ble_gatt_client_read>
                if (len > 0) {
   b6b70:	2800      	cmp	r0, #0
   b6b72:	d0e2      	beq.n	b6b3a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b6b74:	ab10      	add	r3, sp, #64	; 0x40
   b6b76:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b6b78:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b6b7a:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b6b7e:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b6b82:	303c      	adds	r0, #60	; 0x3c
   b6b84:	f7fd ff53 	bl	b4a2e <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6b88:	e7d7      	b.n	b6b3a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b6b8a:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b6b8e:	2201      	movs	r2, #1
   b6b90:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b6b92:	4642      	mov	r2, r8
   b6b94:	4639      	mov	r1, r7
   b6b96:	4630      	mov	r0, r6
   b6b98:	f7ff ff62 	bl	b6a60 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b6b9c:	e798      	b.n	b6ad0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b6b9e:	bf00      	nop
   b6ba0:	000b7fa6 	.word	0x000b7fa6
   b6ba4:	000b7e83 	.word	0x000b7e83
   b6ba8:	000b6d51 	.word	0x000b6d51

000b6bac <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6bac:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b6bae:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6bb0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6bb2:	b085      	sub	sp, #20
   b6bb4:	4606      	mov	r6, r0
   b6bb6:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b6bb8:	b92b      	cbnz	r3, b6bc6 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b6bba:	a801      	add	r0, sp, #4
   b6bbc:	f7ff fe0a 	bl	b67d4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b6bc0:	a801      	add	r0, sp, #4
   b6bc2:	f7fe fe05 	bl	b57d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b6bc6:	682b      	ldr	r3, [r5, #0]
   b6bc8:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b6bcc:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b6bd0:	42bc      	cmp	r4, r7
   b6bd2:	d009      	beq.n	b6be8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b6bd4:	4622      	mov	r2, r4
   b6bd6:	4629      	mov	r1, r5
   b6bd8:	a801      	add	r0, sp, #4
   b6bda:	f7ff ff6d 	bl	b6ab8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b6bde:	a801      	add	r0, sp, #4
   b6be0:	f7fe fe08 	bl	b57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b6be4:	3408      	adds	r4, #8
   b6be6:	e7f3      	b.n	b6bd0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b6be8:	4630      	mov	r0, r6
   b6bea:	4629      	mov	r1, r5
   b6bec:	f7ff fefa 	bl	b69e4 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b6bf0:	4630      	mov	r0, r6
   b6bf2:	b005      	add	sp, #20
   b6bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6bf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bfc:	4605      	mov	r5, r0
   b6bfe:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b6c00:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b6c02:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6c04:	460f      	mov	r7, r1
    return address_;
   b6c06:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6c08:	4698      	mov	r8, r3
    return address_;
   b6c0a:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b6c0c:	4b41      	ldr	r3, [pc, #260]	; (b6d14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b6c0e:	9304      	str	r3, [sp, #16]
    return address_;
   b6c10:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b6c12:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b6c14:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b6c18:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b6c1c:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b6c20:	f7fe fc82 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6c24:	4b3c      	ldr	r3, [pc, #240]	; (b6d18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b6c26:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6c28:	f7fe fc7e 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6c2c:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6c2e:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6c30:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6c32:	464a      	mov	r2, r9
   b6c34:	a804      	add	r0, sp, #16
   b6c36:	f7fd fc87 	bl	b4548 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b6c3a:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b6c3c:	4604      	mov	r4, r0
   b6c3e:	b138      	cbz	r0, b6c50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b6c40:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6c46:	801a      	strh	r2, [r3, #0]
}
   b6c48:	4620      	mov	r0, r4
   b6c4a:	b013      	add	sp, #76	; 0x4c
   b6c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b6c50:	4639      	mov	r1, r7
   b6c52:	4628      	mov	r0, r5
   b6c54:	f7fe fbec 	bl	b5430 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b6c58:	a803      	add	r0, sp, #12
   b6c5a:	f7fe f87d 	bl	b4d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6c5e:	f7fe fc63 	bl	b5528 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b6c62:	6807      	ldr	r7, [r0, #0]
   b6c64:	4629      	mov	r1, r5
   b6c66:	3718      	adds	r7, #24
   b6c68:	4630      	mov	r0, r6
   b6c6a:	f7fe fd98 	bl	b579e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6c6e:	4631      	mov	r1, r6
   b6c70:	4638      	mov	r0, r7
   b6c72:	f7ff f8fd 	bl	b5e70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6c76:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b6c78:	a80b      	add	r0, sp, #44	; 0x2c
   b6c7a:	f7fe fd9a 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c7e:	f04f 0920 	mov.w	r9, #32
   b6c82:	bb1f      	cbnz	r7, b6ccc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b6c84:	4632      	mov	r2, r6
   b6c86:	4b25      	ldr	r3, [pc, #148]	; (b6d1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b6c88:	4e25      	ldr	r6, [pc, #148]	; (b6d20 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b6c8a:	4926      	ldr	r1, [pc, #152]	; (b6d24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6c8c:	9300      	str	r3, [sp, #0]
   b6c8e:	2032      	movs	r0, #50	; 0x32
   b6c90:	4623      	mov	r3, r4
   b6c92:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6c96:	f7fd fd05 	bl	b46a4 <log_message>
   b6c9a:	6830      	ldr	r0, [r6, #0]
   b6c9c:	f7fd fc82 	bl	b45a4 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6ca0:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b6ca2:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6ca6:	4621      	mov	r1, r4
   b6ca8:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6caa:	4c1f      	ldr	r4, [pc, #124]	; (b6d28 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6cac:	f7fd fc24 	bl	b44f8 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b6cb0:	6830      	ldr	r0, [r6, #0]
   b6cb2:	f7fd fc6f 	bl	b4594 <os_mutex_recursive_lock>
        locked_ = true;
   b6cb6:	2301      	movs	r3, #1
   b6cb8:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b6cbc:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6cc2:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6cc4:	a803      	add	r0, sp, #12
   b6cc6:	f7fe f855 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
   b6cca:	e7bd      	b.n	b6c48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b6ccc:	a803      	add	r0, sp, #12
   b6cce:	f7fe f851 	bl	b4d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b6cd2:	4b16      	ldr	r3, [pc, #88]	; (b6d2c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b6cd4:	9300      	str	r3, [sp, #0]
   b6cd6:	4913      	ldr	r1, [pc, #76]	; (b6d24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6cd8:	4623      	mov	r3, r4
   b6cda:	4632      	mov	r2, r6
   b6cdc:	2001      	movs	r0, #1
   b6cde:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6ce2:	f7fd fcdf 	bl	b46a4 <log_message>
    if (automatic) {
   b6ce6:	f1b8 0f00 	cmp.w	r8, #0
   b6cea:	d0ad      	beq.n	b6c48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6cec:	4629      	mov	r1, r5
   b6cee:	4630      	mov	r0, r6
   b6cf0:	f7ff ff5c 	bl	b6bac <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b6cf4:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b6cf8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b6cfc:	42bd      	cmp	r5, r7
   b6cfe:	d005      	beq.n	b6d0c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b6d00:	4628      	mov	r0, r5
   b6d02:	2101      	movs	r1, #1
   b6d04:	f7fe fb0a 	bl	b531c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b6d08:	3508      	adds	r5, #8
   b6d0a:	e7f7      	b.n	b6cfc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6d0c:	4630      	mov	r0, r6
   b6d0e:	f7fe fd71 	bl	b57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6d12:	e799      	b.n	b6c48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b6d14:	00180003 	.word	0x00180003
   b6d18:	000b5f29 	.word	0x000b5f29
   b6d1c:	000b7fd8 	.word	0x000b7fd8
   b6d20:	2003e6f0 	.word	0x2003e6f0
   b6d24:	000b7e83 	.word	0x000b7e83
   b6d28:	fffffefc 	.word	0xfffffefc
   b6d2c:	000b7ff4 	.word	0x000b7ff4

000b6d30 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b6d30:	b513      	push	{r0, r1, r4, lr}
   b6d32:	4604      	mov	r4, r0
   b6d34:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b6d38:	f7fe fb46 	bl	b53c8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b6d3c:	9b00      	ldr	r3, [sp, #0]
   b6d3e:	9901      	ldr	r1, [sp, #4]
   b6d40:	2200      	movs	r2, #0
   b6d42:	4620      	mov	r0, r4
   b6d44:	f7ff ff58 	bl	b6bf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b6d48:	4620      	mov	r0, r4
   b6d4a:	b002      	add	sp, #8
   b6d4c:	bd10      	pop	{r4, pc}
	...

000b6d50 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b6d54:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6d56:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b6d58:	2600      	movs	r6, #0
   b6d5a:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b6d5e:	4b66      	ldr	r3, [pc, #408]	; (b6ef8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b6d60:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6d62:	4605      	mov	r5, r0
   b6d64:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b6d66:	4633      	mov	r3, r6
   b6d68:	4964      	ldr	r1, [pc, #400]	; (b6efc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b6d6a:	f8df 9194 	ldr.w	r9, [pc, #404]	; b6f00 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b6d6e:	f8df 818c 	ldr.w	r8, [pc, #396]	; b6efc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6d72:	f8df a190 	ldr.w	sl, [pc, #400]	; b6f04 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b6d76:	aa0c      	add	r2, sp, #48	; 0x30
   b6d78:	2001      	movs	r0, #1
   b6d7a:	f7fd fc93 	bl	b46a4 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b6d7e:	682b      	ldr	r3, [r5, #0]
   b6d80:	42b3      	cmp	r3, r6
   b6d82:	f240 80b5 	bls.w	b6ef0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b6d86:	a803      	add	r0, sp, #12
   b6d88:	f7fe faa2 	bl	b52d0 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b6d8c:	a805      	add	r0, sp, #20
   b6d8e:	f7fe faff 	bl	b5390 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b6d92:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6d96:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b6d98:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b6d9a:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6d9e:	445b      	add	r3, fp
        this->size = halHandles.size;
   b6da0:	8bd9      	ldrh	r1, [r3, #30]
   b6da2:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b6da4:	8c19      	ldrh	r1, [r3, #32]
   b6da6:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b6da8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b6daa:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b6dac:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b6dae:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b6db0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b6db2:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b6db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b6db6:	8253      	strh	r3, [r2, #18]
   b6db8:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b6dbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b6dc0:	429a      	cmp	r2, r3
   b6dc2:	d07d      	beq.n	b6ec0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b6dc4:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b6dc6:	8ac4      	ldrh	r4, [r0, #22]
   b6dc8:	428c      	cmp	r4, r1
   b6dca:	d377      	bcc.n	b6ebc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b6dcc:	8a84      	ldrh	r4, [r0, #20]
   b6dce:	428c      	cmp	r4, r1
   b6dd0:	d874      	bhi.n	b6ebc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6dd2:	6859      	ldr	r1, [r3, #4]
   b6dd4:	9005      	str	r0, [sp, #20]
   b6dd6:	a806      	add	r0, sp, #24
   b6dd8:	f7fd ff99 	bl	b4d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b6ddc:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b6de0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b6de4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6de8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b6dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dee:	f8dc 3000 	ldr.w	r3, [ip]
   b6df2:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b6df4:	892b      	ldrh	r3, [r5, #8]
   b6df6:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b6dfa:	686b      	ldr	r3, [r5, #4]
   b6dfc:	9c03      	ldr	r4, [sp, #12]
   b6dfe:	445b      	add	r3, fp
   b6e00:	7e5b      	ldrb	r3, [r3, #25]
   b6e02:	f013 0f02 	tst.w	r3, #2
   b6e06:	d16e      	bne.n	b6ee6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b6e08:	686b      	ldr	r3, [r5, #4]
   b6e0a:	445b      	add	r3, fp
   b6e0c:	7e5b      	ldrb	r3, [r3, #25]
   b6e0e:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b6e10:	bf42      	ittt	mi
   b6e12:	7923      	ldrbmi	r3, [r4, #4]
   b6e14:	f043 0304 	orrmi.w	r3, r3, #4
   b6e18:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b6e1a:	686b      	ldr	r3, [r5, #4]
   b6e1c:	445b      	add	r3, fp
   b6e1e:	7e5b      	ldrb	r3, [r3, #25]
   b6e20:	0719      	lsls	r1, r3, #28
   b6e22:	bf42      	ittt	mi
   b6e24:	7923      	ldrbmi	r3, [r4, #4]
   b6e26:	f043 0308 	orrmi.w	r3, r3, #8
   b6e2a:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b6e2c:	686b      	ldr	r3, [r5, #4]
   b6e2e:	445b      	add	r3, fp
   b6e30:	7e5b      	ldrb	r3, [r3, #25]
   b6e32:	06da      	lsls	r2, r3, #27
   b6e34:	bf42      	ittt	mi
   b6e36:	7923      	ldrbmi	r3, [r4, #4]
   b6e38:	f043 0310 	orrmi.w	r3, r3, #16
   b6e3c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b6e3e:	686b      	ldr	r3, [r5, #4]
   b6e40:	445b      	add	r3, fp
   b6e42:	aa07      	add	r2, sp, #28
   b6e44:	7e5b      	ldrb	r3, [r3, #25]
   b6e46:	069b      	lsls	r3, r3, #26
   b6e48:	bf42      	ittt	mi
   b6e4a:	7923      	ldrbmi	r3, [r4, #4]
   b6e4c:	f043 0320 	orrmi.w	r3, r3, #32
   b6e50:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b6e52:	686b      	ldr	r3, [r5, #4]
   b6e54:	449b      	add	fp, r3
   b6e56:	f10b 0304 	add.w	r3, fp, #4
   b6e5a:	4696      	mov	lr, r2
   b6e5c:	f10b 0b14 	add.w	fp, fp, #20
   b6e60:	6818      	ldr	r0, [r3, #0]
   b6e62:	6859      	ldr	r1, [r3, #4]
   b6e64:	4694      	mov	ip, r2
   b6e66:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6e6a:	3308      	adds	r3, #8
   b6e6c:	455b      	cmp	r3, fp
   b6e6e:	4662      	mov	r2, ip
   b6e70:	d1f6      	bne.n	b6e60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b6e72:	6818      	ldr	r0, [r3, #0]
   b6e74:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b6e78:	4671      	mov	r1, lr
   b6e7a:	a80c      	add	r0, sp, #48	; 0x30
   b6e7c:	f7fe f82e 	bl	b4edc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b6e80:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b6e84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6e88:	3414      	adds	r4, #20
   b6e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e8c:	f8dc 3000 	ldr.w	r3, [ip]
   b6e90:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b6e92:	a903      	add	r1, sp, #12
   b6e94:	a80c      	add	r0, sp, #48	; 0x30
   b6e96:	f7fe fc6a 	bl	b576e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6e9a:	a90c      	add	r1, sp, #48	; 0x30
   b6e9c:	f107 0018 	add.w	r0, r7, #24
   b6ea0:	f7ff fdb1 	bl	b6a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6ea4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6ea6:	a80d      	add	r0, sp, #52	; 0x34
   b6ea8:	f7fe fc83 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6eac:	b99c      	cbnz	r4, b6ed6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6eae:	2320      	movs	r3, #32
   b6eb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b6eb4:	f8cd a000 	str.w	sl, [sp]
   b6eb8:	4623      	mov	r3, r4
   b6eba:	e007      	b.n	b6ecc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b6ebc:	3308      	adds	r3, #8
   b6ebe:	e77f      	b.n	b6dc0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b6ec0:	2420      	movs	r4, #32
   b6ec2:	2300      	movs	r3, #0
   b6ec4:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b6ec8:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6ecc:	aa0c      	add	r2, sp, #48	; 0x30
   b6ece:	4641      	mov	r1, r8
   b6ed0:	2032      	movs	r0, #50	; 0x32
   b6ed2:	f7fd fbe7 	bl	b46a4 <log_message>
   b6ed6:	a806      	add	r0, sp, #24
   b6ed8:	f7fe fc6b 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6edc:	a804      	add	r0, sp, #16
   b6ede:	f7fe fc68 	bl	b57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b6ee2:	3601      	adds	r6, #1
   b6ee4:	e74b      	b.n	b6d7e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b6ee6:	7923      	ldrb	r3, [r4, #4]
   b6ee8:	f043 0302 	orr.w	r3, r3, #2
   b6eec:	7123      	strb	r3, [r4, #4]
   b6eee:	e78b      	b.n	b6e08 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b6ef0:	b015      	add	sp, #84	; 0x54
   b6ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6ef6:	bf00      	nop
   b6ef8:	000b8011 	.word	0x000b8011
   b6efc:	000b7e83 	.word	0x000b7e83
   b6f00:	000b802c 	.word	0x000b802c
   b6f04:	000b805b 	.word	0x000b805b

000b6f08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6f08:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f0c:	4604      	mov	r4, r0
   b6f0e:	460d      	mov	r5, r1
   b6f10:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6f12:	d914      	bls.n	b6f3e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6f14:	4290      	cmp	r0, r2
   b6f16:	d213      	bcs.n	b6f40 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6f18:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b6f1c:	1a75      	subs	r5, r6, r1
   b6f1e:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b6f22:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6f24:	42b7      	cmp	r7, r6
   b6f26:	d018      	beq.n	b6f5a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6f28:	b11c      	cbz	r4, b6f32 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6f2a:	4631      	mov	r1, r6
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	f7fe fe87 	bl	b5c40 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b6f32:	4630      	mov	r0, r6
   b6f34:	f7fe fb66 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b6f38:	3e24      	subs	r6, #36	; 0x24
   b6f3a:	3c24      	subs	r4, #36	; 0x24
   b6f3c:	e7f2      	b.n	b6f24 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6f3e:	d00c      	beq.n	b6f5a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6f40:	42b5      	cmp	r5, r6
   b6f42:	d00a      	beq.n	b6f5a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6f44:	b11c      	cbz	r4, b6f4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6f46:	4629      	mov	r1, r5
   b6f48:	4620      	mov	r0, r4
   b6f4a:	f7fe fe79 	bl	b5c40 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b6f4e:	4628      	mov	r0, r5
   b6f50:	f7fe fb58 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b6f54:	3524      	adds	r5, #36	; 0x24
   b6f56:	3424      	adds	r4, #36	; 0x24
   b6f58:	e7f2      	b.n	b6f40 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f5c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b6f5e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6f60:	4605      	mov	r5, r0
        if (n > 0) {
   b6f62:	dd13      	ble.n	b6f8c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6f64:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b6f66:	fb07 f006 	mul.w	r0, r7, r6
   b6f6a:	f7fd fc37 	bl	b47dc <malloc>
            if (!d) {
   b6f6e:	4604      	mov	r4, r0
   b6f70:	b158      	cbz	r0, b6f8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b6f72:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f76:	fb07 1202 	mla	r2, r7, r2, r1
   b6f7a:	f7ff ffc5 	bl	b6f08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f7e:	6828      	ldr	r0, [r5, #0]
   b6f80:	f7fd fc34 	bl	b47ec <free>
        data_ = d;
   b6f84:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6f86:	60ae      	str	r6, [r5, #8]
        return true;
   b6f88:	2001      	movs	r0, #1
    }
   b6f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6f8c:	2400      	movs	r4, #0
   b6f8e:	e7f6      	b.n	b6f7e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b6f90 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b6f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f94:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b6f96:	ad01      	add	r5, sp, #4
   b6f98:	4606      	mov	r6, r0
   b6f9a:	4628      	mov	r0, r5
   b6f9c:	460c      	mov	r4, r1
   b6f9e:	f7fd ff16 	bl	b4dce <_ZN8particle10BleAddressC1Ev>
   b6fa2:	a803      	add	r0, sp, #12
   b6fa4:	f7fe ff27 	bl	b5df6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b6fa8:	a806      	add	r0, sp, #24
   b6faa:	f7fe ff24 	bl	b5df6 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b6fae:	6930      	ldr	r0, [r6, #16]
   b6fb0:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b6fb2:	89f2      	ldrh	r2, [r6, #14]
   b6fb4:	ab13      	add	r3, sp, #76	; 0x4c
   b6fb6:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b6fb8:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b6fbc:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b6fbe:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b6fc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b6fc4:	a806      	add	r0, sp, #24
   b6fc6:	f7fe fe8a 	bl	b5cde <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b6fca:	89b2      	ldrh	r2, [r6, #12]
   b6fcc:	6871      	ldr	r1, [r6, #4]
   b6fce:	a803      	add	r0, sp, #12
   b6fd0:	f7fe fe85 	bl	b5cde <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b6fd4:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6fd8:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b6fda:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6fdc:	d003      	beq.n	b6fe6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b6fde:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6fe2:	429a      	cmp	r2, r3
   b6fe4:	db5c      	blt.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b6fe6:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b6fea:	2b7f      	cmp	r3, #127	; 0x7f
   b6fec:	d003      	beq.n	b6ff6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b6fee:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6ff2:	429a      	cmp	r2, r3
   b6ff4:	dc54      	bgt.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b6ff6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b6ffa:	4638      	mov	r0, r7
   b6ffc:	f7fe fce8 	bl	b59d0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b7000:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b7002:	2b00      	cmp	r3, #0
   b7004:	dd52      	ble.n	b70ac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b7006:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b7008:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b700c:	45b1      	cmp	r9, r6
   b700e:	d050      	beq.n	b70b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b7010:	4630      	mov	r0, r6
   b7012:	4629      	mov	r1, r5
   b7014:	f7fd fec7 	bl	b4da6 <_ZNK8particle10BleAddresseqERKS0_>
   b7018:	3608      	adds	r6, #8
   b701a:	4680      	mov	r8, r0
   b701c:	2800      	cmp	r0, #0
   b701e:	d0f5      	beq.n	b700c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b7020:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7022:	f7fd fbe3 	bl	b47ec <free>
        if (!delegator->filterByRssi(result) ||
   b7026:	f1b8 0f00 	cmp.w	r8, #0
   b702a:	d039      	beq.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b702c:	4629      	mov	r1, r5
   b702e:	4620      	mov	r0, r4
   b7030:	f7fe fc91 	bl	b5956 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b7034:	b3a0      	cbz	r0, b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b7036:	4629      	mov	r1, r5
   b7038:	4620      	mov	r0, r4
   b703a:	f7ff fa68 	bl	b650e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b703e:	4606      	mov	r6, r0
   b7040:	b370      	cbz	r0, b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b7042:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b7046:	4638      	mov	r0, r7
   b7048:	f7fe fd0d 	bl	b5a66 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b704c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b704e:	2b00      	cmp	r3, #0
   b7050:	dd12      	ble.n	b7078 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b7052:	a806      	add	r0, sp, #24
   b7054:	f7fe f8ea 	bl	b522c <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b7058:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b705a:	a803      	add	r0, sp, #12
   b705c:	f7fe f8e6 	bl	b522c <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b7060:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b7064:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b7068:	429a      	cmp	r2, r3
   b706a:	d025      	beq.n	b70b8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b706c:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7070:	4588      	cmp	r8, r1
   b7072:	d001      	beq.n	b7078 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b7074:	4288      	cmp	r0, r1
   b7076:	d1f7      	bne.n	b7068 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b7078:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b707a:	f7fd fbb7 	bl	b47ec <free>
              !delegator->filterByServiceUUID(result) ||
   b707e:	b17e      	cbz	r6, b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b7080:	4629      	mov	r1, r5
   b7082:	4620      	mov	r0, r4
   b7084:	f7fe fd24 	bl	b5ad0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b7088:	b150      	cbz	r0, b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b708a:	6a23      	ldr	r3, [r4, #32]
   b708c:	b1b3      	cbz	r3, b70bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b708e:	6963      	ldr	r3, [r4, #20]
   b7090:	9513      	str	r5, [sp, #76]	; 0x4c
   b7092:	3301      	adds	r3, #1
   b7094:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7096:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7098:	4639      	mov	r1, r7
   b709a:	f104 0018 	add.w	r0, r4, #24
   b709e:	4798      	blx	r3
            return;
   b70a0:	4628      	mov	r0, r5
   b70a2:	f7fe faaf 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
    }
   b70a6:	b01d      	add	sp, #116	; 0x74
   b70a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b70ac:	f04f 0801 	mov.w	r8, #1
   b70b0:	e7b6      	b.n	b7020 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b70b2:	f04f 0800 	mov.w	r8, #0
   b70b6:	e7b3      	b.n	b7020 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b70b8:	2600      	movs	r6, #0
   b70ba:	e7dd      	b.n	b7078 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b70bc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b70c0:	f1b8 0f00 	cmp.w	r8, #0
   b70c4:	d007      	beq.n	b70d6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b70c6:	6963      	ldr	r3, [r4, #20]
   b70c8:	3301      	adds	r3, #1
   b70ca:	6163      	str	r3, [r4, #20]
   b70cc:	4629      	mov	r1, r5
   b70ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b70d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b70d4:	e7e3      	b.n	b709e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b70d6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b70da:	f1bc 0f00 	cmp.w	ip, #0
   b70de:	d025      	beq.n	b712c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b70e0:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b70e2:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b70e4:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b70e6:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b70e8:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b70ea:	d8d9      	bhi.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b70ec:	2224      	movs	r2, #36	; 0x24
   b70ee:	4353      	muls	r3, r2
    address_ = addr.address_;
   b70f0:	462a      	mov	r2, r5
   b70f2:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b70f4:	3b24      	subs	r3, #36	; 0x24
   b70f6:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b70fa:	f84c 0003 	str.w	r0, [ip, r3]
   b70fe:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b7100:	f106 0008 	add.w	r0, r6, #8
   b7104:	a903      	add	r1, sp, #12
   b7106:	f7fe fdb2 	bl	b5c6e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b710a:	a906      	add	r1, sp, #24
   b710c:	f106 0014 	add.w	r0, r6, #20
   b7110:	f7fe fdad 	bl	b5c6e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b7114:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b7118:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b711c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b7120:	429a      	cmp	r2, r3
   b7122:	d3bd      	bcc.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b7124:	4640      	mov	r0, r8
   b7126:	f7fd f9dd 	bl	b44e4 <hal_ble_gap_stop_scan>
   b712a:	e7b9      	b.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b712c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7130:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b7134:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b7138:	a903      	add	r1, sp, #12
   b713a:	a80c      	add	r0, sp, #48	; 0x30
   b713c:	f7fe fd63 	bl	b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7140:	a906      	add	r1, sp, #24
   b7142:	a80f      	add	r0, sp, #60	; 0x3c
   b7144:	f7fe fd5f 	bl	b5c06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b7148:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b714c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b7150:	4641      	mov	r1, r8
   b7152:	4638      	mov	r0, r7
   b7154:	6866      	ldr	r6, [r4, #4]
   b7156:	f7fe fd73 	bl	b5c40 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b715a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b715e:	4299      	cmp	r1, r3
   b7160:	da10      	bge.n	b7184 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b7162:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7164:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b7166:	2224      	movs	r2, #36	; 0x24
   b7168:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b716c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b7170:	fb02 3201 	mla	r2, r2, r1, r3
   b7174:	4631      	mov	r1, r6
   b7176:	f7ff fec7 	bl	b6f08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b717a:	b986      	cbnz	r6, b719e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b717c:	6863      	ldr	r3, [r4, #4]
   b717e:	3301      	adds	r3, #1
   b7180:	6063      	str	r3, [r4, #4]
    return true;
   b7182:	e005      	b.n	b7190 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7184:	3101      	adds	r1, #1
   b7186:	4620      	mov	r0, r4
   b7188:	f7ff fee8 	bl	b6f5c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b718c:	2800      	cmp	r0, #0
   b718e:	d1e8      	bne.n	b7162 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b7190:	4638      	mov	r0, r7
   b7192:	f7fe fa37 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b7196:	4640      	mov	r0, r8
   b7198:	f7fe fa34 	bl	b5604 <_ZN8particle13BleScanResultD1Ev>
   b719c:	e780      	b.n	b70a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b719e:	4639      	mov	r1, r7
   b71a0:	4630      	mov	r0, r6
   b71a2:	f7fe fd4d 	bl	b5c40 <_ZN8particle13BleScanResultC1EOS0_>
   b71a6:	e7e9      	b.n	b717c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b71a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b71a8:	4802      	ldr	r0, [pc, #8]	; (b71b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b71aa:	2300      	movs	r3, #0
   b71ac:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b71ae:	f7fd b9e9 	b.w	b4584 <os_mutex_recursive_create>
   b71b2:	bf00      	nop
   b71b4:	2003e6f0 	.word	0x2003e6f0

000b71b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b71b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71ba:	4606      	mov	r6, r0
   b71bc:	460d      	mov	r5, r1
  size_t n = 0;
   b71be:	188f      	adds	r7, r1, r2
   b71c0:	2400      	movs	r4, #0
  while (size--) {
   b71c2:	42bd      	cmp	r5, r7
   b71c4:	d00c      	beq.n	b71e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b71c6:	6833      	ldr	r3, [r6, #0]
   b71c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b71cc:	689b      	ldr	r3, [r3, #8]
   b71ce:	4630      	mov	r0, r6
   b71d0:	4798      	blx	r3
     if (chunk>=0)
   b71d2:	1e03      	subs	r3, r0, #0
   b71d4:	db01      	blt.n	b71da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b71d6:	441c      	add	r4, r3
  while (size--) {
   b71d8:	e7f3      	b.n	b71c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b71da:	2c00      	cmp	r4, #0
   b71dc:	bf08      	it	eq
   b71de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b71e0:	4620      	mov	r0, r4
   b71e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b71e4:	b513      	push	{r0, r1, r4, lr}
   b71e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b71e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b71ea:	b159      	cbz	r1, b7204 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b71ec:	9101      	str	r1, [sp, #4]
   b71ee:	f000 fd35 	bl	b7c5c <strlen>
   b71f2:	6823      	ldr	r3, [r4, #0]
   b71f4:	9901      	ldr	r1, [sp, #4]
   b71f6:	68db      	ldr	r3, [r3, #12]
   b71f8:	4602      	mov	r2, r0
   b71fa:	4620      	mov	r0, r4
    }
   b71fc:	b002      	add	sp, #8
   b71fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7202:	4718      	bx	r3
    }
   b7204:	b002      	add	sp, #8
   b7206:	bd10      	pop	{r4, pc}

000b7208 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7208:	6803      	ldr	r3, [r0, #0]
   b720a:	689b      	ldr	r3, [r3, #8]
   b720c:	4718      	bx	r3

000b720e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b720e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7210:	210d      	movs	r1, #13
{
   b7212:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7214:	f7ff fff8 	bl	b7208 <_ZN5Print5printEc>
  n += print('\n');
   b7218:	210a      	movs	r1, #10
  size_t n = print('\r');
   b721a:	4604      	mov	r4, r0
  n += print('\n');
   b721c:	4628      	mov	r0, r5
   b721e:	f7ff fff3 	bl	b7208 <_ZN5Print5printEc>
  return n;
}
   b7222:	4420      	add	r0, r4
   b7224:	bd38      	pop	{r3, r4, r5, pc}

000b7226 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7226:	b530      	push	{r4, r5, lr}
   b7228:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b722a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b722c:	2a01      	cmp	r2, #1
  *str = '\0';
   b722e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7232:	bf98      	it	ls
   b7234:	220a      	movls	r2, #10
   b7236:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7238:	460d      	mov	r5, r1
   b723a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b723e:	fb01 5312 	mls	r3, r1, r2, r5
   b7242:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7246:	2b09      	cmp	r3, #9
   b7248:	bf94      	ite	ls
   b724a:	3330      	addls	r3, #48	; 0x30
   b724c:	3337      	addhi	r3, #55	; 0x37
   b724e:	b2db      	uxtb	r3, r3
  } while(n);
   b7250:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7252:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7256:	d9ef      	bls.n	b7238 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7258:	4621      	mov	r1, r4
   b725a:	f7ff ffc3 	bl	b71e4 <_ZN5Print5writeEPKc>
}
   b725e:	b00b      	add	sp, #44	; 0x2c
   b7260:	bd30      	pop	{r4, r5, pc}

000b7262 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7266:	b086      	sub	sp, #24
   b7268:	af00      	add	r7, sp, #0
   b726a:	4605      	mov	r5, r0
   b726c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b726e:	1d38      	adds	r0, r7, #4
   b7270:	2114      	movs	r1, #20
{
   b7272:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7274:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7276:	f7fd fac9 	bl	b480c <vsnprintf>

    if (n<bufsize)
   b727a:	2813      	cmp	r0, #19
   b727c:	d80e      	bhi.n	b729c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b727e:	1d39      	adds	r1, r7, #4
   b7280:	4628      	mov	r0, r5
   b7282:	f7ff ffaf 	bl	b71e4 <_ZN5Print5writeEPKc>
   b7286:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7288:	b11e      	cbz	r6, b7292 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b728a:	4628      	mov	r0, r5
   b728c:	f7ff ffbf 	bl	b720e <_ZN5Print7printlnEv>
   b7290:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7292:	4620      	mov	r0, r4
   b7294:	3718      	adds	r7, #24
   b7296:	46bd      	mov	sp, r7
   b7298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b729c:	f100 0308 	add.w	r3, r0, #8
   b72a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b72a4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b72a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b72aa:	4622      	mov	r2, r4
   b72ac:	1c41      	adds	r1, r0, #1
   b72ae:	683b      	ldr	r3, [r7, #0]
   b72b0:	4668      	mov	r0, sp
   b72b2:	f7fd faab 	bl	b480c <vsnprintf>
  return write(str);
   b72b6:	4669      	mov	r1, sp
   b72b8:	4628      	mov	r0, r5
   b72ba:	f7ff ff93 	bl	b71e4 <_ZN5Print5writeEPKc>
   b72be:	4604      	mov	r4, r0
   b72c0:	46c5      	mov	sp, r8
   b72c2:	e7e1      	b.n	b7288 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b72c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b72c4:	4b01      	ldr	r3, [pc, #4]	; (b72cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b72c6:	4a02      	ldr	r2, [pc, #8]	; (b72d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b72c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b72ca:	4770      	bx	lr
   b72cc:	2003e6f8 	.word	0x2003e6f8
   b72d0:	000b80fa 	.word	0x000b80fa

000b72d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b72d4:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b72d6:	681a      	ldr	r2, [r3, #0]
   b72d8:	4b02      	ldr	r3, [pc, #8]	; (b72e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b72da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b72dc:	4770      	bx	lr
   b72de:	bf00      	nop
   b72e0:	2003e498 	.word	0x2003e498
   b72e4:	2003e6fc 	.word	0x2003e6fc

000b72e8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b72e8:	4b01      	ldr	r3, [pc, #4]	; (b72f0 <_GLOBAL__sub_I_RGB+0x8>)
   b72ea:	2200      	movs	r2, #0
   b72ec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b72ee:	4770      	bx	lr
   b72f0:	2003e700 	.word	0x2003e700

000b72f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b72f4:	4b01      	ldr	r3, [pc, #4]	; (b72fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b72f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b72f8:	4770      	bx	lr
   b72fa:	bf00      	nop
   b72fc:	2003e49c 	.word	0x2003e49c

000b7300 <serialEventRun>:
{
   b7300:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7302:	4b0b      	ldr	r3, [pc, #44]	; (b7330 <serialEventRun+0x30>)
   b7304:	b143      	cbz	r3, b7318 <serialEventRun+0x18>
   b7306:	f000 f963 	bl	b75d0 <_Z16_fetch_usbserialv>
   b730a:	6803      	ldr	r3, [r0, #0]
   b730c:	691b      	ldr	r3, [r3, #16]
   b730e:	4798      	blx	r3
   b7310:	2800      	cmp	r0, #0
   b7312:	dd01      	ble.n	b7318 <serialEventRun+0x18>
        serialEvent();
   b7314:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7318:	4b06      	ldr	r3, [pc, #24]	; (b7334 <serialEventRun+0x34>)
   b731a:	b143      	cbz	r3, b732e <serialEventRun+0x2e>
   b731c:	f000 fadc 	bl	b78d8 <_Z22__fetch_global_Serial1v>
   b7320:	6803      	ldr	r3, [r0, #0]
   b7322:	691b      	ldr	r3, [r3, #16]
   b7324:	4798      	blx	r3
   b7326:	2800      	cmp	r0, #0
   b7328:	dd01      	ble.n	b732e <serialEventRun+0x2e>
        serialEvent1();
   b732a:	f3af 8000 	nop.w
}
   b732e:	bd08      	pop	{r3, pc}
	...

000b7338 <_post_loop>:
{
   b7338:	b508      	push	{r3, lr}
	serialEventRun();
   b733a:	f7ff ffe1 	bl	b7300 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b733e:	f7fd f8a1 	bl	b4484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7342:	4b01      	ldr	r3, [pc, #4]	; (b7348 <_post_loop+0x10>)
   b7344:	6018      	str	r0, [r3, #0]
}
   b7346:	bd08      	pop	{r3, pc}
   b7348:	2003e758 	.word	0x2003e758

000b734c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b734c:	4805      	ldr	r0, [pc, #20]	; (b7364 <_Z33system_initialize_user_backup_ramv+0x18>)
   b734e:	4a06      	ldr	r2, [pc, #24]	; (b7368 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7350:	4906      	ldr	r1, [pc, #24]	; (b736c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7352:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7354:	1a12      	subs	r2, r2, r0
   b7356:	f000 fc11 	bl	b7b7c <memcpy>
    __backup_sram_signature = signature;
   b735a:	4b05      	ldr	r3, [pc, #20]	; (b7370 <_Z33system_initialize_user_backup_ramv+0x24>)
   b735c:	4a05      	ldr	r2, [pc, #20]	; (b7374 <_Z33system_initialize_user_backup_ramv+0x28>)
   b735e:	601a      	str	r2, [r3, #0]
}
   b7360:	bd08      	pop	{r3, pc}
   b7362:	bf00      	nop
   b7364:	2003f400 	.word	0x2003f400
   b7368:	2003f404 	.word	0x2003f404
   b736c:	000b83e4 	.word	0x000b83e4
   b7370:	2003f400 	.word	0x2003f400
   b7374:	9a271c1e 	.word	0x9a271c1e

000b7378 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7378:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b737a:	2300      	movs	r3, #0
   b737c:	9300      	str	r3, [sp, #0]
   b737e:	461a      	mov	r2, r3
   b7380:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7384:	f7fd f9b0 	bl	b46e8 <system_ctrl_set_result>
}
   b7388:	b003      	add	sp, #12
   b738a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7390 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7390:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7392:	8843      	ldrh	r3, [r0, #2]
   b7394:	2b0a      	cmp	r3, #10
   b7396:	d008      	beq.n	b73aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7398:	2b50      	cmp	r3, #80	; 0x50
   b739a:	d10b      	bne.n	b73b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b739c:	4b09      	ldr	r3, [pc, #36]	; (b73c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b739e:	681b      	ldr	r3, [r3, #0]
   b73a0:	b14b      	cbz	r3, b73b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b73a2:	b003      	add	sp, #12
   b73a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b73a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b73aa:	f7ff ffe5 	bl	b7378 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b73ae:	b003      	add	sp, #12
   b73b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b73b4:	2300      	movs	r3, #0
   b73b6:	9300      	str	r3, [sp, #0]
   b73b8:	461a      	mov	r2, r3
   b73ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b73be:	f7fd f993 	bl	b46e8 <system_ctrl_set_result>
}
   b73c2:	e7f4      	b.n	b73ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b73c4:	2003e714 	.word	0x2003e714

000b73c8 <module_user_init_hook>:
{
   b73c8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b73ca:	4812      	ldr	r0, [pc, #72]	; (b7414 <module_user_init_hook+0x4c>)
   b73cc:	2100      	movs	r1, #0
   b73ce:	f7fd fa35 	bl	b483c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b73d2:	4b11      	ldr	r3, [pc, #68]	; (b7418 <module_user_init_hook+0x50>)
   b73d4:	681a      	ldr	r2, [r3, #0]
   b73d6:	4b11      	ldr	r3, [pc, #68]	; (b741c <module_user_init_hook+0x54>)
   b73d8:	429a      	cmp	r2, r3
   b73da:	4b11      	ldr	r3, [pc, #68]	; (b7420 <module_user_init_hook+0x58>)
   b73dc:	bf0c      	ite	eq
   b73de:	2201      	moveq	r2, #1
   b73e0:	2200      	movne	r2, #0
   b73e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b73e4:	d001      	beq.n	b73ea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b73e6:	f7ff ffb1 	bl	b734c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b73ea:	f7fd f83b 	bl	b4464 <HAL_RNG_GetRandomNumber>
   b73ee:	4604      	mov	r4, r0
    srand(seed);
   b73f0:	f000 fbf4 	bl	b7bdc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b73f4:	4b0b      	ldr	r3, [pc, #44]	; (b7424 <module_user_init_hook+0x5c>)
   b73f6:	b113      	cbz	r3, b73fe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b73f8:	4620      	mov	r0, r4
   b73fa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b73fe:	2100      	movs	r1, #0
   b7400:	4808      	ldr	r0, [pc, #32]	; (b7424 <module_user_init_hook+0x5c>)
   b7402:	f7fd f9e3 	bl	b47cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b740a:	4807      	ldr	r0, [pc, #28]	; (b7428 <module_user_init_hook+0x60>)
   b740c:	2100      	movs	r1, #0
   b740e:	f7fd b961 	b.w	b46d4 <system_ctrl_set_app_request_handler>
   b7412:	bf00      	nop
   b7414:	000b72f5 	.word	0x000b72f5
   b7418:	2003f400 	.word	0x2003f400
   b741c:	9a271c1e 	.word	0x9a271c1e
   b7420:	2003e710 	.word	0x2003e710
   b7424:	00000000 	.word	0x00000000
   b7428:	000b7391 	.word	0x000b7391

000b742c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b742c:	4770      	bx	lr

000b742e <_ZN9IPAddressD0Ev>:
   b742e:	b510      	push	{r4, lr}
   b7430:	2118      	movs	r1, #24
   b7432:	4604      	mov	r4, r0
   b7434:	f7fc fe31 	bl	b409a <_ZdlPvj>
   b7438:	4620      	mov	r0, r4
   b743a:	bd10      	pop	{r4, pc}

000b743c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b743c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b743e:	7d03      	ldrb	r3, [r0, #20]
   b7440:	2b06      	cmp	r3, #6
{
   b7442:	b08d      	sub	sp, #52	; 0x34
   b7444:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7446:	f100 0704 	add.w	r7, r0, #4
   b744a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b744e:	d012      	beq.n	b7476 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7450:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7454:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7458:	220a      	movs	r2, #10
   b745a:	4630      	mov	r0, r6
   b745c:	f7ff fee3 	bl	b7226 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7460:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7462:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7464:	d019      	beq.n	b749a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7466:	2c00      	cmp	r4, #0
   b7468:	d0f4      	beq.n	b7454 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b746a:	212e      	movs	r1, #46	; 0x2e
   b746c:	4630      	mov	r0, r6
   b746e:	f7ff fecb 	bl	b7208 <_ZN5Print5printEc>
   b7472:	4404      	add	r4, r0
   b7474:	e7ee      	b.n	b7454 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7476:	232f      	movs	r3, #47	; 0x2f
   b7478:	466a      	mov	r2, sp
   b747a:	4639      	mov	r1, r7
   b747c:	200a      	movs	r0, #10
		buf[0] = 0;
   b747e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7482:	f7fd f897 	bl	b45b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7486:	4668      	mov	r0, sp
   b7488:	f000 fbe8 	bl	b7c5c <strlen>
   b748c:	6833      	ldr	r3, [r6, #0]
   b748e:	4602      	mov	r2, r0
   b7490:	68db      	ldr	r3, [r3, #12]
   b7492:	4669      	mov	r1, sp
   b7494:	4630      	mov	r0, r6
   b7496:	4798      	blx	r3
   b7498:	4604      	mov	r4, r0
    }
    return n;
}
   b749a:	4620      	mov	r0, r4
   b749c:	b00d      	add	sp, #52	; 0x34
   b749e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b74a0:	b510      	push	{r4, lr}
   b74a2:	4b05      	ldr	r3, [pc, #20]	; (b74b8 <_ZN9IPAddressC1Ev+0x18>)
   b74a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b74a6:	2211      	movs	r2, #17
   b74a8:	f840 3b04 	str.w	r3, [r0], #4
   b74ac:	2100      	movs	r1, #0
   b74ae:	f000 fb8d 	bl	b7bcc <memset>
}
   b74b2:	4620      	mov	r0, r4
   b74b4:	bd10      	pop	{r4, pc}
   b74b6:	bf00      	nop
   b74b8:	000b8124 	.word	0x000b8124

000b74bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b74bc:	4603      	mov	r3, r0
   b74be:	4a07      	ldr	r2, [pc, #28]	; (b74dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b74c0:	b510      	push	{r4, lr}
   b74c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b74c6:	f101 0210 	add.w	r2, r1, #16
   b74ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b74ce:	f843 4b04 	str.w	r4, [r3], #4
   b74d2:	4291      	cmp	r1, r2
   b74d4:	d1f9      	bne.n	b74ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b74d6:	780a      	ldrb	r2, [r1, #0]
   b74d8:	701a      	strb	r2, [r3, #0]
}
   b74da:	bd10      	pop	{r4, pc}
   b74dc:	000b8124 	.word	0x000b8124

000b74e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b74e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b74e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b74e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b74ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b74ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b74f2:	2304      	movs	r3, #4
   b74f4:	6041      	str	r1, [r0, #4]
   b74f6:	7503      	strb	r3, [r0, #20]
}
   b74f8:	bd10      	pop	{r4, pc}
	...

000b74fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b74fc:	b507      	push	{r0, r1, r2, lr}
   b74fe:	4b06      	ldr	r3, [pc, #24]	; (b7518 <_ZN9IPAddressC1EPKh+0x1c>)
   b7500:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7502:	78cb      	ldrb	r3, [r1, #3]
   b7504:	9300      	str	r3, [sp, #0]
   b7506:	788b      	ldrb	r3, [r1, #2]
   b7508:	784a      	ldrb	r2, [r1, #1]
   b750a:	7809      	ldrb	r1, [r1, #0]
   b750c:	f7ff ffe8 	bl	b74e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7510:	b003      	add	sp, #12
   b7512:	f85d fb04 	ldr.w	pc, [sp], #4
   b7516:	bf00      	nop
   b7518:	000b8124 	.word	0x000b8124

000b751c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b751c:	7441      	strb	r1, [r0, #17]
}
   b751e:	4770      	bx	lr

000b7520 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7520:	4770      	bx	lr

000b7522 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7522:	4770      	bx	lr

000b7524 <_ZN9USBSerial4readEv>:
{
   b7524:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7526:	2100      	movs	r1, #0
   b7528:	7c00      	ldrb	r0, [r0, #16]
   b752a:	f7fd f89b 	bl	b4664 <HAL_USB_USART_Receive_Data>
}
   b752e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7532:	bd08      	pop	{r3, pc}

000b7534 <_ZN9USBSerial4peekEv>:
{
   b7534:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7536:	2101      	movs	r1, #1
   b7538:	7c00      	ldrb	r0, [r0, #16]
   b753a:	f7fd f893 	bl	b4664 <HAL_USB_USART_Receive_Data>
}
   b753e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7542:	bd08      	pop	{r3, pc}

000b7544 <_ZN9USBSerial17availableForWriteEv>:
{
   b7544:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7546:	7c00      	ldrb	r0, [r0, #16]
   b7548:	f7fd f884 	bl	b4654 <HAL_USB_USART_Available_Data_For_Write>
}
   b754c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7550:	bd08      	pop	{r3, pc}

000b7552 <_ZN9USBSerial9availableEv>:
{
   b7552:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7554:	7c00      	ldrb	r0, [r0, #16]
   b7556:	f7fd f875 	bl	b4644 <HAL_USB_USART_Available_Data>
}
   b755a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b755e:	bd08      	pop	{r3, pc}

000b7560 <_ZN9USBSerial5writeEh>:
{
   b7560:	b513      	push	{r0, r1, r4, lr}
   b7562:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7564:	7c00      	ldrb	r0, [r0, #16]
{
   b7566:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7568:	f7fd f874 	bl	b4654 <HAL_USB_USART_Available_Data_For_Write>
   b756c:	2800      	cmp	r0, #0
   b756e:	9901      	ldr	r1, [sp, #4]
   b7570:	dc01      	bgt.n	b7576 <_ZN9USBSerial5writeEh+0x16>
   b7572:	7c60      	ldrb	r0, [r4, #17]
   b7574:	b120      	cbz	r0, b7580 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7576:	7c20      	ldrb	r0, [r4, #16]
   b7578:	f7fd f87c 	bl	b4674 <HAL_USB_USART_Send_Data>
   b757c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7580:	b002      	add	sp, #8
   b7582:	bd10      	pop	{r4, pc}

000b7584 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7584:	7c00      	ldrb	r0, [r0, #16]
   b7586:	f7fd b87d 	b.w	b4684 <HAL_USB_USART_Flush_Data>

000b758a <_ZN9USBSerialD0Ev>:
   b758a:	b510      	push	{r4, lr}
   b758c:	2114      	movs	r1, #20
   b758e:	4604      	mov	r4, r0
   b7590:	f7fc fd83 	bl	b409a <_ZdlPvj>
   b7594:	4620      	mov	r0, r4
   b7596:	bd10      	pop	{r4, pc}

000b7598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7598:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b759a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b759e:	4604      	mov	r4, r0
   b75a0:	4608      	mov	r0, r1
   b75a2:	2100      	movs	r1, #0
   b75a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b75a8:	4b04      	ldr	r3, [pc, #16]	; (b75bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b75aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b75ac:	2301      	movs	r3, #1
  _serial = serial;
   b75ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b75b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b75b2:	4611      	mov	r1, r2
   b75b4:	f7fd f83e 	bl	b4634 <HAL_USB_USART_Init>
}
   b75b8:	4620      	mov	r0, r4
   b75ba:	bd10      	pop	{r4, pc}
   b75bc:	000b8138 	.word	0x000b8138

000b75c0 <_Z19acquireSerialBufferv>:
{
   b75c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b75c2:	2214      	movs	r2, #20
{
   b75c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b75c6:	2100      	movs	r1, #0
   b75c8:	f000 fb00 	bl	b7bcc <memset>
}
   b75cc:	4620      	mov	r0, r4
   b75ce:	bd10      	pop	{r4, pc}

000b75d0 <_Z16_fetch_usbserialv>:
{
   b75d0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75d2:	4c0f      	ldr	r4, [pc, #60]	; (b7610 <_Z16_fetch_usbserialv+0x40>)
{
   b75d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b75d6:	a803      	add	r0, sp, #12
   b75d8:	f7ff fff2 	bl	b75c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75dc:	7821      	ldrb	r1, [r4, #0]
   b75de:	f3bf 8f5b 	dmb	ish
   b75e2:	f011 0101 	ands.w	r1, r1, #1
   b75e6:	d10f      	bne.n	b7608 <_Z16_fetch_usbserialv+0x38>
   b75e8:	4620      	mov	r0, r4
   b75ea:	9101      	str	r1, [sp, #4]
   b75ec:	f7fc fd57 	bl	b409e <__cxa_guard_acquire>
   b75f0:	9901      	ldr	r1, [sp, #4]
   b75f2:	b148      	cbz	r0, b7608 <_Z16_fetch_usbserialv+0x38>
   b75f4:	aa03      	add	r2, sp, #12
   b75f6:	4807      	ldr	r0, [pc, #28]	; (b7614 <_Z16_fetch_usbserialv+0x44>)
   b75f8:	f7ff ffce 	bl	b7598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b75fc:	4620      	mov	r0, r4
   b75fe:	f7fc fd53 	bl	b40a8 <__cxa_guard_release>
   b7602:	4805      	ldr	r0, [pc, #20]	; (b7618 <_Z16_fetch_usbserialv+0x48>)
   b7604:	f000 faa4 	bl	b7b50 <atexit>
	return _usbserial;
}
   b7608:	4802      	ldr	r0, [pc, #8]	; (b7614 <_Z16_fetch_usbserialv+0x44>)
   b760a:	b008      	add	sp, #32
   b760c:	bd10      	pop	{r4, pc}
   b760e:	bf00      	nop
   b7610:	2003e718 	.word	0x2003e718
   b7614:	2003e71c 	.word	0x2003e71c
   b7618:	000b7521 	.word	0x000b7521

000b761c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b761c:	4770      	bx	lr

000b761e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b761e:	7441      	strb	r1, [r0, #17]
}
   b7620:	4770      	bx	lr

000b7622 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7622:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7624:	7c00      	ldrb	r0, [r0, #16]
   b7626:	f7fc fff5 	bl	b4614 <hal_usart_available_data_for_write>
}
   b762a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b762e:	bd08      	pop	{r3, pc}

000b7630 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7630:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7632:	7c00      	ldrb	r0, [r0, #16]
   b7634:	f7fc ffce 	bl	b45d4 <hal_usart_available>
}
   b7638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b763c:	bd08      	pop	{r3, pc}

000b763e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b763e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7640:	7c00      	ldrb	r0, [r0, #16]
   b7642:	f7fc ffd7 	bl	b45f4 <hal_usart_peek>
}
   b7646:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b764a:	bd08      	pop	{r3, pc}

000b764c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b764c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b764e:	7c00      	ldrb	r0, [r0, #16]
   b7650:	f7fc ffc8 	bl	b45e4 <hal_usart_read>
}
   b7654:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7658:	bd08      	pop	{r3, pc}

000b765a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b765a:	7c00      	ldrb	r0, [r0, #16]
   b765c:	f7fc bfd2 	b.w	b4604 <hal_usart_flush>

000b7660 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7660:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7662:	7c45      	ldrb	r5, [r0, #17]
{
   b7664:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7666:	b12d      	cbz	r5, b7674 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7668:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b766a:	b003      	add	sp, #12
   b766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7670:	f7fc bfa8 	b.w	b45c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7674:	7c00      	ldrb	r0, [r0, #16]
   b7676:	9101      	str	r1, [sp, #4]
   b7678:	f7fc ffcc 	bl	b4614 <hal_usart_available_data_for_write>
   b767c:	2800      	cmp	r0, #0
   b767e:	9901      	ldr	r1, [sp, #4]
   b7680:	dcf2      	bgt.n	b7668 <_ZN11USARTSerial5writeEh+0x8>
}
   b7682:	4628      	mov	r0, r5
   b7684:	b003      	add	sp, #12
   b7686:	bd30      	pop	{r4, r5, pc}

000b7688 <_ZN11USARTSerialD0Ev>:
   b7688:	b510      	push	{r4, lr}
   b768a:	2114      	movs	r1, #20
   b768c:	4604      	mov	r4, r0
   b768e:	f7fc fd04 	bl	b409a <_ZdlPvj>
   b7692:	4620      	mov	r0, r4
   b7694:	bd10      	pop	{r4, pc}
	...

000b7698 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7698:	b510      	push	{r4, lr}
   b769a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b769e:	4604      	mov	r4, r0
   b76a0:	4608      	mov	r0, r1
   b76a2:	4611      	mov	r1, r2
   b76a4:	2200      	movs	r2, #0
   b76a6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b76aa:	4b04      	ldr	r3, [pc, #16]	; (b76bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b76ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b76ae:	2301      	movs	r3, #1
  _serial = serial;
   b76b0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b76b2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b76b4:	f7fc ffb6 	bl	b4624 <hal_usart_init_ex>
}
   b76b8:	4620      	mov	r0, r4
   b76ba:	bd10      	pop	{r4, pc}
   b76bc:	000b8168 	.word	0x000b8168

000b76c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b76c0:	2200      	movs	r2, #0
   b76c2:	6840      	ldr	r0, [r0, #4]
   b76c4:	4611      	mov	r1, r2
   b76c6:	f7fd b831 	b.w	b472c <network_ready>

000b76ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b76ca:	2200      	movs	r2, #0
   b76cc:	6840      	ldr	r0, [r0, #4]
   b76ce:	4611      	mov	r1, r2
   b76d0:	f7fd b84c 	b.w	b476c <network_listening>

000b76d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b76d4:	2200      	movs	r2, #0
   b76d6:	6840      	ldr	r0, [r0, #4]
   b76d8:	4611      	mov	r1, r2
   b76da:	f7fd b857 	b.w	b478c <network_get_listen_timeout>

000b76de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b76de:	6840      	ldr	r0, [r0, #4]
   b76e0:	2200      	movs	r2, #0
   b76e2:	f7fd b84b 	b.w	b477c <network_set_listen_timeout>

000b76e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b76e6:	6840      	ldr	r0, [r0, #4]
   b76e8:	2200      	movs	r2, #0
   b76ea:	f081 0101 	eor.w	r1, r1, #1
   b76ee:	f7fd b835 	b.w	b475c <network_listen>

000b76f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b76f2:	2300      	movs	r3, #0
   b76f4:	6840      	ldr	r0, [r0, #4]
   b76f6:	461a      	mov	r2, r3
   b76f8:	4619      	mov	r1, r3
   b76fa:	f7fd b827 	b.w	b474c <network_off>

000b76fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76fe:	2300      	movs	r3, #0
   b7700:	6840      	ldr	r0, [r0, #4]
   b7702:	461a      	mov	r2, r3
   b7704:	4619      	mov	r1, r3
   b7706:	f7fd b819 	b.w	b473c <network_on>

000b770a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b770a:	2200      	movs	r2, #0
   b770c:	6840      	ldr	r0, [r0, #4]
   b770e:	4611      	mov	r1, r2
   b7710:	f7fc bffc 	b.w	b470c <network_connecting>

000b7714 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7714:	6840      	ldr	r0, [r0, #4]
   b7716:	2200      	movs	r2, #0
   b7718:	2102      	movs	r1, #2
   b771a:	f7fc bfff 	b.w	b471c <network_disconnect>

000b771e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b771e:	2300      	movs	r3, #0
   b7720:	6840      	ldr	r0, [r0, #4]
   b7722:	461a      	mov	r2, r3
   b7724:	f7fc bfea 	b.w	b46fc <network_connect>

000b7728 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7728:	4b02      	ldr	r3, [pc, #8]	; (b7734 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b772a:	2204      	movs	r2, #4
   b772c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b772e:	4a02      	ldr	r2, [pc, #8]	; (b7738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7730:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7732:	4770      	bx	lr
   b7734:	2003e730 	.word	0x2003e730
   b7738:	000b8198 	.word	0x000b8198

000b773c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b773c:	2300      	movs	r3, #0
   b773e:	6840      	ldr	r0, [r0, #4]
   b7740:	461a      	mov	r2, r3
   b7742:	f7fc bfdb 	b.w	b46fc <network_connect>

000b7746 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7746:	6840      	ldr	r0, [r0, #4]
   b7748:	2200      	movs	r2, #0
   b774a:	2102      	movs	r1, #2
   b774c:	f7fc bfe6 	b.w	b471c <network_disconnect>

000b7750 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7750:	2200      	movs	r2, #0
   b7752:	6840      	ldr	r0, [r0, #4]
   b7754:	4611      	mov	r1, r2
   b7756:	f7fc bfd9 	b.w	b470c <network_connecting>

000b775a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b775a:	2200      	movs	r2, #0
   b775c:	6840      	ldr	r0, [r0, #4]
   b775e:	4611      	mov	r1, r2
   b7760:	f7fc bfe4 	b.w	b472c <network_ready>

000b7764 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7764:	2300      	movs	r3, #0
   b7766:	6840      	ldr	r0, [r0, #4]
   b7768:	461a      	mov	r2, r3
   b776a:	4619      	mov	r1, r3
   b776c:	f7fc bfe6 	b.w	b473c <network_on>

000b7770 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7770:	2300      	movs	r3, #0
   b7772:	6840      	ldr	r0, [r0, #4]
   b7774:	461a      	mov	r2, r3
   b7776:	4619      	mov	r1, r3
   b7778:	f7fc bfe8 	b.w	b474c <network_off>

000b777c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b777c:	6840      	ldr	r0, [r0, #4]
   b777e:	2100      	movs	r1, #0
   b7780:	f7fd b80c 	b.w	b479c <network_is_on>

000b7784 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7784:	6840      	ldr	r0, [r0, #4]
   b7786:	2100      	movs	r1, #0
   b7788:	f7fd b810 	b.w	b47ac <network_is_off>

000b778c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b778c:	6840      	ldr	r0, [r0, #4]
   b778e:	2200      	movs	r2, #0
   b7790:	f081 0101 	eor.w	r1, r1, #1
   b7794:	f7fc bfe2 	b.w	b475c <network_listen>

000b7798 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7798:	6840      	ldr	r0, [r0, #4]
   b779a:	2200      	movs	r2, #0
   b779c:	f7fc bfee 	b.w	b477c <network_set_listen_timeout>

000b77a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b77a0:	2200      	movs	r2, #0
   b77a2:	6840      	ldr	r0, [r0, #4]
   b77a4:	4611      	mov	r1, r2
   b77a6:	f7fc bff1 	b.w	b478c <network_get_listen_timeout>

000b77aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b77aa:	2200      	movs	r2, #0
   b77ac:	6840      	ldr	r0, [r0, #4]
   b77ae:	4611      	mov	r1, r2
   b77b0:	f7fc bfdc 	b.w	b476c <network_listening>

000b77b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b77b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77b8:	b095      	sub	sp, #84	; 0x54
   b77ba:	4614      	mov	r4, r2
   b77bc:	460d      	mov	r5, r1
   b77be:	4607      	mov	r7, r0
    IPAddress addr;
   b77c0:	f7ff fe6e 	bl	b74a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b77c4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b77c6:	221c      	movs	r2, #28
   b77c8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b77ca:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b77cc:	f000 f9fe 	bl	b7bcc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b77d0:	2340      	movs	r3, #64	; 0x40
   b77d2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b77d4:	4620      	mov	r0, r4
   b77d6:	466b      	mov	r3, sp
   b77d8:	aa0c      	add	r2, sp, #48	; 0x30
   b77da:	2100      	movs	r1, #0
   b77dc:	f7fc fe3a 	bl	b4454 <netdb_getaddrinfo>
    if (!r) {
   b77e0:	4604      	mov	r4, r0
   b77e2:	2800      	cmp	r0, #0
   b77e4:	d14b      	bne.n	b787e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b77e6:	4602      	mov	r2, r0
   b77e8:	2101      	movs	r1, #1
   b77ea:	6868      	ldr	r0, [r5, #4]
   b77ec:	f7fc ff9e 	bl	b472c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b77f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77f4:	4622      	mov	r2, r4
   b77f6:	6868      	ldr	r0, [r5, #4]
   b77f8:	f7fc ff98 	bl	b472c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77fe:	4681      	mov	r9, r0
        bool ok = false;
   b7800:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7802:	2e00      	cmp	r6, #0
   b7804:	d03b      	beq.n	b787e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7806:	2900      	cmp	r1, #0
   b7808:	d139      	bne.n	b787e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b780a:	6873      	ldr	r3, [r6, #4]
   b780c:	2b02      	cmp	r3, #2
   b780e:	d003      	beq.n	b7818 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7810:	2b0a      	cmp	r3, #10
   b7812:	d011      	beq.n	b7838 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7814:	69f6      	ldr	r6, [r6, #28]
   b7816:	e7f4      	b.n	b7802 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7818:	f1b8 0f00 	cmp.w	r8, #0
   b781c:	d0fa      	beq.n	b7814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b781e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7820:	a806      	add	r0, sp, #24
   b7822:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7824:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7826:	f7ff fe69 	bl	b74fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b782a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b782c:	1d3c      	adds	r4, r7, #4
   b782e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7830:	682b      	ldr	r3, [r5, #0]
   b7832:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7834:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7836:	e7ed      	b.n	b7814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7838:	f1b9 0f00 	cmp.w	r9, #0
   b783c:	d0ea      	beq.n	b7814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b783e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7840:	2210      	movs	r2, #16
   b7842:	a801      	add	r0, sp, #4
   b7844:	f000 f9c2 	bl	b7bcc <memset>
                    a.v = 6;
   b7848:	2306      	movs	r3, #6
   b784a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b784e:	ad01      	add	r5, sp, #4
   b7850:	f104 0308 	add.w	r3, r4, #8
   b7854:	3418      	adds	r4, #24
   b7856:	6818      	ldr	r0, [r3, #0]
   b7858:	6859      	ldr	r1, [r3, #4]
   b785a:	462a      	mov	r2, r5
   b785c:	c203      	stmia	r2!, {r0, r1}
   b785e:	3308      	adds	r3, #8
   b7860:	42a3      	cmp	r3, r4
   b7862:	4615      	mov	r5, r2
   b7864:	d1f7      	bne.n	b7856 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7866:	a901      	add	r1, sp, #4
   b7868:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b786a:	ad07      	add	r5, sp, #28
   b786c:	f7ff fe26 	bl	b74bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7872:	1d3c      	adds	r4, r7, #4
   b7874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7876:	682b      	ldr	r3, [r5, #0]
   b7878:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b787a:	4649      	mov	r1, r9
   b787c:	e7ca      	b.n	b7814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b787e:	9800      	ldr	r0, [sp, #0]
   b7880:	f7fc fde0 	bl	b4444 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7884:	4638      	mov	r0, r7
   b7886:	b015      	add	sp, #84	; 0x54
   b7888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b788c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b788c:	4b02      	ldr	r3, [pc, #8]	; (b7898 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b788e:	4a03      	ldr	r2, [pc, #12]	; (b789c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7890:	601a      	str	r2, [r3, #0]
   b7892:	2200      	movs	r2, #0
   b7894:	605a      	str	r2, [r3, #4]

} // spark
   b7896:	4770      	bx	lr
   b7898:	2003e738 	.word	0x2003e738
   b789c:	000b81d4 	.word	0x000b81d4

000b78a0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78a0:	4770      	bx	lr
	...

000b78a4 <_Z20acquireSerial1Bufferv>:
{
   b78a4:	b538      	push	{r3, r4, r5, lr}
   b78a6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b78a8:	2514      	movs	r5, #20
   b78aa:	462a      	mov	r2, r5
   b78ac:	2100      	movs	r1, #0
   b78ae:	f000 f98d 	bl	b7bcc <memset>
   b78b2:	8025      	strh	r5, [r4, #0]
   b78b4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78b6:	4907      	ldr	r1, [pc, #28]	; (b78d4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b78b8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78ba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b78bc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78be:	f000 f82f 	bl	b7920 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78c2:	4904      	ldr	r1, [pc, #16]	; (b78d4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b78c4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78c6:	4628      	mov	r0, r5
   b78c8:	f000 f82a 	bl	b7920 <_ZnajRKSt9nothrow_t>
    };
   b78cc:	60e0      	str	r0, [r4, #12]
}
   b78ce:	4620      	mov	r0, r4
   b78d0:	bd38      	pop	{r3, r4, r5, pc}
   b78d2:	bf00      	nop
   b78d4:	000b8208 	.word	0x000b8208

000b78d8 <_Z22__fetch_global_Serial1v>:
{
   b78d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78da:	4d0e      	ldr	r5, [pc, #56]	; (b7914 <_Z22__fetch_global_Serial1v+0x3c>)
   b78dc:	7829      	ldrb	r1, [r5, #0]
   b78de:	f3bf 8f5b 	dmb	ish
   b78e2:	f011 0401 	ands.w	r4, r1, #1
{
   b78e6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78e8:	d111      	bne.n	b790e <_Z22__fetch_global_Serial1v+0x36>
   b78ea:	4628      	mov	r0, r5
   b78ec:	f7fc fbd7 	bl	b409e <__cxa_guard_acquire>
   b78f0:	b168      	cbz	r0, b790e <_Z22__fetch_global_Serial1v+0x36>
   b78f2:	a801      	add	r0, sp, #4
   b78f4:	f7ff ffd6 	bl	b78a4 <_Z20acquireSerial1Bufferv>
   b78f8:	aa01      	add	r2, sp, #4
   b78fa:	4621      	mov	r1, r4
   b78fc:	4806      	ldr	r0, [pc, #24]	; (b7918 <_Z22__fetch_global_Serial1v+0x40>)
   b78fe:	f7ff fecb 	bl	b7698 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7902:	4628      	mov	r0, r5
   b7904:	f7fc fbd0 	bl	b40a8 <__cxa_guard_release>
   b7908:	4804      	ldr	r0, [pc, #16]	; (b791c <_Z22__fetch_global_Serial1v+0x44>)
   b790a:	f000 f921 	bl	b7b50 <atexit>
    return serial1;
}
   b790e:	4802      	ldr	r0, [pc, #8]	; (b7918 <_Z22__fetch_global_Serial1v+0x40>)
   b7910:	b007      	add	sp, #28
   b7912:	bd30      	pop	{r4, r5, pc}
   b7914:	2003e740 	.word	0x2003e740
   b7918:	2003e744 	.word	0x2003e744
   b791c:	000b78a1 	.word	0x000b78a1

000b7920 <_ZnajRKSt9nothrow_t>:
   b7920:	f7fc bbb9 	b.w	b4096 <_Znaj>

000b7924 <_ZSt25__throw_bad_function_callv>:
   b7924:	b508      	push	{r3, lr}
   b7926:	f7fc ff79 	bl	b481c <abort>
	...

000b792c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b792c:	4901      	ldr	r1, [pc, #4]	; (b7934 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b792e:	f000 b8f9 	b.w	b7b24 <_ZNKSt9type_infoeqERKS_>
   b7932:	bf00      	nop
   b7934:	000b8224 	.word	0x000b8224

000b7938 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b793a:	2400      	movs	r4, #0
   b793c:	2310      	movs	r3, #16
   b793e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7942:	6803      	ldr	r3, [r0, #0]
   b7944:	4615      	mov	r5, r2
   b7946:	699e      	ldr	r6, [r3, #24]
   b7948:	6812      	ldr	r2, [r2, #0]
   b794a:	466b      	mov	r3, sp
   b794c:	e9cd 4400 	strd	r4, r4, [sp]
   b7950:	47b0      	blx	r6
   b7952:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7956:	f003 0306 	and.w	r3, r3, #6
   b795a:	2b06      	cmp	r3, #6
   b795c:	bf03      	ittte	eq
   b795e:	9b00      	ldreq	r3, [sp, #0]
   b7960:	602b      	streq	r3, [r5, #0]
   b7962:	2001      	moveq	r0, #1
   b7964:	4620      	movne	r0, r4
   b7966:	b004      	add	sp, #16
   b7968:	bd70      	pop	{r4, r5, r6, pc}

000b796a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b796a:	9800      	ldr	r0, [sp, #0]
   b796c:	4290      	cmp	r0, r2
   b796e:	bf14      	ite	ne
   b7970:	2001      	movne	r0, #1
   b7972:	2006      	moveq	r0, #6
   b7974:	4770      	bx	lr
	...

000b7978 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7978:	b510      	push	{r4, lr}
   b797a:	4b03      	ldr	r3, [pc, #12]	; (b7988 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b797c:	6003      	str	r3, [r0, #0]
   b797e:	4604      	mov	r4, r0
   b7980:	f000 f8cd 	bl	b7b1e <_ZNSt9type_infoD1Ev>
   b7984:	4620      	mov	r0, r4
   b7986:	bd10      	pop	{r4, pc}
   b7988:	000b8264 	.word	0x000b8264

000b798c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b798c:	b510      	push	{r4, lr}
   b798e:	4604      	mov	r4, r0
   b7990:	f7ff fff2 	bl	b7978 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7994:	4620      	mov	r0, r4
   b7996:	2108      	movs	r1, #8
   b7998:	f7fc fb7f 	bl	b409a <_ZdlPvj>
   b799c:	4620      	mov	r0, r4
   b799e:	bd10      	pop	{r4, pc}

000b79a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b79a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79a4:	461f      	mov	r7, r3
   b79a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b79aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b79ae:	4598      	cmp	r8, r3
   b79b0:	4606      	mov	r6, r0
   b79b2:	4615      	mov	r5, r2
   b79b4:	d107      	bne.n	b79c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79b6:	9907      	ldr	r1, [sp, #28]
   b79b8:	f000 f8b4 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b79bc:	b118      	cbz	r0, b79c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79be:	7165      	strb	r5, [r4, #5]
   b79c0:	2000      	movs	r0, #0
   b79c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b79c6:	4639      	mov	r1, r7
   b79c8:	4630      	mov	r0, r6
   b79ca:	f000 f8ab 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b79ce:	2800      	cmp	r0, #0
   b79d0:	d0f6      	beq.n	b79c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b79d2:	2301      	movs	r3, #1
   b79d4:	f8c4 8000 	str.w	r8, [r4]
   b79d8:	7125      	strb	r5, [r4, #4]
   b79da:	71a3      	strb	r3, [r4, #6]
   b79dc:	e7f0      	b.n	b79c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b79de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b79de:	b538      	push	{r3, r4, r5, lr}
   b79e0:	4615      	mov	r5, r2
   b79e2:	461c      	mov	r4, r3
   b79e4:	f000 f89e 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b79e8:	b120      	cbz	r0, b79f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b79ea:	2308      	movs	r3, #8
   b79ec:	60e3      	str	r3, [r4, #12]
   b79ee:	2306      	movs	r3, #6
   b79f0:	6025      	str	r5, [r4, #0]
   b79f2:	7123      	strb	r3, [r4, #4]
   b79f4:	bd38      	pop	{r3, r4, r5, pc}

000b79f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b79f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79f8:	4605      	mov	r5, r0
   b79fa:	460c      	mov	r4, r1
   b79fc:	9201      	str	r2, [sp, #4]
   b79fe:	461e      	mov	r6, r3
   b7a00:	f000 f890 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b7a04:	b950      	cbnz	r0, b7a1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a06:	2e03      	cmp	r6, #3
   b7a08:	d808      	bhi.n	b7a1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a0a:	6823      	ldr	r3, [r4, #0]
   b7a0c:	9a01      	ldr	r2, [sp, #4]
   b7a0e:	695b      	ldr	r3, [r3, #20]
   b7a10:	4629      	mov	r1, r5
   b7a12:	4620      	mov	r0, r4
   b7a14:	b002      	add	sp, #8
   b7a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a1a:	4718      	bx	r3
   b7a1c:	b002      	add	sp, #8
   b7a1e:	bd70      	pop	{r4, r5, r6, pc}

000b7a20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7a20:	b510      	push	{r4, lr}
   b7a22:	4b03      	ldr	r3, [pc, #12]	; (b7a30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7a24:	6003      	str	r3, [r0, #0]
   b7a26:	4604      	mov	r4, r0
   b7a28:	f7ff ffa6 	bl	b7978 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	bd10      	pop	{r4, pc}
   b7a30:	000b82c4 	.word	0x000b82c4

000b7a34 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7a34:	b510      	push	{r4, lr}
   b7a36:	4604      	mov	r4, r0
   b7a38:	f7ff fff2 	bl	b7a20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7a3c:	4620      	mov	r0, r4
   b7a3e:	210c      	movs	r1, #12
   b7a40:	f7fc fb2b 	bl	b409a <_ZdlPvj>
   b7a44:	4620      	mov	r0, r4
   b7a46:	bd10      	pop	{r4, pc}

000b7a48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a4a:	9f08      	ldr	r7, [sp, #32]
   b7a4c:	4297      	cmp	r7, r2
   b7a4e:	4605      	mov	r5, r0
   b7a50:	460e      	mov	r6, r1
   b7a52:	4614      	mov	r4, r2
   b7a54:	d00a      	beq.n	b7a6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7a56:	68a8      	ldr	r0, [r5, #8]
   b7a58:	6802      	ldr	r2, [r0, #0]
   b7a5a:	9708      	str	r7, [sp, #32]
   b7a5c:	6a15      	ldr	r5, [r2, #32]
   b7a5e:	4631      	mov	r1, r6
   b7a60:	4622      	mov	r2, r4
   b7a62:	46ac      	mov	ip, r5
   b7a64:	b003      	add	sp, #12
   b7a66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7a6a:	4760      	bx	ip
   b7a6c:	4619      	mov	r1, r3
   b7a6e:	9301      	str	r3, [sp, #4]
   b7a70:	f000 f858 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b7a74:	9b01      	ldr	r3, [sp, #4]
   b7a76:	2800      	cmp	r0, #0
   b7a78:	d0ed      	beq.n	b7a56 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7a7a:	2006      	movs	r0, #6
   b7a7c:	b003      	add	sp, #12
   b7a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7a80:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a84:	460d      	mov	r5, r1
   b7a86:	4619      	mov	r1, r3
   b7a88:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7a8c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7a90:	4681      	mov	r9, r0
   b7a92:	4617      	mov	r7, r2
   b7a94:	4698      	mov	r8, r3
   b7a96:	f000 f845 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b7a9a:	b190      	cbz	r0, b7ac2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7a9c:	2d00      	cmp	r5, #0
   b7a9e:	6034      	str	r4, [r6, #0]
   b7aa0:	7137      	strb	r7, [r6, #4]
   b7aa2:	db09      	blt.n	b7ab8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7aa4:	1961      	adds	r1, r4, r5
   b7aa6:	458a      	cmp	sl, r1
   b7aa8:	bf0c      	ite	eq
   b7aaa:	2106      	moveq	r1, #6
   b7aac:	2101      	movne	r1, #1
   b7aae:	71b1      	strb	r1, [r6, #6]
   b7ab0:	2000      	movs	r0, #0
   b7ab2:	b001      	add	sp, #4
   b7ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ab8:	3502      	adds	r5, #2
   b7aba:	d1f9      	bne.n	b7ab0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7abc:	2301      	movs	r3, #1
   b7abe:	71b3      	strb	r3, [r6, #6]
   b7ac0:	e7f6      	b.n	b7ab0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ac2:	4554      	cmp	r4, sl
   b7ac4:	d106      	bne.n	b7ad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7ac6:	4659      	mov	r1, fp
   b7ac8:	4648      	mov	r0, r9
   b7aca:	f000 f82b 	bl	b7b24 <_ZNKSt9type_infoeqERKS_>
   b7ace:	b108      	cbz	r0, b7ad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7ad0:	7177      	strb	r7, [r6, #5]
   b7ad2:	e7ed      	b.n	b7ab0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ad4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7ad8:	6803      	ldr	r3, [r0, #0]
   b7ada:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7ade:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7ae2:	69dc      	ldr	r4, [r3, #28]
   b7ae4:	463a      	mov	r2, r7
   b7ae6:	4643      	mov	r3, r8
   b7ae8:	4629      	mov	r1, r5
   b7aea:	46a4      	mov	ip, r4
   b7aec:	b001      	add	sp, #4
   b7aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7af2:	4760      	bx	ip

000b7af4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7af8:	4607      	mov	r7, r0
   b7afa:	460c      	mov	r4, r1
   b7afc:	4615      	mov	r5, r2
   b7afe:	461e      	mov	r6, r3
   b7b00:	f7ff ff6d 	bl	b79de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7b04:	b948      	cbnz	r0, b7b1a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7b06:	68b8      	ldr	r0, [r7, #8]
   b7b08:	6803      	ldr	r3, [r0, #0]
   b7b0a:	699f      	ldr	r7, [r3, #24]
   b7b0c:	462a      	mov	r2, r5
   b7b0e:	4633      	mov	r3, r6
   b7b10:	4621      	mov	r1, r4
   b7b12:	46bc      	mov	ip, r7
   b7b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7b18:	4760      	bx	ip
   b7b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7b1e <_ZNSt9type_infoD1Ev>:
   b7b1e:	4770      	bx	lr

000b7b20 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7b20:	2000      	movs	r0, #0
   b7b22:	4770      	bx	lr

000b7b24 <_ZNKSt9type_infoeqERKS_>:
   b7b24:	4281      	cmp	r1, r0
   b7b26:	b508      	push	{r3, lr}
   b7b28:	d00e      	beq.n	b7b48 <_ZNKSt9type_infoeqERKS_+0x24>
   b7b2a:	6840      	ldr	r0, [r0, #4]
   b7b2c:	7803      	ldrb	r3, [r0, #0]
   b7b2e:	2b2a      	cmp	r3, #42	; 0x2a
   b7b30:	d00c      	beq.n	b7b4c <_ZNKSt9type_infoeqERKS_+0x28>
   b7b32:	6849      	ldr	r1, [r1, #4]
   b7b34:	780b      	ldrb	r3, [r1, #0]
   b7b36:	2b2a      	cmp	r3, #42	; 0x2a
   b7b38:	bf08      	it	eq
   b7b3a:	3101      	addeq	r1, #1
   b7b3c:	f000 f87c 	bl	b7c38 <strcmp>
   b7b40:	fab0 f080 	clz	r0, r0
   b7b44:	0940      	lsrs	r0, r0, #5
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	2001      	movs	r0, #1
   b7b4a:	e7fc      	b.n	b7b46 <_ZNKSt9type_infoeqERKS_+0x22>
   b7b4c:	2000      	movs	r0, #0
   b7b4e:	e7fa      	b.n	b7b46 <_ZNKSt9type_infoeqERKS_+0x22>

000b7b50 <atexit>:
   b7b50:	2300      	movs	r3, #0
   b7b52:	4601      	mov	r1, r0
   b7b54:	461a      	mov	r2, r3
   b7b56:	4618      	mov	r0, r3
   b7b58:	f000 b894 	b.w	b7c84 <__register_exitproc>

000b7b5c <memcmp>:
   b7b5c:	b510      	push	{r4, lr}
   b7b5e:	3901      	subs	r1, #1
   b7b60:	4402      	add	r2, r0
   b7b62:	4290      	cmp	r0, r2
   b7b64:	d101      	bne.n	b7b6a <memcmp+0xe>
   b7b66:	2000      	movs	r0, #0
   b7b68:	e005      	b.n	b7b76 <memcmp+0x1a>
   b7b6a:	7803      	ldrb	r3, [r0, #0]
   b7b6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7b70:	42a3      	cmp	r3, r4
   b7b72:	d001      	beq.n	b7b78 <memcmp+0x1c>
   b7b74:	1b18      	subs	r0, r3, r4
   b7b76:	bd10      	pop	{r4, pc}
   b7b78:	3001      	adds	r0, #1
   b7b7a:	e7f2      	b.n	b7b62 <memcmp+0x6>

000b7b7c <memcpy>:
   b7b7c:	440a      	add	r2, r1
   b7b7e:	4291      	cmp	r1, r2
   b7b80:	f100 33ff 	add.w	r3, r0, #4294967295
   b7b84:	d100      	bne.n	b7b88 <memcpy+0xc>
   b7b86:	4770      	bx	lr
   b7b88:	b510      	push	{r4, lr}
   b7b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b92:	4291      	cmp	r1, r2
   b7b94:	d1f9      	bne.n	b7b8a <memcpy+0xe>
   b7b96:	bd10      	pop	{r4, pc}

000b7b98 <memmove>:
   b7b98:	4288      	cmp	r0, r1
   b7b9a:	b510      	push	{r4, lr}
   b7b9c:	eb01 0402 	add.w	r4, r1, r2
   b7ba0:	d902      	bls.n	b7ba8 <memmove+0x10>
   b7ba2:	4284      	cmp	r4, r0
   b7ba4:	4623      	mov	r3, r4
   b7ba6:	d807      	bhi.n	b7bb8 <memmove+0x20>
   b7ba8:	1e43      	subs	r3, r0, #1
   b7baa:	42a1      	cmp	r1, r4
   b7bac:	d008      	beq.n	b7bc0 <memmove+0x28>
   b7bae:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7bb6:	e7f8      	b.n	b7baa <memmove+0x12>
   b7bb8:	4402      	add	r2, r0
   b7bba:	4601      	mov	r1, r0
   b7bbc:	428a      	cmp	r2, r1
   b7bbe:	d100      	bne.n	b7bc2 <memmove+0x2a>
   b7bc0:	bd10      	pop	{r4, pc}
   b7bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7bca:	e7f7      	b.n	b7bbc <memmove+0x24>

000b7bcc <memset>:
   b7bcc:	4402      	add	r2, r0
   b7bce:	4603      	mov	r3, r0
   b7bd0:	4293      	cmp	r3, r2
   b7bd2:	d100      	bne.n	b7bd6 <memset+0xa>
   b7bd4:	4770      	bx	lr
   b7bd6:	f803 1b01 	strb.w	r1, [r3], #1
   b7bda:	e7f9      	b.n	b7bd0 <memset+0x4>

000b7bdc <srand>:
   b7bdc:	b538      	push	{r3, r4, r5, lr}
   b7bde:	4b10      	ldr	r3, [pc, #64]	; (b7c20 <srand+0x44>)
   b7be0:	681d      	ldr	r5, [r3, #0]
   b7be2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7be4:	4604      	mov	r4, r0
   b7be6:	b9b3      	cbnz	r3, b7c16 <srand+0x3a>
   b7be8:	2018      	movs	r0, #24
   b7bea:	f7fc fdf7 	bl	b47dc <malloc>
   b7bee:	4602      	mov	r2, r0
   b7bf0:	63a8      	str	r0, [r5, #56]	; 0x38
   b7bf2:	b920      	cbnz	r0, b7bfe <srand+0x22>
   b7bf4:	4b0b      	ldr	r3, [pc, #44]	; (b7c24 <srand+0x48>)
   b7bf6:	480c      	ldr	r0, [pc, #48]	; (b7c28 <srand+0x4c>)
   b7bf8:	2142      	movs	r1, #66	; 0x42
   b7bfa:	f7fc fe17 	bl	b482c <__assert_func>
   b7bfe:	490b      	ldr	r1, [pc, #44]	; (b7c2c <srand+0x50>)
   b7c00:	4b0b      	ldr	r3, [pc, #44]	; (b7c30 <srand+0x54>)
   b7c02:	e9c0 1300 	strd	r1, r3, [r0]
   b7c06:	4b0b      	ldr	r3, [pc, #44]	; (b7c34 <srand+0x58>)
   b7c08:	6083      	str	r3, [r0, #8]
   b7c0a:	230b      	movs	r3, #11
   b7c0c:	8183      	strh	r3, [r0, #12]
   b7c0e:	2100      	movs	r1, #0
   b7c10:	2001      	movs	r0, #1
   b7c12:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7c16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7c18:	2200      	movs	r2, #0
   b7c1a:	611c      	str	r4, [r3, #16]
   b7c1c:	615a      	str	r2, [r3, #20]
   b7c1e:	bd38      	pop	{r3, r4, r5, pc}
   b7c20:	2003e49c 	.word	0x2003e49c
   b7c24:	000b82fd 	.word	0x000b82fd
   b7c28:	000b8314 	.word	0x000b8314
   b7c2c:	abcd330e 	.word	0xabcd330e
   b7c30:	e66d1234 	.word	0xe66d1234
   b7c34:	0005deec 	.word	0x0005deec

000b7c38 <strcmp>:
   b7c38:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7c40:	2a01      	cmp	r2, #1
   b7c42:	bf28      	it	cs
   b7c44:	429a      	cmpcs	r2, r3
   b7c46:	d0f7      	beq.n	b7c38 <strcmp>
   b7c48:	1ad0      	subs	r0, r2, r3
   b7c4a:	4770      	bx	lr

000b7c4c <strcpy>:
   b7c4c:	4603      	mov	r3, r0
   b7c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7c52:	f803 2b01 	strb.w	r2, [r3], #1
   b7c56:	2a00      	cmp	r2, #0
   b7c58:	d1f9      	bne.n	b7c4e <strcpy+0x2>
   b7c5a:	4770      	bx	lr

000b7c5c <strlen>:
   b7c5c:	4603      	mov	r3, r0
   b7c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c62:	2a00      	cmp	r2, #0
   b7c64:	d1fb      	bne.n	b7c5e <strlen+0x2>
   b7c66:	1a18      	subs	r0, r3, r0
   b7c68:	3801      	subs	r0, #1
   b7c6a:	4770      	bx	lr

000b7c6c <strnlen>:
   b7c6c:	b510      	push	{r4, lr}
   b7c6e:	4602      	mov	r2, r0
   b7c70:	4401      	add	r1, r0
   b7c72:	428a      	cmp	r2, r1
   b7c74:	4613      	mov	r3, r2
   b7c76:	d003      	beq.n	b7c80 <strnlen+0x14>
   b7c78:	781c      	ldrb	r4, [r3, #0]
   b7c7a:	3201      	adds	r2, #1
   b7c7c:	2c00      	cmp	r4, #0
   b7c7e:	d1f8      	bne.n	b7c72 <strnlen+0x6>
   b7c80:	1a18      	subs	r0, r3, r0
   b7c82:	bd10      	pop	{r4, pc}

000b7c84 <__register_exitproc>:
   b7c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7c88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7d44 <__register_exitproc+0xc0>
   b7c8c:	4606      	mov	r6, r0
   b7c8e:	f8d8 0000 	ldr.w	r0, [r8]
   b7c92:	461f      	mov	r7, r3
   b7c94:	460d      	mov	r5, r1
   b7c96:	4691      	mov	r9, r2
   b7c98:	f000 f856 	bl	b7d48 <__retarget_lock_acquire_recursive>
   b7c9c:	4b25      	ldr	r3, [pc, #148]	; (b7d34 <__register_exitproc+0xb0>)
   b7c9e:	681c      	ldr	r4, [r3, #0]
   b7ca0:	b934      	cbnz	r4, b7cb0 <__register_exitproc+0x2c>
   b7ca2:	4c25      	ldr	r4, [pc, #148]	; (b7d38 <__register_exitproc+0xb4>)
   b7ca4:	601c      	str	r4, [r3, #0]
   b7ca6:	4b25      	ldr	r3, [pc, #148]	; (b7d3c <__register_exitproc+0xb8>)
   b7ca8:	b113      	cbz	r3, b7cb0 <__register_exitproc+0x2c>
   b7caa:	681b      	ldr	r3, [r3, #0]
   b7cac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7cb0:	6863      	ldr	r3, [r4, #4]
   b7cb2:	2b1f      	cmp	r3, #31
   b7cb4:	dd07      	ble.n	b7cc6 <__register_exitproc+0x42>
   b7cb6:	f8d8 0000 	ldr.w	r0, [r8]
   b7cba:	f000 f847 	bl	b7d4c <__retarget_lock_release_recursive>
   b7cbe:	f04f 30ff 	mov.w	r0, #4294967295
   b7cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7cc6:	b34e      	cbz	r6, b7d1c <__register_exitproc+0x98>
   b7cc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7ccc:	b988      	cbnz	r0, b7cf2 <__register_exitproc+0x6e>
   b7cce:	4b1c      	ldr	r3, [pc, #112]	; (b7d40 <__register_exitproc+0xbc>)
   b7cd0:	b923      	cbnz	r3, b7cdc <__register_exitproc+0x58>
   b7cd2:	f8d8 0000 	ldr.w	r0, [r8]
   b7cd6:	f000 f838 	bl	b7d4a <__retarget_lock_release>
   b7cda:	e7f0      	b.n	b7cbe <__register_exitproc+0x3a>
   b7cdc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ce0:	f7fc fd7c 	bl	b47dc <malloc>
   b7ce4:	2800      	cmp	r0, #0
   b7ce6:	d0f4      	beq.n	b7cd2 <__register_exitproc+0x4e>
   b7ce8:	2300      	movs	r3, #0
   b7cea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7cee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7cf2:	6863      	ldr	r3, [r4, #4]
   b7cf4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7cf8:	2201      	movs	r2, #1
   b7cfa:	409a      	lsls	r2, r3
   b7cfc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7d00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7d04:	4313      	orrs	r3, r2
   b7d06:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7d0a:	2e02      	cmp	r6, #2
   b7d0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7d10:	bf02      	ittt	eq
   b7d12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7d16:	4313      	orreq	r3, r2
   b7d18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7d1c:	6863      	ldr	r3, [r4, #4]
   b7d1e:	f8d8 0000 	ldr.w	r0, [r8]
   b7d22:	1c5a      	adds	r2, r3, #1
   b7d24:	3302      	adds	r3, #2
   b7d26:	6062      	str	r2, [r4, #4]
   b7d28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7d2c:	f000 f80e 	bl	b7d4c <__retarget_lock_release_recursive>
   b7d30:	2000      	movs	r0, #0
   b7d32:	e7c6      	b.n	b7cc2 <__register_exitproc+0x3e>
   b7d34:	2003e7e8 	.word	0x2003e7e8
   b7d38:	2003e75c 	.word	0x2003e75c
   b7d3c:	00000000 	.word	0x00000000
   b7d40:	000b47dd 	.word	0x000b47dd
   b7d44:	2003e500 	.word	0x2003e500

000b7d48 <__retarget_lock_acquire_recursive>:
   b7d48:	4770      	bx	lr

000b7d4a <__retarget_lock_release>:
   b7d4a:	4770      	bx	lr

000b7d4c <__retarget_lock_release_recursive>:
   b7d4c:	4770      	bx	lr

000b7d4e <link_code_end>:
	...

000b7d50 <dynalib_user>:
   b7d50:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7d60:	0000 0000 6572 6563 7669 2065 6164 6174     ....receive data
   b7d70:	6620 6f72 206d 7325 203a 4600 756f 646e      from %s: .Found
   b7d80:	2520 2064 6564 6976 6563 7328 2029 7865      %d device(s) ex
   b7d90:	6f70 6973 676e 7320 7265 6976 6563 2520     posing service %
   b7da0:	0073 6544 6976 6563 2520 2073 6461 6576     s.Device %s adve
   b7db0:	7472 7369 7365 2520 3430 3a58 2520 0075     rtises %04X: %u.
   b7dc0:	3036 3735 6666 6561 392d 6665 2d64 3131     6057ffae-9efd-11
   b7dd0:	6365 622d 3039 2d39 3230 3234 6361 3231     ec-b909-0242ac12
   b7de0:	3030 3230 3600 3530 3038 3333 2d63 6539     0002.6058033c-9e
   b7df0:	6466 312d 6531 2d63 3962 3930 302d 3432     fd-11ec-b909-024
   b7e00:	6132 3163 3032 3030 0032 3036 3835 3530     2ac120002.605805
   b7e10:	6534 392d 6665 2d64 3131 6365 622d 3039     4e-9efd-11ec-b90
   b7e20:	2d39 3230 3234 6361 3231 3030 3230 0000     9-0242ac120002..

000b7e30 <_ZTVN5spark13EthernetClassE>:
	...
   b7e38:	48ab 000b 48a1 000b 4897 000b 488d 000b     .H...H...H...H..
   b7e48:	4881 000b 4875 000b 777d 000b 7785 000b     .H..uH..}w...w..
   b7e58:	4869 000b 4861 000b 4857 000b 484d 000b     iH..aH..WH..MH..
   b7e68:	77b5 000b 7341 6573 7472 6f69 466e 6961     .w..AssertionFai
   b7e78:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   b7e88:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   b7e98:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   b7ea8:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   b7eb8:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   b7ec8:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   b7ed8:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   b7ee8:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   b7ef8:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   b7f08:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   b7f18:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   b7f28:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   b7f38:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   b7f48:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   b7f58:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   b7f68:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   b7f78:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   b7f88:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   b7f98:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   b7fa8:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   b7fb8:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   b7fc8:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   b7fd8:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   b7fe8:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   b7ff8:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   b8008:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   b8018:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   b8028:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   b8038:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   b8048:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   b8058:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   b8068:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   b8078:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000b8088 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8090:	4ae5 000b 4b49 000b 4cd1 000b 4b73 000b     .J..IK...L..sK..
   b80a0:	4ae9 000b                                   .J..

000b80a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b80ac:	4ae1 000b 4b57 000b 4ae3 000b 4b79 000b     .J..WK...J..yK..
   b80bc:	4b09 000b                                   .K..

000b80c0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b80c8:	4adf 000b 4b65 000b 5819 000b 4b7f 000b     .J..eK...X...K..
   b80d8:	4b29 000b                                   )K..

000b80dc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b80e8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   b80f8:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b8108:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b8118:	0065 0000                                   e...

000b811c <_ZTV9IPAddress>:
	...
   b8124:	743d 000b 742d 000b 742f 000b               =t..-t../t..

000b8130 <_ZTV9USBSerial>:
	...
   b8138:	7523 000b 758b 000b 7561 000b 71b9 000b     #u...u..au...q..
   b8148:	7553 000b 7525 000b 7535 000b 7585 000b     Su..%u..5u...u..
   b8158:	7545 000b 751d 000b                         Eu...u..

000b8160 <_ZTV11USARTSerial>:
	...
   b8168:	761d 000b 7689 000b 7661 000b 71b9 000b     .v...v..av...q..
   b8178:	7631 000b 764d 000b 763f 000b 765b 000b     1v..Mv..?v..[v..
   b8188:	761f 000b 7623 000b                         .v..#v..

000b8190 <_ZTVN5spark9WiFiClassE>:
	...
   b8198:	771f 000b 7715 000b 770b 000b 76c1 000b     .w...w...w...v..
   b81a8:	76ff 000b 76f3 000b 777d 000b 7785 000b     .v...v..}w...w..
   b81b8:	76e7 000b 76df 000b 76d5 000b 76cb 000b     .v...v...v...v..
   b81c8:	77b5 000b                                   .w..

000b81cc <_ZTVN5spark12NetworkClassE>:
	...
   b81d4:	773d 000b 7747 000b 7751 000b 775b 000b     =w..Gw..Qw..[w..
   b81e4:	7765 000b 7771 000b 777d 000b 7785 000b     ew..qw..}w...w..
   b81f4:	778d 000b 7799 000b 77a1 000b 77ab 000b     .w...w...w...w..
   b8204:	77b5 000b                                   .w..

000b8208 <_ZSt7nothrow>:
	...

000b8209 <_ZTSSt19_Sp_make_shared_tag>:
   b8209:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8219:	6572 5f64 6174 0067 0000                     red_tag....

000b8224 <_ZTISt19_Sp_make_shared_tag>:
   b8224:	8264 000b 8209 000b                         d.......

000b822c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b822c:	82c4 000b 8238 000b 82e8 000b               ....8.......

000b8238 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8238:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8248:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8258:	0045 0000                                   E...

000b825c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b825c:	0000 0000 822c 000b 7979 000b 798d 000b     ....,...yy...y..
   b826c:	7b21 000b 7b21 000b 79f7 000b 7939 000b     !{..!{...y..9y..
   b827c:	79df 000b 79a1 000b 796b 000b               .y...y..ky..

000b8288 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8288:	82c4 000b 8294 000b 822c 000b               ........,...

000b8294 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8294:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b82a4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b82b4:	666e 456f 0000 0000                         nfoE....

000b82bc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b82bc:	0000 0000 8288 000b 7a21 000b 7a35 000b     ........!z..5z..
   b82cc:	7b21 000b 7b21 000b 79f7 000b 7939 000b     !{..!{...y..9y..
   b82dc:	7af5 000b 7a81 000b 7a49 000b               .z...z..Iz..

000b82e8 <_ZTISt9type_info>:
   b82e8:	8264 000b 82f0 000b                         d.......

000b82f0 <_ZTSSt9type_info>:
   b82f0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8300:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8310:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8320:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8330:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8340:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8350:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8360:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8370:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8380:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8391 <link_const_variable_data_end>:
   b8391:	00          	.byte	0x00
	...

000b8394 <link_constructors_location>:
   b8394:	000b43a1 	.word	0x000b43a1
   b8398:	000b48b5 	.word	0x000b48b5
   b839c:	000b48c9 	.word	0x000b48c9
   b83a0:	000b71a9 	.word	0x000b71a9
   b83a4:	000b72c5 	.word	0x000b72c5
   b83a8:	000b72d5 	.word	0x000b72d5
   b83ac:	000b72e9 	.word	0x000b72e9
   b83b0:	000b7729 	.word	0x000b7729
   b83b4:	000b788d 	.word	0x000b788d

000b83b8 <link_constructors_end>:
	...
